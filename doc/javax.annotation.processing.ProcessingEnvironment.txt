*javax.annotation.processing.ProcessingEnvironment* *ProcessingEnvironment* An annotation processing tool framework willProcesso

public interface interface ProcessingEnvironment


|javax.annotation.processing.ProcessingEnvironment_Description|
|javax.annotation.processing.ProcessingEnvironment_Fields|
|javax.annotation.processing.ProcessingEnvironment_Constructors|
|javax.annotation.processing.ProcessingEnvironment_Methods|

================================================================================================================================

*javax.annotation.processing.ProcessingEnvironment_Methods*
|javax.annotation.processing.ProcessingEnvironment.getElementUtils()|Returns an implementation of some utility methods for  ope
|javax.annotation.processing.ProcessingEnvironment.getFiler()|Returns the filer used to create new source, class, or auxiliary 
|javax.annotation.processing.ProcessingEnvironment.getLocale()|Returns the current locale ornullif no locale is in  effect.
|javax.annotation.processing.ProcessingEnvironment.getMessager()|Returns the messager used to report errors, warnings, and othe
|javax.annotation.processing.ProcessingEnvironment.getOptions()|Returns the processor-specific options passed to the annotation
|javax.annotation.processing.ProcessingEnvironment.getSourceVersion()|Returns the source version that any generatedFiler#create
|javax.annotation.processing.ProcessingEnvironment.getTypeUtils()|Returns an implementation of some utility methods for  operat

*javax.annotation.processing.ProcessingEnvironment_Description*

An annotation processing tool framework will provide an annotation processor with an object implementing this 
interface(|javax.annotation.processing.Processor|) so the processor can use facilities provided by the framework to write new 
files, report error messages, and find other utilities. 

Third parties may wish to provide value-add wrappers around the facility objects from this interface, for example 
aFilerextension that allows multiple processors to coordinate writing out a single source file. To enable this, for processors 
running in a context where their side effects via the API could be visible to each other, the tool infrastructure must provide 
corresponding facility objects that are.equals,Filers that are.equals, and so on. In addition, the tool invocation must be able 
to be configured such that from the perspective of the running annotation processors, at least the chosen subset of helper 
classes are viewed as being loaded by the same class loader. (Since the facility objects manage shared state, the 
implementation of a wrapper class must know whether or not the same base facility object has been wrapped before.) 



*javax.annotation.processing.ProcessingEnvironment.getElementUtils()*

public |javax.lang.model.util.Elements| getElementUtils()

Returns an implementation of some utility methods for operating on elements 



    Returns: element utilities 

*javax.annotation.processing.ProcessingEnvironment.getFiler()*

public |javax.annotation.processing.Filer| getFiler()

Returns the filer used to create new source, class, or auxiliary files. 



    Returns: 

*javax.annotation.processing.ProcessingEnvironment.getLocale()*

public |java.util.Locale| getLocale()

Returns the current locale ornullif no locale is in effect. The locale can be be used to provide localized 
messages(|javax.annotation.processing.Messager|) . 



    Returns: the current locale or {@code null} if no locale is in effect 

*javax.annotation.processing.ProcessingEnvironment.getMessager()*

public |javax.annotation.processing.Messager| getMessager()

Returns the messager used to report errors, warnings, and other notices. 



    Returns: 

*javax.annotation.processing.ProcessingEnvironment.getOptions()*

public |java.util.Map|<String,String> getOptions()

Returns the processor-specific options passed to the annotation processing tool. Options are returned in the form of a map from 
option name to option value. For an option with no value, the corresponding value in the map isnull. 

See documentation of the particular tool infrastructure being used for details on how to pass in processor-specific options. 
For example, a command-line implementation may distinguish processor-specific options by prefixing them with a known string 
like"-A"; other tool implementations may follow different conventions or provide alternative mechanisms. A given implementation 
may also provide implementation-specific ways of finding options passed to the tool in addition to the processor-specific 
options. 



    Returns: the processor-specific options passed to the tool 

*javax.annotation.processing.ProcessingEnvironment.getSourceVersion()*

public |javax.lang.model.SourceVersion| getSourceVersion()

Returns the source version that any generated source(|javax.annotation.processing.Filer|) and 
class(|javax.annotation.processing.Filer|) files should conform to. 



    Returns: the source version to which generated source and class files should conform to 

*javax.annotation.processing.ProcessingEnvironment.getTypeUtils()*

public |javax.lang.model.util.Types| getTypeUtils()

Returns an implementation of some utility methods for operating on types. 



    Returns: type utilities 


