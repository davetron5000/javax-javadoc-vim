*javax.annotation.processing.RoundEnvironment* *RoundEnvironment* An annotation processing tool framework willProcessor#process 

public interface interface RoundEnvironment


|javax.annotation.processing.RoundEnvironment_Description|
|javax.annotation.processing.RoundEnvironment_Fields|
|javax.annotation.processing.RoundEnvironment_Constructors|
|javax.annotation.processing.RoundEnvironment_Methods|

================================================================================================================================

*javax.annotation.processing.RoundEnvironment_Methods*
|javax.annotation.processing.RoundEnvironment.errorRaised()|Returnstrueif an error was raised in the prior round  of processing
|javax.annotation.processing.RoundEnvironment.getElementsAnnotatedWith(Class<?extendsAnnotation>)|Returns the elements annotate
|javax.annotation.processing.RoundEnvironment.getElementsAnnotatedWith(TypeElement)|Returns the elements annotated with the giv
|javax.annotation.processing.RoundEnvironment.getRootElements()|Returns the root elements for annotation processing generated  
|javax.annotation.processing.RoundEnvironment.processingOver()|Returnstrueif types generated by this round will not  be subject

*javax.annotation.processing.RoundEnvironment_Description*

An annotation processing tool framework will provide an annotation processor with an object implementing this 
interface(|javax.annotation.processing.Processor|) so that the processor can query for information about a round of annotation 
processing. 



*javax.annotation.processing.RoundEnvironment.errorRaised()*

public boolean errorRaised()

Returnstrueif an error was raised in the prior round of processing; returnsfalseotherwise. 



    Returns: {@code true} if an error was raised in the prior round of processing; returns {@code false} otherwise 

*javax.annotation.processing.RoundEnvironment.getElementsAnnotatedWith(Class<?extendsAnnotation>)*

public |java.util.Set|<? extends javax.lang.model.element.Element> getElementsAnnotatedWith(java.lang.Class<? extends java.lang.annotation.Annotation> a)

Returns the elements annotated with the given annotation type. The annotation may appear directly or be inherited. Only package 
elements and type elements included in this round of annotation processing, or declarations of members, parameters, or type 
parameters declared within those, are returned. Included type elements are root 
types(|javax.annotation.processing.RoundEnvironment|) and any member types nested within them. Elements in a package are not 
considered included simply because apackage-infofile for that package was created. 


    a - annotation type being requested 

    Returns: the elements annotated with the given annotation type, or an empty set if there are none 

*javax.annotation.processing.RoundEnvironment.getElementsAnnotatedWith(TypeElement)*

public |java.util.Set|<? extends javax.lang.model.element.Element> getElementsAnnotatedWith(javax.lang.model.element.TypeElement a)

Returns the elements annotated with the given annotation type. The annotation may appear directly or be inherited. Only package 
elements and type elements included in this round of annotation processing, or declarations of members, parameters, or type 
parameters declared within those, are returned. Included type elements are root 
types(|javax.annotation.processing.RoundEnvironment|) and any member types nested within them. Elements in a package are not 
considered included simply because apackage-infofile for that package was created. 


    a - annotation type being requested 

    Returns: the elements annotated with the given annotation type, or an empty set if there are none 

*javax.annotation.processing.RoundEnvironment.getRootElements()*

public |java.util.Set|<? extends javax.lang.model.element.Element> getRootElements()

Returns the root elements for annotation processing generated by the prior round. 



    Returns: the root elements for annotation processing generated by the prior round, or an empty set if there were none 

*javax.annotation.processing.RoundEnvironment.processingOver()*

public boolean processingOver()

Returnstrueif types generated by this round will not be subject to a subsequent round of annotation processing; 
returnsfalseotherwise. 



    Returns: {@code true} if types generated by this round will not be subject to a subsequent round of annotation processing; returns 
             {@code false} otherwise 


