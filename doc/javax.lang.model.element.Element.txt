*javax.lang.model.element.Element* *Element* Represents a program element such as a package, class, or method.

public interface interface Element


|javax.lang.model.element.Element_Description|
|javax.lang.model.element.Element_Fields|
|javax.lang.model.element.Element_Constructors|
|javax.lang.model.element.Element_Methods|

================================================================================================================================

*javax.lang.model.element.Element_Methods*
|javax.lang.model.element.Element.accept(ElementVisitor<R,P>,P)|Applies a visitor to this element.
|javax.lang.model.element.Element.asType()|Returns the type defined by this element.
|javax.lang.model.element.Element.equals(Object)|Returnstrueif the argument represents the same  element asthis, orfalseotherwi
|javax.lang.model.element.Element.getAnnotation(Class<A>)|Returns this element's annotation for the specified type if  such an 
|javax.lang.model.element.Element.getAnnotationMirrors()|Returns the annotations that are directly present on this element.
|javax.lang.model.element.Element.getEnclosedElements()|Returns the elements that are, loosely speaking, directly  enclosed by 
|javax.lang.model.element.Element.getEnclosingElement()|Returns the innermost element  within which this element is, loosely sp
|javax.lang.model.element.Element.getKind()|Returns thekindof this element.
|javax.lang.model.element.Element.getModifiers()|Returns the modifiers of this element, excluding annotations.
|javax.lang.model.element.Element.getSimpleName()|Returns the simple (unqualified) name of this element.
|javax.lang.model.element.Element.hashCode()|Obeys the general contract ofObject#hashCode Object.hashCode.

*javax.lang.model.element.Element_Description*

Represents a program element such as a package, class, or method. Each element represents a static, language-level construct 
(and not, for example, a runtime construct of the virtual machine). 

Elements should be compared using the (|javax.lang.model.element.Element|) method. There is no guarantee that any particular 
element will always be represented by the same object. 

To implement operations based on the class of anElementobject, either use a visitor(|javax.lang.model.element.ElementVisitor|) 
or use the result of the (|javax.lang.model.element.Element|) method. Usinginstanceofis not necessarily a reliable idiom for 
determining the effective class of an object in this modeling hierarchy since an implementation may choose to have a single 
object implement multipleElementsubinterfaces. 



*javax.lang.model.element.Element.accept(ElementVisitor<R,P>,P)*

public |R| accept(
  javax.lang.model.element.ElementVisitor<R, P> v,
  P p)

Applies a visitor to this element. 


    v - the visitor operating on this element 
    p - additional parameter to the visitor 

    Returns: a visitor-specified result 

*javax.lang.model.element.Element.asType()*

public |javax.lang.model.type.TypeMirror| asType()

Returns the type defined by this element. 

A generic element defines a family of types, not just one. If this is a generic element, a prototypical type is returned. This 
is the element's invocation on the type variables corresponding to its own formal type parameters. For example, for the generic 
class elementC, the parameterized typeCis returned. The (|javax.lang.model.util.Types|) utility interface has more general 
methods for obtaining the full range of types defined by an element. 



    Returns: the type defined by this element 

*javax.lang.model.element.Element.equals(Object)*

public boolean equals(java.lang.Object obj)

Returnstrueif the argument represents the same element asthis, orfalseotherwise. 

Note that the identity of an element involves implicit state not directly accessible from the element's methods, including 
state about the presence of unrelated types. Element objects created by different implementations of these interfaces should 
not be expected to be equal even if the same element is being modeled; this is analogous to the inequality ofClassobjects for 
the same class file loaded through different class loaders. 


    obj - the object to be compared with this element 

    Returns: {@code true} if the specified object represents the same element as this 

*javax.lang.model.element.Element.getAnnotation(Class<A>)*

public |A| getAnnotation(java.lang.Class<A> annotationType)

Returns this element's annotation for the specified type if such an annotation is present, elsenull. The annotation may be 
either inherited or directly present on this element. 

The annotation returned by this method could contain an element whose value is of typeClass. This value cannot be returned 
directly: information necessary to locate and load a class (such as the class loader to use) is not available, and the class 
might not be loadable at all. Attempting to read aClassobject by invoking the relevant method on the returned annotation will 
result in a (|javax.lang.model.type.MirroredTypeException|) , from which the corresponding (|javax.lang.model.type.TypeMirror|) 
may be extracted. Similarly, attempting to read aClass[]-valued element will result in a 
(|javax.lang.model.type.MirroredTypesException|) . 

Note: This method is unlike others in this and related interfaces. It operates on runtime reflective information 
representations of annotation types currently loaded into the VM rather than on the representations defined by and used 
throughout these interfaces. Consequently, calling methods on the returned annotation object can throw many of the exceptions 
that can be thrown when calling methods on an annotation object returned by core reflection. This method is intended for 
callers that are written to operate on a known, fixed set of annotation types. 


    annotationType - the {@code Class} object corresponding to the annotation type 

    Returns: this element's annotation for the specified annotation type if present on this element, else {@code null} 

*javax.lang.model.element.Element.getAnnotationMirrors()*

public |java.util.List|<? extends javax.lang.model.element.AnnotationMirror> getAnnotationMirrors()

Returns the annotations that are directly present on this element. 

To get inherited annotations as well, use getAllAnnotationMirrors(|javax.lang.model.util.Elements|) . 



    Returns: the annotations directly present on this element; an empty list if there are none 

*javax.lang.model.element.Element.getEnclosedElements()*

public |java.util.List|<? extends javax.lang.model.element.Element> getEnclosedElements()

Returns the elements that are, loosely speaking, directly enclosed by this element. 

A class or interface is considered to enclose the fields, methods, constructors, and member types that it directly declares. 
This includes any (implicit) default constructor and the implicitvaluesandvalueOfmethods of an enum type. 

A package encloses the top-level classes and interfaces within it, but is not considered to enclose subpackages. 

Other kinds of elements are not currently considered to enclose any elements; however, that may change as this API or the 
programming language evolves. 

Note that elements of certain kinds can be isolated using methods in (|javax.lang.model.util.ElementFilter|) . 



    Returns: the enclosed elements, or an empty list if none 

*javax.lang.model.element.Element.getEnclosingElement()*

public |javax.lang.model.element.Element| getEnclosingElement()

Returns the innermost element within which this element is, loosely speaking, enclosed. 

If this element is one whose declaration is lexically enclosed immediately within the declaration of another element, that 
other element is returned. If this is a top-level type, its package is returned. If this is a package,nullis returned. If this 
is a type parameter,nullis returned. 



    Returns: the enclosing element, or {@code null} if there is none 

*javax.lang.model.element.Element.getKind()*

public |javax.lang.model.element.ElementKind| getKind()

Returns thekindof this element. 



    Returns: the kind of this element 

*javax.lang.model.element.Element.getModifiers()*

public |java.util.Set|<Modifier> getModifiers()

Returns the modifiers of this element, excluding annotations. Implicit modifiers, such as thepublicandstaticmodifiers of 
interface members, are included. 



    Returns: the modifiers of this element, or an empty set if there are none 

*javax.lang.model.element.Element.getSimpleName()*

public |javax.lang.model.element.Name| getSimpleName()

Returns the simple (unqualified) name of this element. The name of a generic type does not include any reference to its formal 
type parameters. For example, the simple name of the type elementjava.util.Setis"Set". If this element represents an unnamed 
package, an empty name is returned. If it represents a constructor, the name "" is returned. If it represents a static 
initializer, the name "" is returned. If it represents an anonymous class or instance initializer, an empty name is returned. 



    Returns: the simple name of this element 

*javax.lang.model.element.Element.hashCode()*

public int hashCode()

Obeys the general contract of Object.hashCode(|java.lang.Object|) . 




