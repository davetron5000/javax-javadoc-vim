*javax.lang.model.element.ExecutableElement* *ExecutableElement* Represents a method, constructor, or initializer (static or
 in

public interface interface ExecutableElement

  implements |javax.lang.model.element.Element|

|javax.lang.model.element.ExecutableElement_Description|
|javax.lang.model.element.ExecutableElement_Fields|
|javax.lang.model.element.ExecutableElement_Constructors|
|javax.lang.model.element.ExecutableElement_Methods|

================================================================================================================================

*javax.lang.model.element.ExecutableElement_Methods*
|javax.lang.model.element.ExecutableElement.getDefaultValue()|Returns the default value if this executable is an annotation  ty
|javax.lang.model.element.ExecutableElement.getParameters()|Returns the formal parameters of this executable.
|javax.lang.model.element.ExecutableElement.getReturnType()|Returns the return type of this executable.
|javax.lang.model.element.ExecutableElement.getThrownTypes()|Returns the exceptions and other throwables listed in this  method
|javax.lang.model.element.ExecutableElement.getTypeParameters()|Returns the formal type parameters of this executable  in decla
|javax.lang.model.element.ExecutableElement.isVarArgs()|Returnstrueif this method or constructor accepts a variable  number of 

*javax.lang.model.element.ExecutableElement_Description*

Represents a method, constructor, or initializer (static or instance) of a class or interface, including annotation type 
elements. 



*javax.lang.model.element.ExecutableElement.getDefaultValue()*

public |javax.lang.model.element.AnnotationValue| getDefaultValue()

Returns the default value if this executable is an annotation type element. Returnsnullif this method is not an annotation type 
element, or if it is an annotation type element with no default value. 



    Returns: the default value, or {@code null} if none 

*javax.lang.model.element.ExecutableElement.getParameters()*

public |java.util.List|<? extends javax.lang.model.element.VariableElement> getParameters()

Returns the formal parameters of this executable. They are returned in declaration order. 



    Returns: the formal parameters, or an empty list if there are none 

*javax.lang.model.element.ExecutableElement.getReturnType()*

public |javax.lang.model.type.TypeMirror| getReturnType()

Returns the return type of this executable. Returns a (|javax.lang.model.type.NoType|) with kind 
VOID(|javax.lang.model.type.TypeKind|) if this executable is not a method, or is a method that does not return a value. 



    Returns: the return type of this executable 

*javax.lang.model.element.ExecutableElement.getThrownTypes()*

public |java.util.List|<? extends javax.lang.model.type.TypeMirror> getThrownTypes()

Returns the exceptions and other throwables listed in this method or constructor'sthrowsclause in declaration order. 



    Returns: the exceptions and other throwables listed in the {@code throws} clause, or an empty list if there are none 

*javax.lang.model.element.ExecutableElement.getTypeParameters()*

public |java.util.List|<? extends javax.lang.model.element.TypeParameterElement> getTypeParameters()

Returns the formal type parameters of this executable in declaration order. 



    Returns: the formal type parameters, or an empty list if there are none 

*javax.lang.model.element.ExecutableElement.isVarArgs()*

public boolean isVarArgs()

Returnstrueif this method or constructor accepts a variable number of arguments and returnsfalseotherwise. 



    Returns: {@code true} if this method or constructor accepts a variable number of arguments and {@code false} otherwise 


