*javax.lang.model.element.Name* *Name* An immutable sequence of characters.

public interface interface Name

  implements |java.lang.CharSequence|

|javax.lang.model.element.Name_Description|
|javax.lang.model.element.Name_Fields|
|javax.lang.model.element.Name_Constructors|
|javax.lang.model.element.Name_Methods|

================================================================================================================================

*javax.lang.model.element.Name_Methods*
|javax.lang.model.element.Name.contentEquals(CharSequence)|Compares this name to the specifiedCharSequence.
|javax.lang.model.element.Name.equals(Object)|Returnstrueif the argument represents the same  name asthis, andfalseotherwise.
|javax.lang.model.element.Name.hashCode()|Obeys the general contract ofObject#hashCode Object.hashCode.

*javax.lang.model.element.Name_Description*

An immutable sequence of characters. When created by the same implementation, objects implementing this interface must obey the 
general equals contract(|java.lang.Object|) when compared with each other. Therefore,Nameobjects from the same implementation 
are usable in collections whileNames from different implementations may not work properly in collections. 

An emptyNamehas a length of zero. 

In the context of annotation processing(|javax.annotation.processing.ProcessingEnvironment|) , the guarantees for "the same" 
implementation must include contexts where the API mediated(|javax.annotation.processing|) side effects of 
processors(|javax.annotation.processing.Processor|) could be visible to each other, including successive annotation processing 
rounds(|javax.annotation.processing.RoundEnvironment|) . 



*javax.lang.model.element.Name.contentEquals(CharSequence)*

public boolean contentEquals(java.lang.CharSequence cs)

Compares this name to the specifiedCharSequence. The result istrueif and only if this name represents the same sequence 
ofcharvalues as the specified sequence. 


    cs - The sequence to compare this name against 

    Returns: {@code true} if this name represents the same sequence of {@code char} values as the specified sequence, {@code false} 
             otherwise 

*javax.lang.model.element.Name.equals(Object)*

public boolean equals(java.lang.Object obj)

Returnstrueif the argument represents the same name asthis, andfalseotherwise. 

Note that the identity of aNameis a function both of its content in terms of a sequence of characters as well as the 
implementation which created it. 


    obj - the object to be compared with this element 

    Returns: {@code true} if the specified object represents the same name as this 

*javax.lang.model.element.Name.hashCode()*

public int hashCode()

Obeys the general contract of Object.hashCode(|java.lang.Object|) . 




