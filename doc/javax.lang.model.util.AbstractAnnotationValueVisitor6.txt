*javax.lang.model.util.AbstractAnnotationValueVisitor6* *AbstractAnnotationValueVisitor6* A skeletal visitor for annotation valu

public abstract class AbstractAnnotationValueVisitor6<R,P>
  extends    |java.lang.Object|
  implements |javax.lang.model.element.AnnotationValueVisitor|

|javax.lang.model.util.AbstractAnnotationValueVisitor6_Description|
|javax.lang.model.util.AbstractAnnotationValueVisitor6_Fields|
|javax.lang.model.util.AbstractAnnotationValueVisitor6_Constructors|
|javax.lang.model.util.AbstractAnnotationValueVisitor6_Methods|

================================================================================================================================

*javax.lang.model.util.AbstractAnnotationValueVisitor6_Constructors*
|javax.lang.model.util.AbstractAnnotationValueVisitor6()|Constructor for concrete subclasses to call.

*javax.lang.model.util.AbstractAnnotationValueVisitor6_Methods*
|javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(AnnotationValue)|Visits an annotation value as if by passing itsel
|javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(AnnotationValue,P)|Visits an annotation value as if by passing its
|javax.lang.model.util.AbstractAnnotationValueVisitor6.visitUnknown(AnnotationValue,P)|

*javax.lang.model.util.AbstractAnnotationValueVisitor6_Description*

A skeletal visitor for annotation values with default behavior appropriate for the RELEASE_6(|javax.lang.model.SourceVersion|) 
source version. 

WARNING: TheAnnotationValueVisitorinterface implemented by this class may have methods added to it in the future to accommodate 
new, currently unknown, language structures added to future versions of the Java programming language. Therefore, methods whose 
names begin with"visit"may be added to this class in the future; to avoid incompatibilities, classes which extend this class 
should not declare any instance methods with names beginning with"visit". 

When such a new visit method is added, the default implementation in this class will be to call the 
visitUnknown(|javax.lang.model.util.AbstractAnnotationValueVisitor6|) method. A new abstract annotation value visitor class 
will also be introduced to correspond to the new language level; this visitor will have different default behavior for the 
visit method in question. When the new visitor is introduced, all or portions of this visitor may be deprecated. 



*javax.lang.model.util.AbstractAnnotationValueVisitor6()*

protected AbstractAnnotationValueVisitor6()

Constructor for concrete subclasses to call. 


*javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(AnnotationValue)*

public final |R| visit(javax.lang.model.element.AnnotationValue av)

Visits an annotation value as if by passing itself to that value's accept(|javax.lang.model.element.AnnotationValue|) method 
passingnullfor the additional parameter. The invocationv.visit(av)is equivalent toav.accept(v, null). 


    av - {@inheritDoc} 

*javax.lang.model.util.AbstractAnnotationValueVisitor6.visit(AnnotationValue,P)*

public final |R| visit(
  javax.lang.model.element.AnnotationValue av,
  P p)

Visits an annotation value as if by passing itself to that value's accept(|javax.lang.model.element.AnnotationValue|) . The 
invocationv.visit(av)is equivalent toav.accept(v, p). 


    av - {@inheritDoc} 
    p - {@inheritDoc} 

*javax.lang.model.util.AbstractAnnotationValueVisitor6.visitUnknown(AnnotationValue,P)*

public |R| visitUnknown(
  javax.lang.model.element.AnnotationValue av,
  P p)

The default implementation of this method inAbstractAnnotationValueVisitor6will always throwUnknownAnnotationValueException. 
This behavior is not required of a subclass. 


    av - {@inheritDoc} 
    p - {@inheritDoc} 


