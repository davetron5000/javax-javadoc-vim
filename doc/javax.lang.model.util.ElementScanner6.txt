*javax.lang.model.util.ElementScanner6* *ElementScanner6* A scanning visitor of program elements with default behavior
 appropri

public class ElementScanner6<R,P>
  extends    |javax.lang.model.util.AbstractElementVisitor6|

|javax.lang.model.util.ElementScanner6_Description|
|javax.lang.model.util.ElementScanner6_Fields|
|javax.lang.model.util.ElementScanner6_Constructors|
|javax.lang.model.util.ElementScanner6_Methods|

================================================================================================================================

*javax.lang.model.util.ElementScanner6_Fields*
|R_javax.lang.model.util.ElementScanner6.DEFAULT_VALUE|

*javax.lang.model.util.ElementScanner6_Constructors*
|javax.lang.model.util.ElementScanner6()|Constructor for concrete subclasses; usesnullfor the  default value.
|javax.lang.model.util.ElementScanner6(R)|Constructor for concrete subclasses; uses the argument for the  default value.

*javax.lang.model.util.ElementScanner6_Methods*
|javax.lang.model.util.ElementScanner6.scan(Element)|Convenience method equivalent tov.scan(e, null).
|javax.lang.model.util.ElementScanner6.scan(Element,P)|Processes an element by callinge.accept(this, p);  this method may be ov
|javax.lang.model.util.ElementScanner6.scan(Iterable<?extendsElement>,P)|Iterates over the given elements and calls#scan(Elemen
|javax.lang.model.util.ElementScanner6.visitExecutable(ExecutableElement,P)|This implementation scans the parameters.
|javax.lang.model.util.ElementScanner6.visitPackage(PackageElement,P)|This implementation scans the enclosed elements.
|javax.lang.model.util.ElementScanner6.visitType(TypeElement,P)|This implementation scans the enclosed elements.
|javax.lang.model.util.ElementScanner6.visitTypeParameter(TypeParameterElement,P)|This implementation scans the enclosed elemen
|javax.lang.model.util.ElementScanner6.visitVariable(VariableElement,P)|This implementation scans the enclosed elements.

*javax.lang.model.util.ElementScanner6_Description*

A scanning visitor of program elements with default behavior appropriate for the RELEASE_6(|javax.lang.model.SourceVersion|) 
source version. The visitXYZ methods in this class scan their component elements by callingscanon their enclosed 
elements(|javax.lang.model.element.Element|) , parameters(|javax.lang.model.element.ExecutableElement|) , etc., as indicated in 
the individual method specifications. A subclass can control the order elements are visited by overriding the visitXYZ methods. 
Note that clients of a scanner may get the desired behavior be invokingv.scan(e, p)rather thanv.visit(e, p)on the root objects 
of interest. 

When a subclass overrides a visitXYZ method, the new method can cause the enclosed elements to be scanned in the default way by 
calling super.visitXYZ. In this fashion, the concrete visitor can control the ordering of traversal over the component elements 
with respect to the additional processing; for example, consistently calling super.visitXYZ at the start of the overridden 
methods will yield a preorder traversal, etc. If the component elements should be traversed in some other order, instead of 
calling super.visitXYZ, an overriding visit method should callscanwith the elements in the desired order. 

Methods in this class may be overridden subject to their general contract. Note that annotating methods in concrete subclasses 
with @Override(|java.lang.Override|) will help ensure that methods are overridden as intended. 

WARNING: TheElementVisitorinterface implemented by this class may have methods added to it in the future to accommodate new, 
currently unknown, language structures added to future versions of the Java programming language. Therefore, methods whose 
names begin with"visit"may be added to this class in the future; to avoid incompatibilities, classes which extend this class 
should not declare any instance methods with names beginning with"visit". 

When such a new visit method is added, the default implementation in this class will be to call the 
visitUnknown(|javax.lang.model.util.ElementScanner6|) method. A new element scanner visitor class will also be introduced to 
correspond to the new language level; this visitor will have different default behavior for the visit method in question. When 
the new visitor is introduced, all or portions of this visitor may be deprecated. 



*R_javax.lang.model.util.ElementScanner6.DEFAULT_VALUE*

The specified default value. 



*javax.lang.model.util.ElementScanner6()*

protected ElementScanner6()

Constructor for concrete subclasses; usesnullfor the default value. 


*javax.lang.model.util.ElementScanner6(R)*

protected ElementScanner6(R defaultValue)

Constructor for concrete subclasses; uses the argument for the default value. 


*javax.lang.model.util.ElementScanner6.scan(Element)*

public final |R| scan(javax.lang.model.element.Element e)

Convenience method equivalent tov.scan(e, null). 



    Returns: the result of scanning {@code e}. 

*javax.lang.model.util.ElementScanner6.scan(Element,P)*

public |R| scan(
  javax.lang.model.element.Element e,
  P p)

Processes an element by callinge.accept(this, p); this method may be overridden by subclasses. 



    Returns: the result of visiting {@code e}. 

*javax.lang.model.util.ElementScanner6.scan(Iterable<?extendsElement>,P)*

public final |R| scan(
  java.lang.Iterable<? extends javax.lang.model.element.Element> iterable,
  P p)

Iterates over the given elements and calls scan(Element, P)(|javax.lang.model.util.ElementScanner6|) on each one. Returns the 
result of the last call toscanorDEFAULT_VALUEfor an empty iterable. 


    iterable - the elements to scan 
    p - additional parameter 

    Returns: the scan of the last element or {@code DEFAULT_VALUE} if no elements 

*javax.lang.model.util.ElementScanner6.visitExecutable(ExecutableElement,P)*

public |R| visitExecutable(
  javax.lang.model.element.ExecutableElement e,
  P p)

This implementation scans the parameters. 


    e - the element to visit 
    p - a visitor-specified parameter 

    Returns: the result of scanning 

*javax.lang.model.util.ElementScanner6.visitPackage(PackageElement,P)*

public |R| visitPackage(
  javax.lang.model.element.PackageElement e,
  P p)

This implementation scans the enclosed elements. 


    e - the element to visit 
    p - a visitor-specified parameter 

    Returns: the result of scanning 

*javax.lang.model.util.ElementScanner6.visitType(TypeElement,P)*

public |R| visitType(
  javax.lang.model.element.TypeElement e,
  P p)

This implementation scans the enclosed elements. 


    e - the element to visit 
    p - a visitor-specified parameter 

    Returns: the result of scanning 

*javax.lang.model.util.ElementScanner6.visitTypeParameter(TypeParameterElement,P)*

public |R| visitTypeParameter(
  javax.lang.model.element.TypeParameterElement e,
  P p)

This implementation scans the enclosed elements. 


    e - the element to visit 
    p - a visitor-specified parameter 

    Returns: the result of scanning 

*javax.lang.model.util.ElementScanner6.visitVariable(VariableElement,P)*

public |R| visitVariable(
  javax.lang.model.element.VariableElement e,
  P p)

This implementation scans the enclosed elements. 


    e - the element to visit 
    p - a visitor-specified parameter 

    Returns: the result of scanning 


