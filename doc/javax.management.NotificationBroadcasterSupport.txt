*javax.management.NotificationBroadcasterSupport* *NotificationBroadcasterSupport* Provides an implementation ofjavax.management

public class NotificationBroadcasterSupport
  extends    |java.lang.Object|
  implements |javax.management.NotificationEmitter|

|javax.management.NotificationBroadcasterSupport_Description|
|javax.management.NotificationBroadcasterSupport_Fields|
|javax.management.NotificationBroadcasterSupport_Constructors|
|javax.management.NotificationBroadcasterSupport_Methods|

================================================================================================================================

*javax.management.NotificationBroadcasterSupport_Constructors*
|javax.management.NotificationBroadcasterSupport()|Constructs a NotificationBroadcasterSupport where each listener is invoked b
|javax.management.NotificationBroadcasterSupport(Executor)|Constructs a NotificationBroadcasterSupport where each listener is i
|javax.management.NotificationBroadcasterSupport(Executor,MBeanNotificationInfo...)|Constructs a NotificationBroadcasterSupport
|javax.management.NotificationBroadcasterSupport(MBeanNotificationInfo...)|Constructs a NotificationBroadcasterSupport with inf

*javax.management.NotificationBroadcasterSupport_Methods*
|javax.management.NotificationBroadcasterSupport.addNotificationListener(NotificationListener,NotificationFilter,Object)|Adds a
|javax.management.NotificationBroadcasterSupport.getNotificationInfo()|
|javax.management.NotificationBroadcasterSupport.handleNotification(NotificationListener,Notification,Object)|This method is ca
|javax.management.NotificationBroadcasterSupport.removeNotificationListener(NotificationListener)|
|javax.management.NotificationBroadcasterSupport.removeNotificationListener(NotificationListener,NotificationFilter,Object)|
|javax.management.NotificationBroadcasterSupport.sendNotification(Notification)|Sends a notification.

*javax.management.NotificationBroadcasterSupport_Description*

Provides an implementation of NotificationEmitter(|javax.management.NotificationEmitter|) interface. This can be used as the 
super class of an MBean that sends notifications. 

By default, the notification dispatch model is synchronous. That is, when a thread calls sendNotification, the 
NotificationListener.handleNotification method of each listener is called within that thread. You can override this default by 
overriding handleNotification in a subclass, or by passing an Executor to the constructor. 

If the method call of a filter or listener throws an (|java.lang.Exception|) , then that exception does not prevent other 
listeners from being invoked. However, if the method call of a filter or ofExecutor.executeor ofhandleNotification(when 
noExcecutoris specified) throws an (|java.lang.Error|) , then thatErroris propagated to the caller of 
sendNotification(|javax.management.NotificationBroadcasterSupport|) . 

Remote listeners added using the JMX Remote API (see JMXConnector) are not usually called synchronously. That is, when 
sendNotification returns, it is not guaranteed that any remote listeners have yet received the notification. 



*javax.management.NotificationBroadcasterSupport()*

public NotificationBroadcasterSupport()

Constructs a NotificationBroadcasterSupport where each listener is invoked by the thread sending the notification. This 
constructor is equivalent to NotificationBroadcasterSupport(null, null)(|javax.management.NotificationBroadcasterSupport|) . 


*javax.management.NotificationBroadcasterSupport(Executor)*

public NotificationBroadcasterSupport(java.util.concurrent.Executor executor)

Constructs a NotificationBroadcasterSupport where each listener is invoked using the given (|java.util.concurrent.Executor|) . 
When sendNotification(|javax.management.NotificationBroadcasterSupport|) is called, a listener is selected if it was added with 
a null (|javax.management.NotificationFilter|) , or if isNotificationEnabled(|javax.management.NotificationFilter|) returns 
true for the notification being sent. The call to NotificationFilter.isNotificationEnabled takes place in the thread that 
called sendNotification. Then, for each selected listener, executor.execute(|java.util.concurrent.Executor|) is called with a 
command that calls the handleNotification method. This constructor is equivalent to NotificationBroadcasterSupport(executor, 
null)(|javax.management.NotificationBroadcasterSupport|) . 

    executor - an executor used by the method sendNotification to send each notification. If it is null, the thread calling sendNotification 
       will invoke the handleNotification method itself. 

*javax.management.NotificationBroadcasterSupport(Executor,MBeanNotificationInfo...)*

public NotificationBroadcasterSupport(
  java.util.concurrent.Executor executor,
  javax.management.MBeanNotificationInfo[] info)

Constructs a NotificationBroadcasterSupport with information about the notifications that may be sent, and where each listener 
is invoked using the given (|java.util.concurrent.Executor|) . 

When sendNotification(|javax.management.NotificationBroadcasterSupport|) is called, a listener is selected if it was added with 
a null (|javax.management.NotificationFilter|) , or if isNotificationEnabled(|javax.management.NotificationFilter|) returns 
true for the notification being sent. The call to NotificationFilter.isNotificationEnabled takes place in the thread that 
called sendNotification. Then, for each selected listener, executor.execute(|java.util.concurrent.Executor|) is called with a 
command that calls the handleNotification method. 

If the info array is not empty, then it is cloned by the constructor as if byinfo.clone(), and each call to 
(|javax.management.NotificationBroadcasterSupport|) returns a new clone. 

    executor - an executor used by the method sendNotification to send each notification. If it is null, the thread calling sendNotification 
       will invoke the handleNotification method itself. 
    info - an array indicating, for each notification this MBean may send, the name of the Java class of the notification and the 
       notification type. Can be null, which is equivalent to an empty array. 

*javax.management.NotificationBroadcasterSupport(MBeanNotificationInfo...)*

public NotificationBroadcasterSupport(javax.management.MBeanNotificationInfo[] info)

Constructs a NotificationBroadcasterSupport with information about the notifications that may be sent. Each listener is invoked 
by the thread sending the notification. This constructor is equivalent to NotificationBroadcasterSupport(null, 
info)(|javax.management.NotificationBroadcasterSupport|) . 

If the info array is not empty, then it is cloned by the constructor as if byinfo.clone(), and each call to 
(|javax.management.NotificationBroadcasterSupport|) returns a new clone. 

    info - an array indicating, for each notification this MBean may send, the name of the Java class of the notification and the 
       notification type. Can be null, which is equivalent to an empty array. 

*javax.management.NotificationBroadcasterSupport.addNotificationListener(NotificationListener,NotificationFilter,Object)*

public void addNotificationListener(
  javax.management.NotificationListener listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)

Adds a listener. 


    listener - The listener to receive notifications. 
    filter - The filter object. If filter is null, no filtering will be performed before handling notifications. 
    handback - An opaque object to be sent back to the listener when a notification is emitted. This object cannot be used by the Notification 
       broadcaster object. It should be resent unchanged with the notification to the listener. 

*javax.management.NotificationBroadcasterSupport.getNotificationInfo()*

public |javax.management.MBeanNotificationInfo|[] getNotificationInfo()





*javax.management.NotificationBroadcasterSupport.handleNotification(NotificationListener,Notification,Object)*

protected void handleNotification(
  javax.management.NotificationListener listener,
  javax.management.Notification notif,
  java.lang.Object handback)

This method is called by sendNotification(|javax.management.NotificationBroadcasterSupport|) for each listener in order to send 
the notification to that listener. It can be overridden in subclasses to change the behavior of notification delivery, for 
instance to deliver the notification in a separate thread. 

The default implementation of this method is equivalent to 

listener.handleNotification(notif, handback); 


    listener - the listener to which the notification is being delivered. 
    notif - the notification being delivered to the listener. 
    handback - the handback object that was supplied when the listener was added. 

*javax.management.NotificationBroadcasterSupport.removeNotificationListener(NotificationListener)*

public void removeNotificationListener(javax.management.NotificationListener listener)
  throws |javax.management.ListenerNotFoundException|
         




*javax.management.NotificationBroadcasterSupport.removeNotificationListener(NotificationListener,NotificationFilter,Object)*

public void removeNotificationListener(
  javax.management.NotificationListener listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)
  throws |javax.management.ListenerNotFoundException|
         




*javax.management.NotificationBroadcasterSupport.sendNotification(Notification)*

public void sendNotification(javax.management.Notification notification)

Sends a notification. 

If anExecutorwas specified in the constructor, it will be given one task per selected listener to deliver the notification to 
that listener. 


    notification - The notification to send. 


