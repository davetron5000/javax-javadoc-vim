*javax.management.NotificationEmitter* *NotificationEmitter* Interface implemented by an MBean that emits Notifications.

public interface interface NotificationEmitter

  implements |javax.management.NotificationBroadcaster|

|javax.management.NotificationEmitter_Description|
|javax.management.NotificationEmitter_Fields|
|javax.management.NotificationEmitter_Constructors|
|javax.management.NotificationEmitter_Methods|

================================================================================================================================

*javax.management.NotificationEmitter_Methods*
|javax.management.NotificationEmitter.removeNotificationListener(NotificationListener,NotificationFilter,Object)|Removes a list

*javax.management.NotificationEmitter_Description*

Interface implemented by an MBean that emits Notifications. It allows a listener to be registered with the MBean as a 
notification listener. 

Notification dispatch 

When an MBean emits a notification, it considers each listener that has been added with 
addNotificationListener(|javax.management.NotificationEmitter|) and not subsequently removed with 
removeNotificationListener(|javax.management.NotificationEmitter|) . If a filter was provided with that listener, and if the 
filter's isNotificationEnabled(|javax.management.NotificationFilter|) method returns false, the listener is ignored. Otherwise, 
the listener's handleNotification(|javax.management.NotificationListener|) method is called with the notification, as well as 
the handback object that was provided toaddNotificationListener. 

If the same listener is added more than once, it is considered as many times as it was added. It is often useful to add the 
same listener with different filters or handback objects. 

Implementations of this interface can differ regarding the thread in which the methods of filters and listeners are called. 

If the method call of a filter or listener throws an (|java.lang.Exception|) , then that exception should not prevent other 
listeners from being invoked. However, if the method call throws an (|java.lang.Error|) , then it is recommended that 
processing of the notification stop at that point, and if it is possible to propagate theErrorto the sender of the 
notification, this should be done. 

This interface should be used by new code in preference to the (|javax.management.NotificationBroadcaster|) interface. 

Implementations of this interface and ofNotificationBroadcastershould be careful about synchronization. In particular, it is 
not a good idea for an implementation to hold any locks while it is calling a listener. To deal with the possibility that the 
list of listeners might change while a notification is being dispatched, a good strategy is to use a 
(|java.util.concurrent.CopyOnWriteArrayList|) for this list. 



*javax.management.NotificationEmitter.removeNotificationListener(NotificationListener,NotificationFilter,Object)*

public void removeNotificationListener(
  javax.management.NotificationListener listener,
  javax.management.NotificationFilter filter,
  java.lang.Object handback)
  throws |javax.management.ListenerNotFoundException|
         
Removes a listener from this MBean. The MBean must have a listener that exactly matches the given listener, filter, and 
handback parameters. If there is more than one such listener, only one is removed. 

The filter and handback parameters may be null if and only if they are null in a listener to be removed. 


    listener - A listener that was previously added to this MBean. 
    filter - The filter that was specified when the listener was added. 
    handback - The handback that was specified when the listener was added. 


