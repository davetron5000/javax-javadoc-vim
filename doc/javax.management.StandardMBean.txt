*javax.management.StandardMBean* *StandardMBean* An MBean whose management interface is determined by reflection
 on a Java inte

public class StandardMBean
  extends    |java.lang.Object|
  implements |javax.management.DynamicMBean|
             |javax.management.MBeanRegistration|

|javax.management.StandardMBean_Description|
|javax.management.StandardMBean_Fields|
|javax.management.StandardMBean_Constructors|
|javax.management.StandardMBean_Methods|

================================================================================================================================

*javax.management.StandardMBean_Constructors*
|javax.management.StandardMBean(Class<?>)|Make a DynamicMBean out of this, using the specified  mbeanInterface class.
|javax.management.StandardMBean(Class<?>,boolean)|Make a DynamicMBean out of this, using the specified  mbeanInterface class.
|javax.management.StandardMBean(T,Class<T>)|Make a DynamicMBean out of the object  implementation, using the specified  mbeanIn
|javax.management.StandardMBean(T,Class<T>,boolean)|Make a DynamicMBean out of the object  implementation, using the specified 

*javax.management.StandardMBean_Methods*
|javax.management.StandardMBean.cacheMBeanInfo(MBeanInfo)|Customization hook:  cache the MBeanInfo built for this object.
|javax.management.StandardMBean.getAttribute(String)|
|javax.management.StandardMBean.getAttributes(String[])|
|javax.management.StandardMBean.getCachedMBeanInfo()|Customization hook:  Return the MBeanInfo cached for this object.
|javax.management.StandardMBean.getClassName(MBeanInfo)|Customization hook:  Get the className that will be used in the MBeanIn
|javax.management.StandardMBean.getConstructors(MBeanConstructorInfo[],Object)|Customization hook:  Get the MBeanConstructorInf
|javax.management.StandardMBean.getDescription(MBeanAttributeInfo)|Customization hook:  Get the description that will be used i
|javax.management.StandardMBean.getDescription(MBeanConstructorInfo)|Customization hook:  Get the description that will be used
|javax.management.StandardMBean.getDescription(MBeanConstructorInfo,MBeanParameterInfo,int)|Customization hook:  Get the descri
|javax.management.StandardMBean.getDescription(MBeanFeatureInfo)|Customization hook:  Get the description that will be used in 
|javax.management.StandardMBean.getDescription(MBeanInfo)|Customization hook:  Get the description that will be used in the MBe
|javax.management.StandardMBean.getDescription(MBeanOperationInfo)|Customization hook:  Get the description that will be used i
|javax.management.StandardMBean.getDescription(MBeanOperationInfo,MBeanParameterInfo,int)|Customization hook:  Get the descript
|javax.management.StandardMBean.getImpact(MBeanOperationInfo)|Customization hook:  Get the impact flag of the operation that wi
|javax.management.StandardMBean.getImplementation()|Get the implementation of this Standard MBean (or MXBean).
|javax.management.StandardMBean.getImplementationClass()|Get the class of the implementation of this Standard MBean (or MXBean)
|javax.management.StandardMBean.getMBeanInfo()|Get theMBeanInfofor this MBean.
|javax.management.StandardMBean.getMBeanInterface()|Get the Management Interface of this Standard MBean (or MXBean).
|javax.management.StandardMBean.getParameterName(MBeanConstructorInfo,MBeanParameterInfo,int)|Customization hook:  Get the name
|javax.management.StandardMBean.getParameterName(MBeanOperationInfo,MBeanParameterInfo,int)|Customization hook:  Get the name t
|javax.management.StandardMBean.invoke(String,Object[],String[])|
|javax.management.StandardMBean.postDeregister()|Allows the MBean to perform any operations needed after having been  unregiste
|javax.management.StandardMBean.postRegister(Boolean)|Allows the MBean to perform any operations needed after having been  regi
|javax.management.StandardMBean.preDeregister()|Allows the MBean to perform any operations it needs before  being unregistered 
|javax.management.StandardMBean.preRegister(MBeanServer,ObjectName)|Allows the MBean to perform any operations it needs before 
|javax.management.StandardMBean.setAttribute(Attribute)|
|javax.management.StandardMBean.setAttributes(AttributeList)|
|javax.management.StandardMBean.setImplementation(Object)|Replace the implementation object wrapped in this object.

*javax.management.StandardMBean_Description*

An MBean whose management interface is determined by reflection on a Java interface. 

This class brings more flexibility to the notion of Management Interface in the use of Standard MBeans. Straightforward use of 
the patterns for Standard MBeans described in the JMX Specification means that there is a fixed relationship between the 
implementation class of an MBean and its management interface (i.e., if the implementation class is Thing, the management 
interface must be ThingMBean). This class makes it possible to keep the convenience of specifying the management interface with 
a Java interface, without requiring that there be any naming relationship between the implementation and interface classes. 

By making a DynamicMBean out of an MBean, this class makes it possible to select any interface implemented by the MBean as its 
management interface, provided that it complies with JMX patterns (i.e., attributes defined by getter/setter etc...). 

This class also provides hooks that make it possible to supply custom descriptions and names for the 
(|javax.management.MBeanInfo|) returned by the DynamicMBean interface. 

Using this class, an MBean can be created with any implementation class name Impl and with a management interface defined (as 
for current Standard MBeans) by any interface Intf, in one of two general ways: 



Using the public constructor StandardMBean(impl,interface)(|javax.management.StandardMBean|) : 

MBeanServer mbs; ... Impl impl = new Impl(...); StandardMBean mbean = new StandardMBean(impl, Intf.class, false); 
mbs.registerMBean(mbean, objectName); 

Subclassing StandardMBean: 

public class Impl extends StandardMBean implements Intf { public Impl() { super(Intf.class, false); } // implement methods of 
Intf } 

[...] 

MBeanServer mbs; .... Impl impl = new Impl(); mbs.registerMBean(impl, objectName); 



In either case, the class Impl must implement the interface Intf. 

Standard MBeans based on the naming relationship between implementation and interface classes are of course still available. 

This class may also be used to construct MXBeans. The usage is exactly the same as for Standard MBeans except that in the 
examples above, thefalseparameter to the constructor orsuper(...)invocation is insteadtrue. 



*javax.management.StandardMBean(Class<?>)*

protected StandardMBean(java.lang.Class<?> mbeanInterface)
  throws |javax.management.NotCompliantMBeanException|
         
Make a DynamicMBean out of this, using the specified mbeanInterface class. 

Call this(this,mbeanInterface)(|javax.management.StandardMBean|) . This constructor is reserved to subclasses. 

    mbeanInterface - The Management Interface exported by this MBean. 

*javax.management.StandardMBean(Class<?>,boolean)*

protected StandardMBean(
  java.lang.Class<?> mbeanInterface,
  boolean isMXBean)

Make a DynamicMBean out of this, using the specified mbeanInterface class. This constructor can be used to make either Standard 
MBeans or MXBeans. Unlike the constructor (|javax.management.StandardMBean|) , it does not throw NotCompliantMBeanException. 

Call this(this, mbeanInterface, isMXBean)(|javax.management.StandardMBean|) . This constructor is reserved to subclasses. 

    mbeanInterface - The Management Interface exported by this MBean. 
    isMXBean - If true, the {@code mbeanInterface} parameter names an MXBean interface and the resultant MBean is an MXBean. 

*javax.management.StandardMBean(T,Class<T>)*

public StandardMBean(
  T implementation,
  java.lang.Class<T> mbeanInterface)
  throws |javax.management.NotCompliantMBeanException|
         
Make a DynamicMBean out of the object implementation, using the specified mbeanInterface class. 

    implementation - The implementation of this MBean. 
    mbeanInterface - The Management Interface exported by this MBean's implementation. If null, then this object will use standard JMX design 
       pattern to determine the management interface associated with the given implementation. 

*javax.management.StandardMBean(T,Class<T>,boolean)*

public StandardMBean(
  T implementation,
  java.lang.Class<T> mbeanInterface,
  boolean isMXBean)

Make a DynamicMBean out of the object implementation, using the specified mbeanInterface class. This constructor can be used to 
make either Standard MBeans or MXBeans. Unlike the constructor (|javax.management.StandardMBean|) , it does not throw 
NotCompliantMBeanException. 

    implementation - The implementation of this MBean. 
    mbeanInterface - The Management Interface exported by this MBean's implementation. If null, then this object will use standard JMX design 
       pattern to determine the management interface associated with the given implementation. 
    isMXBean - If true, the {@code mbeanInterface} parameter names an MXBean interface and the resultant MBean is an MXBean. 

*javax.management.StandardMBean.cacheMBeanInfo(MBeanInfo)*

protected void cacheMBeanInfo(javax.management.MBeanInfo info)

Customization hook: cache the MBeanInfo built for this object. 

Subclasses may redefine this method in order to implement their own caching policy. The default implementation stores info in 
this instance. A subclass can define other policies, such as not saving info (so it is reconstructed every time 
(|javax.management.StandardMBean|) is called) or sharing a unique (|javax.management.MBeanInfo|) object when several 
StandardMBean instances have equal (|javax.management.MBeanInfo|) values. 


    info - the new MBeanInfo to cache. Any previously cached value is discarded. This parameter may be null, in which case there is no new 
       cached value. 

*javax.management.StandardMBean.getAttribute(String)*

public |java.lang.Object| getAttribute(java.lang.String attribute)
  throws |javax.management.AttributeNotFoundException|
         |javax.management.MBeanException|
         |javax.management.ReflectionException|
         




*javax.management.StandardMBean.getAttributes(String[])*

public |javax.management.AttributeList| getAttributes(java.lang.String[] attributes)





*javax.management.StandardMBean.getCachedMBeanInfo()*

protected |javax.management.MBeanInfo| getCachedMBeanInfo()

Customization hook: Return the MBeanInfo cached for this object. 

Subclasses may redefine this method in order to implement their own caching policy. The default implementation stores one 
(|javax.management.MBeanInfo|) object per instance. 



    Returns: The cached MBeanInfo, or null if no MBeanInfo is cached. 

*javax.management.StandardMBean.getClassName(MBeanInfo)*

protected |java.lang.String| getClassName(javax.management.MBeanInfo info)

Customization hook: Get the className that will be used in the MBeanInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom class name. The default implementation returns 
info.getClassName()(|javax.management.MBeanInfo|) . 


    info - The default MBeanInfo derived by reflection. 

    Returns: the class name for the new MBeanInfo. 

*javax.management.StandardMBean.getConstructors(MBeanConstructorInfo[],Object)*

protected |javax.management.MBeanConstructorInfo|[] getConstructors(
  javax.management.MBeanConstructorInfo[] ctors,
  java.lang.Object impl)

Customization hook: Get the MBeanConstructorInfo[] that will be used in the MBeanInfo returned by this MBean. 

By default, this method returns null if the wrapped implementation is not this. Indeed, if the wrapped implementation is not 
this object itself, it will not be possible to recreate a wrapped implementation by calling the implementation constructors 
through MBeanServer.createMBean(...). Otherwise, if the wrapped implementation is this, ctors is returned. 

Subclasses may redefine this method in order to modify this behavior, if needed. 


    ctors - The default MBeanConstructorInfo[] derived by reflection. 
    impl - The wrapped implementation. If null is passed, the wrapped implementation is ignored and ctors is returned. 

    Returns: the MBeanConstructorInfo[] for the new MBeanInfo. 

*javax.management.StandardMBean.getDescription(MBeanAttributeInfo)*

protected |java.lang.String| getDescription(javax.management.MBeanAttributeInfo info)

Customization hook: Get the description that will be used in the MBeanAttributeInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom description. The default implementation returns 
getDescription((MBeanFeatureInfo) info)(|javax.management.StandardMBean|) . 


    info - The default MBeanAttributeInfo derived by reflection. 

    Returns: the description for the given MBeanAttributeInfo. 

*javax.management.StandardMBean.getDescription(MBeanConstructorInfo)*

protected |java.lang.String| getDescription(javax.management.MBeanConstructorInfo info)

Customization hook: Get the description that will be used in the MBeanConstructorInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom description. The default implementation returns 
getDescription((MBeanFeatureInfo) info)(|javax.management.StandardMBean|) . 


    info - The default MBeanConstructorInfo derived by reflection. 

    Returns: the description for the given MBeanConstructorInfo. 

*javax.management.StandardMBean.getDescription(MBeanConstructorInfo,MBeanParameterInfo,int)*

protected |java.lang.String| getDescription(
  javax.management.MBeanConstructorInfo ctor,
  javax.management.MBeanParameterInfo param,
  int sequence)

Customization hook: Get the description that will be used for the sequence MBeanParameterInfo of the MBeanConstructorInfo 
returned by this MBean. 

Subclasses may redefine this method in order to supply their custom description. The default implementation returns 
param.getDescription()(|javax.management.MBeanParameterInfo|) . 


    ctor - The default MBeanConstructorInfo derived by reflection. 
    param - The default MBeanParameterInfo derived by reflection. 
    sequence - The sequence number of the parameter considered ("0" for the first parameter, "1" for the second parameter, etc...). 

    Returns: the description for the given MBeanParameterInfo. 

*javax.management.StandardMBean.getDescription(MBeanFeatureInfo)*

protected |java.lang.String| getDescription(javax.management.MBeanFeatureInfo info)

Customization hook: Get the description that will be used in the MBeanFeatureInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom description. The default implementation returns 
info.getDescription()(|javax.management.MBeanFeatureInfo|) . 

This method is called by (|javax.management.StandardMBean|) , (|javax.management.StandardMBean|) , 
(|javax.management.StandardMBean|) . 


    info - The default MBeanFeatureInfo derived by reflection. 

    Returns: the description for the given MBeanFeatureInfo. 

*javax.management.StandardMBean.getDescription(MBeanInfo)*

protected |java.lang.String| getDescription(javax.management.MBeanInfo info)

Customization hook: Get the description that will be used in the MBeanInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom MBean description. The default implementation returns 
info.getDescription()(|javax.management.MBeanInfo|) . 


    info - The default MBeanInfo derived by reflection. 

    Returns: the description for the new MBeanInfo. 

*javax.management.StandardMBean.getDescription(MBeanOperationInfo)*

protected |java.lang.String| getDescription(javax.management.MBeanOperationInfo info)

Customization hook: Get the description that will be used in the MBeanOperationInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom description. The default implementation returns 
getDescription((MBeanFeatureInfo) info)(|javax.management.StandardMBean|) . 


    info - The default MBeanOperationInfo derived by reflection. 

    Returns: the description for the given MBeanOperationInfo. 

*javax.management.StandardMBean.getDescription(MBeanOperationInfo,MBeanParameterInfo,int)*

protected |java.lang.String| getDescription(
  javax.management.MBeanOperationInfo op,
  javax.management.MBeanParameterInfo param,
  int sequence)

Customization hook: Get the description that will be used for the sequence MBeanParameterInfo of the MBeanOperationInfo 
returned by this MBean. 

Subclasses may redefine this method in order to supply their custom description. The default implementation returns 
param.getDescription()(|javax.management.MBeanParameterInfo|) . 


    op - The default MBeanOperationInfo derived by reflection. 
    param - The default MBeanParameterInfo derived by reflection. 
    sequence - The sequence number of the parameter considered ("0" for the first parameter, "1" for the second parameter, etc...). 

    Returns: the description for the given MBeanParameterInfo. 

*javax.management.StandardMBean.getImpact(MBeanOperationInfo)*

protected int getImpact(javax.management.MBeanOperationInfo info)

Customization hook: Get the impact flag of the operation that will be used in the MBeanOperationInfo returned by this MBean. 

Subclasses may redefine this method in order to supply their custom impact flag. The default implementation returns 
info.getImpact()(|javax.management.MBeanOperationInfo|) . 


    info - The default MBeanOperationInfo derived by reflection. 

    Returns: the impact flag for the given MBeanOperationInfo. 

*javax.management.StandardMBean.getImplementation()*

public |java.lang.Object| getImplementation()

Get the implementation of this Standard MBean (or MXBean). 



    Returns: The implementation of this Standard MBean (or MXBean). 

*javax.management.StandardMBean.getImplementationClass()*

public |java.lang.Class|<?> getImplementationClass()

Get the class of the implementation of this Standard MBean (or MXBean). 



    Returns: The class of the implementation of this Standard MBean (or MXBean). 

*javax.management.StandardMBean.getMBeanInfo()*

public |javax.management.MBeanInfo| getMBeanInfo()

Get the (|javax.management.MBeanInfo|) for this MBean. 

This method implements DynamicMBean.getMBeanInfo()(|javax.management.DynamicMBean|) . 

This method first calls (|javax.management.StandardMBean|) in order to retrieve the cached MBeanInfo for this MBean, if any. If 
the MBeanInfo returned by (|javax.management.StandardMBean|) is not null, then it is returned. Otherwise, this method builds a 
default MBeanInfo for this MBean, using the Management Interface specified for this MBean. 

While building the MBeanInfo, this method calls the customization hooks that make it possible for subclasses to supply their 
custom descriptions, parameter names, etc... Finally, it calls cacheMBeanInfo()(|javax.management.StandardMBean|) in order to 
cache the new MBeanInfo. 



    Returns: The cached MBeanInfo for that MBean, if not null, or a newly built MBeanInfo if none was cached. 

*javax.management.StandardMBean.getMBeanInterface()*

public final |java.lang.Class|<?> getMBeanInterface()

Get the Management Interface of this Standard MBean (or MXBean). 



    Returns: The management interface of this Standard MBean (or MXBean). 

*javax.management.StandardMBean.getParameterName(MBeanConstructorInfo,MBeanParameterInfo,int)*

protected |java.lang.String| getParameterName(
  javax.management.MBeanConstructorInfo ctor,
  javax.management.MBeanParameterInfo param,
  int sequence)

Customization hook: Get the name that will be used for the sequence MBeanParameterInfo of the MBeanConstructorInfo returned by 
this MBean. 

Subclasses may redefine this method in order to supply their custom parameter name. The default implementation returns 
param.getName()(|javax.management.MBeanParameterInfo|) . 


    ctor - The default MBeanConstructorInfo derived by reflection. 
    param - The default MBeanParameterInfo derived by reflection. 
    sequence - The sequence number of the parameter considered ("0" for the first parameter, "1" for the second parameter, etc...). 

    Returns: the name for the given MBeanParameterInfo. 

*javax.management.StandardMBean.getParameterName(MBeanOperationInfo,MBeanParameterInfo,int)*

protected |java.lang.String| getParameterName(
  javax.management.MBeanOperationInfo op,
  javax.management.MBeanParameterInfo param,
  int sequence)

Customization hook: Get the name that will be used for the sequence MBeanParameterInfo of the MBeanOperationInfo returned by 
this MBean. 

Subclasses may redefine this method in order to supply their custom parameter name. The default implementation returns 
param.getName()(|javax.management.MBeanParameterInfo|) . 


    op - The default MBeanOperationInfo derived by reflection. 
    param - The default MBeanParameterInfo derived by reflection. 
    sequence - The sequence number of the parameter considered ("0" for the first parameter, "1" for the second parameter, etc...). 

    Returns: the name to use for the given MBeanParameterInfo. 

*javax.management.StandardMBean.invoke(String,Object[],String[])*

public |java.lang.Object| invoke(
  java.lang.String actionName,
  java.lang.Object[] params,
  java.lang.String[] signature)
  throws |javax.management.MBeanException|
         |javax.management.ReflectionException|
         




*javax.management.StandardMBean.postDeregister()*

public void postDeregister()

Allows the MBean to perform any operations needed after having been unregistered in the MBean server. 

The default implementation of this method does nothing for Standard MBeans. For MXBeans, it removes any information that was 
recorded by the preRegister(|javax.management.StandardMBean|) method. 

It is good practice for a subclass that overrides this method to call the overridden method viasuper.postRegister(...). This is 
necessary if this object is an MXBean that is referenced by attributes or operations in other MXBeans. 



*javax.management.StandardMBean.postRegister(Boolean)*

public void postRegister(java.lang.Boolean registrationDone)

Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration 
has failed. 

The default implementation of this method does nothing for Standard MBeans. For MXBeans, it undoes any work done by 
preRegister(|javax.management.StandardMBean|) if registration fails. 

It is good practice for a subclass that overrides this method to call the overridden method viasuper.postRegister(...). This is 
necessary if this object is an MXBean that is referenced by attributes or operations in other MXBeans. 


    registrationDone - Indicates whether or not the MBean has been successfully registered in the MBean server. The value false means that the 
       registration phase has failed. 

*javax.management.StandardMBean.preDeregister()*

public void preDeregister()
  throws |java.lang.Exception|
         
Allows the MBean to perform any operations it needs before being unregistered by the MBean server. 

The default implementation of this method does nothing. 

It is good practice for a subclass that overrides this method to call the overridden method viasuper.preDeegister(...). 



*javax.management.StandardMBean.preRegister(MBeanServer,ObjectName)*

public |javax.management.ObjectName| preRegister(
  javax.management.MBeanServer server,
  javax.management.ObjectName name)
  throws |java.lang.Exception|
         
Allows the MBean to perform any operations it needs before being registered in the MBean server. If the name of the MBean is 
not specified, the MBean can provide a name for its registration. If any exception is raised, the MBean will not be registered 
in the MBean server. 

The default implementation of this method returns thenameparameter. It does nothing else for Standard MBeans. For MXBeans, it 
records theMBeanServerandObjectNameparameters so they can be used to translate inter-MXBean references. 

It is good practice for a subclass that overrides this method to call the overridden method viasuper.preRegister(...). This is 
necessary if this object is an MXBean that is referenced by attributes or operations in other MXBeans. 


    server - The MBean server in which the MBean will be registered. 
    name - The object name of the MBean. This name is null if the name parameter to one of the createMBean or registerMBean methods in the 
       {@link MBeanServer} interface is null. In that case, this method must return a non-null ObjectName for the new MBean. 

    Returns: The name under which the MBean is to be registered. This value must not be null. If the name parameter is not null, it will 
             usually but not necessarily be the returned value. 

*javax.management.StandardMBean.setAttribute(Attribute)*

public void setAttribute(javax.management.Attribute attribute)
  throws |javax.management.AttributeNotFoundException|
         |javax.management.InvalidAttributeValueException|
         |javax.management.MBeanException|
         |javax.management.ReflectionException|
         




*javax.management.StandardMBean.setAttributes(AttributeList)*

public |javax.management.AttributeList| setAttributes(javax.management.AttributeList attributes)





*javax.management.StandardMBean.setImplementation(Object)*

public void setImplementation(java.lang.Object implementation)
  throws |javax.management.NotCompliantMBeanException|
         
Replace the implementation object wrapped in this object. 


    implementation - The new implementation of this Standard MBean (or MXBean). The implementation object must implement the Standard MBean (or 
       MXBean) interface that was supplied when this StandardMBean was constructed. 


