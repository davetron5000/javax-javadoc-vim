*javax.management.monitor.Monitor* *Monitor* Defines the part common to all monitor MBeans.

public abstract class Monitor
  extends    |javax.management.NotificationBroadcasterSupport|
  implements |javax.management.monitor.MonitorMBean|
             |javax.management.MBeanRegistration|

|javax.management.monitor.Monitor_Description|
|javax.management.monitor.Monitor_Fields|
|javax.management.monitor.Monitor_Constructors|
|javax.management.monitor.Monitor_Methods|

================================================================================================================================

*javax.management.monitor.Monitor_Fields*
|int_javax.management.monitor.Monitor.alreadyNotified|
|int[]_javax.management.monitor.Monitor.alreadyNotifieds|
|int_javax.management.monitor.Monitor.capacityIncrement|
|java.lang.String_javax.management.monitor.Monitor.dbgTag|
|int_javax.management.monitor.Monitor.elementCount|
|int_javax.management.monitor.Monitor.OBSERVED_ATTRIBUTE_ERROR_NOTIFIED|
|int_javax.management.monitor.Monitor.OBSERVED_ATTRIBUTE_TYPE_ERROR_NOTIFIED|
|int_javax.management.monitor.Monitor.OBSERVED_OBJECT_ERROR_NOTIFIED|
|int_javax.management.monitor.Monitor.RESET_FLAGS_ALREADY_NOTIFIED|
|int_javax.management.monitor.Monitor.RUNTIME_ERROR_NOTIFIED|
|javax.management.MBeanServer_javax.management.monitor.Monitor.server|

*javax.management.monitor.Monitor_Constructors*
|javax.management.monitor.Monitor()|

*javax.management.monitor.Monitor_Methods*
|javax.management.monitor.Monitor.addObservedObject(ObjectName)|Adds the specified object in the set of observed MBeans, if thi
|javax.management.monitor.Monitor.containsObservedObject(ObjectName)|Tests whether the specified object is in the set of observ
|javax.management.monitor.Monitor.getGranularityPeriod()|Gets the granularity period (in milliseconds).
|javax.management.monitor.Monitor.getObservedAttribute()|Gets the attribute being observed.
|javax.management.monitor.Monitor.getObservedObject()|Returns the object name of the first object in the set of observed  MBean
|javax.management.monitor.Monitor.getObservedObjects()|Returns an array containing the objects being observed.
|javax.management.monitor.Monitor.isActive()|Tests whether the monitor MBean is active.
|javax.management.monitor.Monitor.postDeregister()|Allows the monitor MBean to perform any operations needed after  having been
|javax.management.monitor.Monitor.postRegister(Boolean)|Allows the monitor MBean to perform any operations needed after  having
|javax.management.monitor.Monitor.preDeregister()|Allows the monitor MBean to perform any operations it needs  before being unr
|javax.management.monitor.Monitor.preRegister(MBeanServer,ObjectName)|Allows the monitor MBean to perform any operations it nee
|javax.management.monitor.Monitor.removeObservedObject(ObjectName)|Removes the specified object from the set of observed MBeans
|javax.management.monitor.Monitor.setGranularityPeriod(long)|Sets the granularity period (in milliseconds).
|javax.management.monitor.Monitor.setObservedAttribute(String)|Sets the attribute to observe.
|javax.management.monitor.Monitor.setObservedObject(ObjectName)|Removes all objects from the set of observed objects, and then 
|javax.management.monitor.Monitor.start()|Starts the monitor.
|javax.management.monitor.Monitor.stop()|Stops the monitor.

*javax.management.monitor.Monitor_Description*

Defines the part common to all monitor MBeans. A monitor MBean monitors values of an attribute common to a set of observed 
MBeans. The observed attribute is monitored at intervals specified by the granularity period. A gauge value (derived gauge) is 
derived from the values of the observed attribute. 



*int_javax.management.monitor.Monitor.alreadyNotified*

Monitor errors that have already been notified. 


*int[]_javax.management.monitor.Monitor.alreadyNotifieds*

Selected monitor errors that have already been notified. 

Each element in this array corresponds to an observed object in the vector. It contains a bit mask of the flags 
(|javax.management.monitor.Monitor|) etc, indicating whether the corresponding notification has already been sent for the MBean 
being monitored. 


*int_javax.management.monitor.Monitor.capacityIncrement*

The amount by which the capacity of the monitor arrays are automatically incremented when their size becomes greater than their 
capacity. 


*java.lang.String_javax.management.monitor.Monitor.dbgTag*

This field is retained for compatibility but should not be referenced. 


*int_javax.management.monitor.Monitor.elementCount*

The number of valid components in the vector of observed objects. 


*int_javax.management.monitor.Monitor.OBSERVED_ATTRIBUTE_ERROR_NOTIFIED*

Flag denoting that a notification has occurred after changing the observed attribute. This flag is used to check that the new 
observed attribute belongs to the observed object at the time of the first notification. 


*int_javax.management.monitor.Monitor.OBSERVED_ATTRIBUTE_TYPE_ERROR_NOTIFIED*

Flag denoting that a notification has occurred after changing the observed object or the observed attribute. This flag is used 
to check that the observed attribute type is correct (depending on the monitor in use) at the time of the first notification. 


*int_javax.management.monitor.Monitor.OBSERVED_OBJECT_ERROR_NOTIFIED*

Flag denoting that a notification has occurred after changing the observed object. This flag is used to check that the new 
observed object is registered in the MBean server at the time of the first notification. 


*int_javax.management.monitor.Monitor.RESET_FLAGS_ALREADY_NOTIFIED*

This flag is used to reset the alreadyNotifieds(|javax.management.monitor.Monitor|) monitor attribute. 


*int_javax.management.monitor.Monitor.RUNTIME_ERROR_NOTIFIED*

Flag denoting that a notification has occurred after changing the observed object or the observed attribute. This flag is used 
to notify any exception (except the cases described above) when trying to get the value of the observed attribute at the time 
of the first notification. 


*javax.management.MBeanServer_javax.management.monitor.Monitor.server*

Reference to the MBean server. This reference is null when the monitor MBean is not registered in an MBean server. This 
reference is initialized before the monitor MBean is registered in the MBean server. 



*javax.management.monitor.Monitor()*

public Monitor()




*javax.management.monitor.Monitor.addObservedObject(ObjectName)*

public synchronized void addObservedObject(javax.management.ObjectName object)
  throws |java.lang.IllegalArgumentException|
         
Adds the specified object in the set of observed MBeans, if this object is not already present. 


    object - The object to observe. 

*javax.management.monitor.Monitor.containsObservedObject(ObjectName)*

public synchronized boolean containsObservedObject(javax.management.ObjectName object)

Tests whether the specified object is in the set of observed MBeans. 


    object - The object to check. 

    Returns: true if the specified object is present, false otherwise. 

*javax.management.monitor.Monitor.getGranularityPeriod()*

public synchronized long getGranularityPeriod()

Gets the granularity period (in milliseconds). The default value of the granularity period is 10 seconds. 



    Returns: The granularity period value. 

*javax.management.monitor.Monitor.getObservedAttribute()*

public synchronized |java.lang.String| getObservedAttribute()

Gets the attribute being observed. The observed attribute is not initialized by default (set to null). 



    Returns: The attribute being observed. 

*javax.management.monitor.Monitor.getObservedObject()*

public synchronized |javax.management.ObjectName| getObservedObject()

Returns the object name of the first object in the set of observed MBeans, or null if there is no such object. 

    Deprecated: As of JMX 1.2, replaced by {@link #getObservedObjects}


    Returns: The object being observed. 

*javax.management.monitor.Monitor.getObservedObjects()*

public synchronized |javax.management.ObjectName|[] getObservedObjects()

Returns an array containing the objects being observed. 



    Returns: The objects being observed. 

*javax.management.monitor.Monitor.isActive()*

public synchronized boolean isActive()

Tests whether the monitor MBean is active. A monitor MBean is marked active when the start(|javax.management.monitor.Monitor|) 
method is called. It becomes inactive when the stop(|javax.management.monitor.Monitor|) method is called. 



    Returns: true if the monitor MBean is active, false otherwise. 

*javax.management.monitor.Monitor.postDeregister()*

public void postDeregister()

Allows the monitor MBean to perform any operations needed after having been unregistered by the MBean server. 

Not used in this context. 



*javax.management.monitor.Monitor.postRegister(Boolean)*

public void postRegister(java.lang.Boolean registrationDone)

Allows the monitor MBean to perform any operations needed after having been registered in the MBean server or after the 
registration has failed. 

Not used in this context. 



*javax.management.monitor.Monitor.preDeregister()*

public void preDeregister()
  throws |java.lang.Exception|
         
Allows the monitor MBean to perform any operations it needs before being unregistered by the MBean server. 

Stops the monitor. 



*javax.management.monitor.Monitor.preRegister(MBeanServer,ObjectName)*

public |javax.management.ObjectName| preRegister(
  javax.management.MBeanServer server,
  javax.management.ObjectName name)
  throws |java.lang.Exception|
         
Allows the monitor MBean to perform any operations it needs before being registered in the MBean server. 

Initializes the reference to the MBean server. 


    server - The MBean server in which the monitor MBean will be registered. 
    name - The object name of the monitor MBean. 

    Returns: The name of the monitor MBean registered. 

*javax.management.monitor.Monitor.removeObservedObject(ObjectName)*

public synchronized void removeObservedObject(javax.management.ObjectName object)

Removes the specified object from the set of observed MBeans. 


    object - The object to remove. 

*javax.management.monitor.Monitor.setGranularityPeriod(long)*

public synchronized void setGranularityPeriod(long period)
  throws |java.lang.IllegalArgumentException|
         
Sets the granularity period (in milliseconds). The default value of the granularity period is 10 seconds. 


    period - The granularity period value. 

*javax.management.monitor.Monitor.setObservedAttribute(String)*

public void setObservedAttribute(java.lang.String attribute)
  throws |java.lang.IllegalArgumentException|
         
Sets the attribute to observe. The observed attribute is not initialized by default (set to null). 


    attribute - The attribute to observe. 

*javax.management.monitor.Monitor.setObservedObject(ObjectName)*

public synchronized void setObservedObject(javax.management.ObjectName object)
  throws |java.lang.IllegalArgumentException|
         
Removes all objects from the set of observed objects, and then adds the specified object. 

    Deprecated: As of JMX 1.2, replaced by {@link #addObservedObject}

    object - The object to observe. 

*javax.management.monitor.Monitor.start()*

public abstract void start()

Starts the monitor. 



*javax.management.monitor.Monitor.stop()*

public abstract void stop()

Stops the monitor. 




