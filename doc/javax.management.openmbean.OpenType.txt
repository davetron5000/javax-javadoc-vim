*javax.management.openmbean.OpenType* *OpenType* The OpenType class is the parent abstract class of all classes which describe t

public abstract class OpenType<T>
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.management.openmbean.OpenType_Description|
|javax.management.openmbean.OpenType_Fields|
|javax.management.openmbean.OpenType_Constructors|
|javax.management.openmbean.OpenType_Methods|

================================================================================================================================

*javax.management.openmbean.OpenType_Fields*
|java.lang.String[]_javax.management.openmbean.OpenType.ALLOWED_CLASSNAMES|
|java.util.List<java.lang.String>_javax.management.openmbean.OpenType.ALLOWED_CLASSNAMES_LIST|

*javax.management.openmbean.OpenType_Constructors*
|javax.management.openmbean.OpenType(String,String,String)|Constructs an OpenType instance (actually a subclass instance as Ope

*javax.management.openmbean.OpenType_Methods*
|javax.management.openmbean.OpenType.equals(Object)|Compares the specified obj parameter with this  open type instance for equa
|javax.management.openmbean.OpenType.getClassName()|Returns the fully qualified Java class name of the open data values  this o
|javax.management.openmbean.OpenType.getDescription()|Returns the text description of this OpenType instance.
|javax.management.openmbean.OpenType.getTypeName()|Returns the name of this OpenType instance.
|javax.management.openmbean.OpenType.hashCode()|
|javax.management.openmbean.OpenType.isArray()|Returns true if the open data values this open  type describes are arrays, false
|javax.management.openmbean.OpenType.isValue(Object)|Tests whether obj is a value for this open type.
|javax.management.openmbean.OpenType.toString()|Returns a string representation of this open type instance.

*javax.management.openmbean.OpenType_Description*

The OpenType class is the parent abstract class of all classes which describe the actual open type of open data values. 

An open type is defined by: 

the fully qualified Java class name of the open data values this type describes; note that only a limited set of Java classes 
is allowed for open data values (see ALLOWED_CLASSNAMES_LIST(|javax.management.openmbean.OpenType|) ), its name, its 
description. 



*java.lang.String[]_javax.management.openmbean.OpenType.ALLOWED_CLASSNAMES*




*java.util.List<java.lang.String>_javax.management.openmbean.OpenType.ALLOWED_CLASSNAMES_LIST*

List of the fully qualified names of the Java classes allowed for open data values. A multidimensional array of any one of 
these classes or their corresponding primitive types is also an allowed class for open data values. 

ALLOWED_CLASSNAMES_LIST = { "java.lang.Void", "java.lang.Boolean", "java.lang.Character", "java.lang.Byte", "java.lang.Short", 
"java.lang.Integer", "java.lang.Long", "java.lang.Float", "java.lang.Double", "java.lang.String", "java.math.BigDecimal", 
"java.math.BigInteger", "java.util.Date", "javax.management.ObjectName", CompositeData.class.getName(), 
TabularData.class.getName() } ; 



*javax.management.openmbean.OpenType(String,String,String)*

protected OpenType(
  java.lang.String className,
  java.lang.String typeName,
  java.lang.String description)
  throws |javax.management.openmbean.OpenDataException|
         
Constructs an OpenType instance (actually a subclass instance as OpenType is abstract), checking for the validity of the given 
parameters. The validity constraints are described below for each parameter. 

    className - The fully qualified Java class name of the open data values this open type describes. The valid Java class names allowed for 
       open data values are listed in {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}. A multidimensional array of any 
       one of these classes or their corresponding primitive types is also an allowed class, in which case the class name 
       follows the rules defined by the method {@link Class#getName() getName()} of java.lang.Class. For example, a 
       3-dimensional array of Strings has for class name [[[Ljava.lang.String; (without the quotes). 
    typeName - The name given to the open type this instance represents; cannot be a null or empty string. 
    description - The human readable description of the open type this instance represents; cannot be a null or empty string. 

*javax.management.openmbean.OpenType.equals(Object)*

public abstract boolean equals(java.lang.Object obj)

Compares the specified obj parameter with this open type instance for equality. 


    obj - the object to compare to. 

    Returns: true if this object and obj are equal. 

*javax.management.openmbean.OpenType.getClassName()*

public |java.lang.String| getClassName()

Returns the fully qualified Java class name of the open data values this open type describes. The only possible Java class 
names for open data values are listed in ALLOWED_CLASSNAMES_LIST(|javax.management.openmbean.OpenType|) . A multidimensional 
array of any one of these classes or their corresponding primitive types is also an allowed class, in which case the class name 
follows the rules defined by the method getName()(|java.lang.Class|) of java.lang.Class. For example, a 3-dimensional array of 
Strings has for class name [[[Ljava.lang.String; (without the quotes), a 3-dimensional array of Integers has for class name 
[[[Ljava.lang.Integer; (without the quotes), and a 3-dimensional array of int has for class name [[[I (without the quotes) 



    Returns: the class name. 

*javax.management.openmbean.OpenType.getDescription()*

public |java.lang.String| getDescription()

Returns the text description of this OpenType instance. 



    Returns: the description. 

*javax.management.openmbean.OpenType.getTypeName()*

public |java.lang.String| getTypeName()

Returns the name of this OpenType instance. 



    Returns: the type name. 

*javax.management.openmbean.OpenType.hashCode()*

public abstract int hashCode()





*javax.management.openmbean.OpenType.isArray()*

public boolean isArray()

Returns true if the open data values this open type describes are arrays, false otherwise. 



    Returns: true if this is an array type. 

*javax.management.openmbean.OpenType.isValue(Object)*

public abstract boolean isValue(java.lang.Object obj)

Tests whether obj is a value for this open type. 


    obj - the object to be tested for validity. 

    Returns: true if obj is a value for this open type, false otherwise. 

*javax.management.openmbean.OpenType.toString()*

public abstract |java.lang.String| toString()

Returns a string representation of this open type instance. 



    Returns: the string representation. 


