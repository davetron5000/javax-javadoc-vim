*javax.management.relation.RelationService* *RelationService* The Relation Service is in charge of creating and deleting relatio

public class RelationService
  extends    |javax.management.NotificationBroadcasterSupport|
  implements |javax.management.relation.RelationServiceMBean|
             |javax.management.MBeanRegistration|
             |javax.management.NotificationListener|

|javax.management.relation.RelationService_Description|
|javax.management.relation.RelationService_Fields|
|javax.management.relation.RelationService_Constructors|
|javax.management.relation.RelationService_Methods|

================================================================================================================================

*javax.management.relation.RelationService_Constructors*
|javax.management.relation.RelationService(boolean)|Constructor.

*javax.management.relation.RelationService_Methods*
|javax.management.relation.RelationService.addRelation(ObjectName)|Adds an MBean created by the user (and registered by him in 
|javax.management.relation.RelationService.addRelationType(RelationType)|Adds given object as a relation type.
|javax.management.relation.RelationService.checkRoleReading(String,String)|Checks if given Role can be read in a relation of th
|javax.management.relation.RelationService.checkRoleWriting(Role,String,Boolean)|Checks if given Role can be set in a relation 
|javax.management.relation.RelationService.createRelation(String,String,RoleList)|Creates a simple relation (represented by a R
|javax.management.relation.RelationService.createRelationType(String,RoleInfo[])|Creates a relation type (a RelationTypeSupport
|javax.management.relation.RelationService.findAssociatedMBeans(ObjectName,String,String)|Retrieves the MBeans associated to gi
|javax.management.relation.RelationService.findReferencingRelations(ObjectName,String,String)|Retrieves the relations where a g
|javax.management.relation.RelationService.findRelationsOfType(String)|Returns the relation ids for relations of the given type
|javax.management.relation.RelationService.getAllRelationIds()|Returns all the relation ids for all the relations handled by th
|javax.management.relation.RelationService.getAllRelationTypeNames()|Retrieves names of all known relation types.
|javax.management.relation.RelationService.getAllRoles(String)|Returns all roles present in the relation.
|javax.management.relation.RelationService.getNotificationInfo()|Returns a NotificationInfo object containing the name of the J
|javax.management.relation.RelationService.getPurgeFlag()|Returns the flag to indicate if when a notification is received for t
|javax.management.relation.RelationService.getReferencedMBeans(String)|Retrieves MBeans referenced in the various roles of the 
|javax.management.relation.RelationService.getRelationTypeName(String)|Returns name of associated relation type for given relat
|javax.management.relation.RelationService.getRole(String,String)|Retrieves role value for given role name in given relation.
|javax.management.relation.RelationService.getRoleCardinality(String,String)|Retrieves the number of MBeans currently reference
|javax.management.relation.RelationService.getRoleInfo(String,String)|Retrieves role info for given role name of a given relati
|javax.management.relation.RelationService.getRoleInfos(String)|Retrieves list of role infos (RoleInfo objects) of a given rela
|javax.management.relation.RelationService.getRoles(String,String[])|Retrieves values of roles with given names in given relati
|javax.management.relation.RelationService.handleNotification(Notification,Object)|Invoked when a JMX notification occurs.
|javax.management.relation.RelationService.hasRelation(String)|Checks if there is a relation identified in Relation Service wit
|javax.management.relation.RelationService.isActive()|Checks if the Relation Service is active.
|javax.management.relation.RelationService.isRelation(ObjectName)|Returns the relation id associated to the given ObjectName if
|javax.management.relation.RelationService.isRelationMBean(String)|If the relation is represented by an MBean (created by the u
|javax.management.relation.RelationService.postDeregister()|
|javax.management.relation.RelationService.postRegister(Boolean)|
|javax.management.relation.RelationService.preDeregister()|
|javax.management.relation.RelationService.preRegister(MBeanServer,ObjectName)|
|javax.management.relation.RelationService.purgeRelations()|Purges the relations.
|javax.management.relation.RelationService.removeRelation(String)|Removes given relation from the Relation Service.
|javax.management.relation.RelationService.removeRelationType(String)|Removes given relation type from Relation Service.
|javax.management.relation.RelationService.sendRelationCreationNotification(String)|Sends a notification (RelationNotification)
|javax.management.relation.RelationService.sendRelationRemovalNotification(String,List<ObjectName>)|Sends a notification (Relat
|javax.management.relation.RelationService.sendRoleUpdateNotification(String,Role,List<ObjectName>)|Sends a notification (Relat
|javax.management.relation.RelationService.setPurgeFlag(boolean)|Sets the flag to indicate if when a notification is received f
|javax.management.relation.RelationService.setRole(String,Role)|Sets the given role in given relation.
|javax.management.relation.RelationService.setRoles(String,RoleList)|Sets the given roles in given relation.
|javax.management.relation.RelationService.updateRoleMap(String,Role,List<ObjectName>)|Handles update of the Relation Service r

*javax.management.relation.RelationService_Description*

The Relation Service is in charge of creating and deleting relation types and relations, of handling the consistency and of 
providing query mechanisms. It implements the NotificationBroadcaster by extending NotificationBroadcasterSupport to send 
notifications when a relation is removed from it. It implements the NotificationListener interface to be able to receive 
notifications concerning unregistration of MBeans referenced in relation roles and of relation MBeans. It implements the 
MBeanRegistration interface to be able to retrieve its ObjectName and MBean Server. 



*javax.management.relation.RelationService(boolean)*

public RelationService(boolean immediatePurgeFlag)

Constructor. 

    immediatePurgeFlag - flag to indicate when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate 
       "purge" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed 
       only when the purgeRelations method will be explicitly called. true is immediate purge. 

*javax.management.relation.RelationService.addRelation(ObjectName)*

public void addRelation(javax.management.ObjectName relationObjectName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.InstanceNotFoundException|
         |javax.management.relation.InvalidRelationIdException|
         |javax.management.relation.InvalidRelationServiceException|
         |javax.management.relation.InvalidRoleValueException|
         |java.lang.NoSuchMethodException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         |javax.management.relation.RelationTypeNotFoundException|
         |javax.management.relation.RoleNotFoundException|
         
Adds an MBean created by the user (and registered by him in the MBean Server) as a relation in the Relation Service. To be 
added as a relation, the MBean must conform to the following: - implement the Relation interface - have for RelationService 
ObjectName the ObjectName of current Relation Service - have a relation id unique and unused in current Relation Service - have 
for relation type a relation type created in the Relation Service - have roles conforming to the role info provided in the 
relation type. 


    relationObjectName - ObjectName of the relation MBean to be added. 

*javax.management.relation.RelationService.addRelationType(RelationType)*

public void addRelationType(javax.management.relation.RelationType relationTypeObj)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRelationTypeException|
         
Adds given object as a relation type. The object is expected to implement the RelationType interface. 


    relationTypeObj - relation type object (implementing the RelationType interface) 

*javax.management.relation.RelationService.checkRoleReading(String,String)*

public |java.lang.Integer| checkRoleReading(
  java.lang.String roleName,
  java.lang.String relationTypeName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationTypeNotFoundException|
         
Checks if given Role can be read in a relation of the given type. 


    roleName - name of role to be checked 
    relationTypeName - name of the relation type 

    Returns: an Integer wrapping an integer corresponding to possible problems represented as constants in RoleUnresolved: - 0 if role can 
             be read - integer corresponding to RoleStatus.NO_ROLE_WITH_NAME - integer corresponding to 
             RoleStatus.ROLE_NOT_READABLE 

*javax.management.relation.RelationService.checkRoleWriting(Role,String,Boolean)*

public |java.lang.Integer| checkRoleWriting(
  javax.management.relation.Role role,
  java.lang.String relationTypeName,
  java.lang.Boolean initFlag)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationTypeNotFoundException|
         
Checks if given Role can be set in a relation of given type. 


    role - role to be checked 
    relationTypeName - name of relation type 
    initFlag - flag to specify that the checking is done for the initialization of a role, write access shall not be verified. 

    Returns: an Integer wrapping an integer corresponding to possible problems represented as constants in RoleUnresolved: - 0 if role can 
             be set - integer corresponding to RoleStatus.NO_ROLE_WITH_NAME - integer for RoleStatus.ROLE_NOT_WRITABLE - 
             integer for RoleStatus.LESS_THAN_MIN_ROLE_DEGREE - integer for RoleStatus.MORE_THAN_MAX_ROLE_DEGREE - integer for 
             RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS - integer for RoleStatus.REF_MBEAN_NOT_REGISTERED 

*javax.management.relation.RelationService.createRelation(String,String,RoleList)*

public void createRelation(
  java.lang.String relationId,
  java.lang.String relationTypeName,
  javax.management.relation.RoleList roleList)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRelationIdException|
         |javax.management.relation.InvalidRoleValueException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         |javax.management.relation.RelationTypeNotFoundException|
         |javax.management.relation.RoleNotFoundException|
         
Creates a simple relation (represented by a RelationSupport object) of given relation type, and adds it in the Relation 
Service. Roles are initialized according to the role list provided in parameter. The ones not initialized in this way are set 
to an empty ArrayList of ObjectNames. A RelationNotification, with type RELATION_BASIC_CREATION, is sent. 


    relationId - relation identifier, to identify uniquely the relation inside the Relation Service 
    relationTypeName - name of the relation type (has to be created in the Relation Service) 
    roleList - role list to initialize roles of the relation (can be null). 

*javax.management.relation.RelationService.createRelationType(String,RoleInfo[])*

public void createRelationType(
  java.lang.String relationTypeName,
  javax.management.relation.RoleInfo[] roleInfoArray)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRelationTypeException|
         
Creates a relation type (a RelationTypeSupport object) with given role infos (provided by the RoleInfo objects), and adds it in 
the Relation Service. 


    relationTypeName - name of the relation type 
    roleInfoArray - array of role infos 

*javax.management.relation.RelationService.findAssociatedMBeans(ObjectName,String,String)*

public |java.util.Map|<ObjectName,List<String>> findAssociatedMBeans(
  javax.management.ObjectName mbeanName,
  java.lang.String relationTypeName,
  java.lang.String roleName)
  throws |java.lang.IllegalArgumentException|
         
Retrieves the MBeans associated to given one in a relation. This corresponds to CIM Associators and AssociatorNames operations. 


    mbeanName - ObjectName of MBean 
    relationTypeName - can be null; if specified, only the relations of that type will be considered in the search. Else all relation types are 
       considered. 
    roleName - can be null; if specified, only the relations where the MBean is referenced in that role will be considered. Else all roles are 
       considered. 

    Returns: an HashMap, where the keys are the ObjectNames of the MBeans associated to given MBean, and the value is, for each key, an 
             ArrayList of the relation ids of the relations where the key MBean is associated to given one (as they can be 
             associated in several different relations). 

*javax.management.relation.RelationService.findReferencingRelations(ObjectName,String,String)*

public |java.util.Map|<String,List<String>> findReferencingRelations(
  javax.management.ObjectName mbeanName,
  java.lang.String relationTypeName,
  java.lang.String roleName)
  throws |java.lang.IllegalArgumentException|
         
Retrieves the relations where a given MBean is referenced. This corresponds to the CIM "References" and "ReferenceNames" 
operations. 


    mbeanName - ObjectName of MBean 
    relationTypeName - can be null; if specified, only the relations of that type will be considered in the search. Else all relation types are 
       considered. 
    roleName - can be null; if specified, only the relations where the MBean is referenced in that role will be returned. Else all roles are 
       considered. 

    Returns: an HashMap, where the keys are the relation ids of the relations where the MBean is referenced, and the value is, for each key, 
             an ArrayList of role names (as an MBean can be referenced in several roles in the same relation). 

*javax.management.relation.RelationService.findRelationsOfType(String)*

public |java.util.List|<String> findRelationsOfType(java.lang.String relationTypeName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationTypeNotFoundException|
         
Returns the relation ids for relations of the given type. 


    relationTypeName - relation type name 

    Returns: an ArrayList of relation ids. 

*javax.management.relation.RelationService.getAllRelationIds()*

public |java.util.List|<String> getAllRelationIds()

Returns all the relation ids for all the relations handled by the Relation Service. 



    Returns: ArrayList of String 

*javax.management.relation.RelationService.getAllRelationTypeNames()*

public |java.util.List|<String> getAllRelationTypeNames()

Retrieves names of all known relation types. 



    Returns: ArrayList of relation type names (Strings) 

*javax.management.relation.RelationService.getAllRoles(String)*

public |javax.management.relation.RoleResult| getAllRoles(java.lang.String relationId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         
Returns all roles present in the relation. 


    relationId - relation id 

    Returns: a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not readable). 

*javax.management.relation.RelationService.getNotificationInfo()*

public |javax.management.MBeanNotificationInfo|[] getNotificationInfo()

Returns a NotificationInfo object containing the name of the Java class of the notification and the notification types sent. 



*javax.management.relation.RelationService.getPurgeFlag()*

public boolean getPurgeFlag()

Returns the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if 
an immediate "purge" of the relations (look for the relations no longer valid) has to be performed , or if that will be 
performed only when the purgeRelations method will be explicitly called. true is immediate purge. 



    Returns: true if purges are automatic. 

*javax.management.relation.RelationService.getReferencedMBeans(String)*

public |java.util.Map|<ObjectName,List<String>> getReferencedMBeans(java.lang.String relationId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
Retrieves MBeans referenced in the various roles of the relation. 


    relationId - relation id 

    Returns: a HashMap mapping: ObjectName -> ArrayList of String (role names) 

*javax.management.relation.RelationService.getRelationTypeName(String)*

public |java.lang.String| getRelationTypeName(java.lang.String relationId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
Returns name of associated relation type for given relation. 


    relationId - relation id 

    Returns: the name of the associated relation type. 

*javax.management.relation.RelationService.getRole(String,String)*

public |java.util.List|<ObjectName> getRole(
  java.lang.String relationId,
  java.lang.String roleName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         |javax.management.relation.RoleNotFoundException|
         
Retrieves role value for given role name in given relation. 


    relationId - relation id 
    roleName - name of role 

    Returns: the ArrayList of ObjectName objects being the role value 

*javax.management.relation.RelationService.getRoleCardinality(String,String)*

public |java.lang.Integer| getRoleCardinality(
  java.lang.String relationId,
  java.lang.String roleName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RoleNotFoundException|
         
Retrieves the number of MBeans currently referenced in the given role. 


    relationId - relation id 
    roleName - name of role 

    Returns: the number of currently referenced MBeans in that role 

*javax.management.relation.RelationService.getRoleInfo(String,String)*

public |javax.management.relation.RoleInfo| getRoleInfo(
  java.lang.String relationTypeName,
  java.lang.String roleInfoName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationTypeNotFoundException|
         |javax.management.relation.RoleInfoNotFoundException|
         
Retrieves role info for given role name of a given relation type. 


    relationTypeName - name of relation type 
    roleInfoName - name of role 

    Returns: RoleInfo object. 

*javax.management.relation.RelationService.getRoleInfos(String)*

public |java.util.List|<RoleInfo> getRoleInfos(java.lang.String relationTypeName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationTypeNotFoundException|
         
Retrieves list of role infos (RoleInfo objects) of a given relation type. 


    relationTypeName - name of relation type 

    Returns: ArrayList of RoleInfo. 

*javax.management.relation.RelationService.getRoles(String,String[])*

public |javax.management.relation.RoleResult| getRoles(
  java.lang.String relationId,
  java.lang.String[] roleNameArray)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         
Retrieves values of roles with given names in given relation. 


    relationId - relation id 
    roleNameArray - array of names of roles to be retrieved 

    Returns: a RoleResult object, including a RoleList (for roles successfully retrieved) and a RoleUnresolvedList (for roles not 
             retrieved). 

*javax.management.relation.RelationService.handleNotification(Notification,Object)*

public void handleNotification(
  javax.management.Notification notif,
  java.lang.Object handback)

Invoked when a JMX notification occurs. Currently handles notifications for unregistration of MBeans, either referenced in a 
relation role or being a relation itself. 


    notif - The notification. 
    handback - An opaque object which helps the listener to associate information regarding the MBean emitter (can be null). 

*javax.management.relation.RelationService.hasRelation(String)*

public |java.lang.Boolean| hasRelation(java.lang.String relationId)
  throws |java.lang.IllegalArgumentException|
         
Checks if there is a relation identified in Relation Service with given relation id. 


    relationId - relation id identifying the relation 

    Returns: boolean: true if there is a relation, false else 

*javax.management.relation.RelationService.isActive()*

public void isActive()
  throws |javax.management.relation.RelationServiceNotRegisteredException|
         
Checks if the Relation Service is active. Current condition is that the Relation Service must be registered in the MBean Server 



*javax.management.relation.RelationService.isRelation(ObjectName)*

public |java.lang.String| isRelation(javax.management.ObjectName objectName)
  throws |java.lang.IllegalArgumentException|
         
Returns the relation id associated to the given ObjectName if the MBean has been added as a relation in the Relation Service. 


    objectName - ObjectName of supposed relation 

    Returns: relation id (String) or null (if the ObjectName is not a relation handled by the Relation Service) 

*javax.management.relation.RelationService.isRelationMBean(String)*

public |javax.management.ObjectName| isRelationMBean(java.lang.String relationId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
If the relation is represented by an MBean (created by the user and added as a relation in the Relation Service), returns the 
ObjectName of the MBean. 


    relationId - relation id identifying the relation 

    Returns: ObjectName of the corresponding relation MBean, or null if the relation is not an MBean. 

*javax.management.relation.RelationService.postDeregister()*

public void postDeregister()





*javax.management.relation.RelationService.postRegister(Boolean)*

public void postRegister(java.lang.Boolean registrationDone)





*javax.management.relation.RelationService.preDeregister()*

public void preDeregister()
  throws |java.lang.Exception|
         




*javax.management.relation.RelationService.preRegister(MBeanServer,ObjectName)*

public |javax.management.ObjectName| preRegister(
  javax.management.MBeanServer server,
  javax.management.ObjectName name)
  throws |java.lang.Exception|
         




*javax.management.relation.RelationService.purgeRelations()*

public void purgeRelations()
  throws |javax.management.relation.RelationServiceNotRegisteredException|
         
Purges the relations. 

Depending on the purgeFlag value, this method is either called automatically when a notification is received for the 
unregistration of an MBean referenced in a relation (if the flag is set to true), or not (if the flag is set to false). In that 
case it is up to the user to call it to maintain the consistency of the relations. To be kept in mind that if an MBean is 
unregistered and the purge not done immediately, if the ObjectName is reused and assigned to another MBean referenced in a 
relation, calling manually this purgeRelations() method will cause trouble, as will consider the ObjectName as corresponding to 
the unregistered MBean, not seeing the new one. 

The behavior depends on the cardinality of the role where the unregistered MBean is referenced: - if removing one MBean 
reference in the role makes its number of references less than the minimum degree, the relation has to be removed. - if the 
remaining number of references after removing the MBean reference is still in the cardinality range, keep the relation and 
update it calling its handleMBeanUnregistration() callback. 



*javax.management.relation.RelationService.removeRelation(String)*

public void removeRelation(java.lang.String relationId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         
Removes given relation from the Relation Service. A RelationNotification notification is sent, its type being: - 
RelationNotification.RELATION_BASIC_REMOVAL if the relation was only internal to the Relation Service - 
RelationNotification.RELATION_MBEAN_REMOVAL if the relation is registered as an MBean. For MBeans referenced in such relation, 
nothing will be done, 


    relationId - relation id of the relation to be removed 

*javax.management.relation.RelationService.removeRelationType(String)*

public void removeRelationType(java.lang.String relationTypeName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         |javax.management.relation.RelationTypeNotFoundException|
         
Removes given relation type from Relation Service. The relation objects of that type will be removed from the Relation Service. 


    relationTypeName - name of the relation type to be removed 

*javax.management.relation.RelationService.sendRelationCreationNotification(String)*

public void sendRelationCreationNotification(java.lang.String relationId)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
Sends a notification (RelationNotification) for a relation creation. The notification type is: - 
RelationNotification.RELATION_BASIC_CREATION if the relation is an object internal to the Relation Service - 
RelationNotification.RELATION_MBEAN_CREATION if the relation is a MBean added as a relation. The source object is the Relation 
Service itself. It is called in Relation Service createRelation() and addRelation() methods. 


    relationId - relation identifier of the updated relation 

*javax.management.relation.RelationService.sendRelationRemovalNotification(String,List<ObjectName>)*

public void sendRelationRemovalNotification(
  java.lang.String relationId,
  java.util.List<javax.management.ObjectName> unregMBeanList)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
Sends a notification (RelationNotification) for a relation removal. The notification type is: - 
RelationNotification.RELATION_BASIC_REMOVAL if the relation is an object internal to the Relation Service - 
RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a MBean added as a relation. The source object is the Relation 
Service itself. It is called in Relation Service removeRelation() method. 


    relationId - relation identifier of the updated relation 
    unregMBeanList - List of ObjectNames of MBeans expected to be unregistered due to relation removal (can be null) 

*javax.management.relation.RelationService.sendRoleUpdateNotification(String,Role,List<ObjectName>)*

public void sendRoleUpdateNotification(
  java.lang.String relationId,
  javax.management.relation.Role newRole,
  java.util.List<javax.management.ObjectName> oldValue)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         
Sends a notification (RelationNotification) for a role update in the given relation. The notification type is: - 
RelationNotification.RELATION_BASIC_UPDATE if the relation is an object internal to the Relation Service - 
RelationNotification.RELATION_MBEAN_UPDATE if the relation is a MBean added as a relation. The source object is the Relation 
Service itself. It is called in relation MBean setRole() (for given role) and setRoles() (for each role) methods 
(implementation provided in RelationSupport class). It is also called in Relation Service setRole() (for given role) and 
setRoles() (for each role) methods. 


    relationId - relation identifier of the updated relation 
    newRole - new role (name and new value) 
    oldValue - old role value (List of ObjectName objects) 

*javax.management.relation.RelationService.setPurgeFlag(boolean)*

public void setPurgeFlag(boolean purgeFlag)

Sets the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an 
immediate "purge" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed 
only when the purgeRelations method will be explicitly called. true is immediate purge. 


    purgeFlag - 

*javax.management.relation.RelationService.setRole(String,Role)*

public void setRole(
  java.lang.String relationId,
  javax.management.relation.Role role)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRoleValueException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         |javax.management.relation.RoleNotFoundException|
         
Sets the given role in given relation. Will check the role according to its corresponding role definition provided in 
relation's relation type The Relation Service will keep track of the change to keep the consistency of relations by handling 
referenced MBean unregistrations. 


    relationId - relation id 
    role - role to be set (name and new value) 

*javax.management.relation.RelationService.setRoles(String,RoleList)*

public |javax.management.relation.RoleResult| setRoles(
  java.lang.String relationId,
  javax.management.relation.RoleList roleList)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         
Sets the given roles in given relation. Will check the role according to its corresponding role definition provided in 
relation's relation type The Relation Service keeps track of the changes to keep the consistency of relations by handling 
referenced MBean unregistrations. 


    relationId - relation id 
    roleList - list of roles to be set 

    Returns: a RoleResult object, including a RoleList (for roles successfully set) and a RoleUnresolvedList (for roles not set). 

*javax.management.relation.RelationService.updateRoleMap(String,Role,List<ObjectName>)*

public void updateRoleMap(
  java.lang.String relationId,
  javax.management.relation.Role newRole,
  java.util.List<javax.management.ObjectName> oldValue)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RelationNotFoundException|
         |javax.management.relation.RelationServiceNotRegisteredException|
         
Handles update of the Relation Service role map for the update of given role in given relation. It is called in relation MBean 
setRole() (for given role) and setRoles() (for each role) methods (implementation provided in RelationSupport class). It is 
also called in Relation Service setRole() (for given role) and setRoles() (for each role) methods. To allow the Relation 
Service to maintain the consistency (in case of MBean unregistration) and to be able to perform queries, this method must be 
called when a role is updated. 


    relationId - relation identifier of the updated relation 
    newRole - new role (name and new value) 
    oldValue - old role value (List of ObjectName objects) 


