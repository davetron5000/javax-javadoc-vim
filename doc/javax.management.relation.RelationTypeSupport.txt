*javax.management.relation.RelationTypeSupport* *RelationTypeSupport* A RelationTypeSupport object implements the RelationType i

public class RelationTypeSupport
  extends    |java.lang.Object|
  implements |javax.management.relation.RelationType|

|javax.management.relation.RelationTypeSupport_Description|
|javax.management.relation.RelationTypeSupport_Fields|
|javax.management.relation.RelationTypeSupport_Constructors|
|javax.management.relation.RelationTypeSupport_Methods|

================================================================================================================================

*javax.management.relation.RelationTypeSupport_Constructors*
|javax.management.relation.RelationTypeSupport(String)|Constructor to be used for subclasses.
|javax.management.relation.RelationTypeSupport(String,RoleInfo[])|Constructor where all role definitions are dynamically create

*javax.management.relation.RelationTypeSupport_Methods*
|javax.management.relation.RelationTypeSupport.addRoleInfo(RoleInfo)|Add a role info.
|javax.management.relation.RelationTypeSupport.getRelationTypeName()|Returns the relation type name.
|javax.management.relation.RelationTypeSupport.getRoleInfo(String)|Returns the role info (RoleInfo object) for the given role i
|javax.management.relation.RelationTypeSupport.getRoleInfos()|Returns the list of role definitions (ArrayList of RoleInfo objec

*javax.management.relation.RelationTypeSupport_Description*

A RelationTypeSupport object implements the RelationType interface. It represents a relation type, providing role information 
for each role expected to be supported in every relation of that type. 

A relation type includes a relation type name and a list of role infos (represented by RoleInfo objects). 

A relation type has to be declared in the Relation Service: - either using the createRelationType() method, where a 
RelationTypeSupport object will be created and kept in the Relation Service - either using the addRelationType() method where 
the user has to create an object implementing the RelationType interface, and this object will be used as representing a 
relation type in the Relation Service. 

The serialVersionUID of this class is 4611072955724144607L. 



*javax.management.relation.RelationTypeSupport(String)*

protected RelationTypeSupport(java.lang.String relationTypeName)

Constructor to be used for subclasses. 

    relationTypeName - Name of relation type. 

*javax.management.relation.RelationTypeSupport(String,RoleInfo[])*

public RelationTypeSupport(
  java.lang.String relationTypeName,
  javax.management.relation.RoleInfo[] roleInfoArray)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRelationTypeException|
         
Constructor where all role definitions are dynamically created and passed as parameter. 

    relationTypeName - Name of relation type 
    roleInfoArray - List of role definitions (RoleInfo objects) 

*javax.management.relation.RelationTypeSupport.addRoleInfo(RoleInfo)*

protected void addRoleInfo(javax.management.relation.RoleInfo roleInfo)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.InvalidRelationTypeException|
         
Add a role info. This method of course should not be used after the creation of the relation type, because updating it would 
invalidate that the relations created associated to that type still conform to it. Can throw a RuntimeException if trying to 
update a relation type declared in the Relation Service. 


    roleInfo - role info to be added. 

*javax.management.relation.RelationTypeSupport.getRelationTypeName()*

public |java.lang.String| getRelationTypeName()

Returns the relation type name. 



    Returns: the relation type name. 

*javax.management.relation.RelationTypeSupport.getRoleInfo(String)*

public |javax.management.relation.RoleInfo| getRoleInfo(java.lang.String roleInfoName)
  throws |java.lang.IllegalArgumentException|
         |javax.management.relation.RoleInfoNotFoundException|
         
Returns the role info (RoleInfo object) for the given role info name (null if not found). 


    roleInfoName - role info name 

    Returns: RoleInfo object providing role definition does not exist 

*javax.management.relation.RelationTypeSupport.getRoleInfos()*

public |java.util.List|<RoleInfo> getRoleInfos()

Returns the list of role definitions (ArrayList of RoleInfo objects). 




