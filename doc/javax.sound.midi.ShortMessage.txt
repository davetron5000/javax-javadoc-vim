*javax.sound.midi.ShortMessage* *ShortMessage* A ShortMessage contains a MIDI message that has at most
 two data bytes following

public class ShortMessage
  extends    |javax.sound.midi.MidiMessage|

|javax.sound.midi.ShortMessage_Description|
|javax.sound.midi.ShortMessage_Fields|
|javax.sound.midi.ShortMessage_Constructors|
|javax.sound.midi.ShortMessage_Methods|

================================================================================================================================

*javax.sound.midi.ShortMessage_Fields*
|int_javax.sound.midi.ShortMessage.ACTIVE_SENSING|
|int_javax.sound.midi.ShortMessage.CHANNEL_PRESSURE|
|int_javax.sound.midi.ShortMessage.CONTINUE|
|int_javax.sound.midi.ShortMessage.CONTROL_CHANGE|
|int_javax.sound.midi.ShortMessage.END_OF_EXCLUSIVE|
|int_javax.sound.midi.ShortMessage.MIDI_TIME_CODE|
|int_javax.sound.midi.ShortMessage.NOTE_OFF|
|int_javax.sound.midi.ShortMessage.NOTE_ON|
|int_javax.sound.midi.ShortMessage.PITCH_BEND|
|int_javax.sound.midi.ShortMessage.POLY_PRESSURE|
|int_javax.sound.midi.ShortMessage.PROGRAM_CHANGE|
|int_javax.sound.midi.ShortMessage.SONG_POSITION_POINTER|
|int_javax.sound.midi.ShortMessage.SONG_SELECT|
|int_javax.sound.midi.ShortMessage.START|
|int_javax.sound.midi.ShortMessage.STOP|
|int_javax.sound.midi.ShortMessage.SYSTEM_RESET|
|int_javax.sound.midi.ShortMessage.TIMING_CLOCK|
|int_javax.sound.midi.ShortMessage.TUNE_REQUEST|

*javax.sound.midi.ShortMessage_Constructors*
|javax.sound.midi.ShortMessage()|Constructs a new ShortMessage.
|javax.sound.midi.ShortMessage(byte[])|Constructs a new ShortMessage.

*javax.sound.midi.ShortMessage_Methods*
|javax.sound.midi.ShortMessage.clone()|Creates a new object of the same class and with the same contents  as this object.
|javax.sound.midi.ShortMessage.getChannel()|Obtains the MIDI channel associated with this event.
|javax.sound.midi.ShortMessage.getCommand()|Obtains the MIDI command associated with this event.
|javax.sound.midi.ShortMessage.getData1()|Obtains the first data byte in the message.
|javax.sound.midi.ShortMessage.getData2()|Obtains the second data byte in the message.
|javax.sound.midi.ShortMessage.getDataLength(int)|Retrieves the number of data bytes associated with a particular  status byte 
|javax.sound.midi.ShortMessage.setMessage(int)|Sets the parameters for a MIDI message that takes no data bytes.
|javax.sound.midi.ShortMessage.setMessage(int,int,int)|Sets the  parameters for a MIDI message that takes one or two data  byte
|javax.sound.midi.ShortMessage.setMessage(int,int,int,int)|Sets the short message parameters for a  channel message  which take

*javax.sound.midi.ShortMessage_Description*

A ShortMessage contains a MIDI message that has at most two data bytes following its status byte. The types of MIDI message 
that satisfy this criterion are channel voice, channel mode, system common, and system real-time--in other words, everything 
except system exclusive and meta-events. The ShortMessage class provides methods for getting and setting the contents of the 
MIDI message. 

A number of ShortMessage methods have integer parameters by which you specify a MIDI status or data byte. If you know the 
numeric value, you can express it directly. For system common and system real-time messages, you can often use the 
corresponding fields of ShortMessage, such as SYSTEM_RESET(|javax.sound.midi.ShortMessage|) . For channel messages, the upper 
four bits of the status byte are specified by a command value and the lower four bits are specified by a MIDI channel number. 
To convert incoming MIDI data bytes that are in the form of Java's signed bytes, you can use the conversion code given in the 
(|javax.sound.midi.MidiMessage|) class description. 



*int_javax.sound.midi.ShortMessage.ACTIVE_SENSING*

Status byte for Active Sensing message (0xFE, or 254). 


*int_javax.sound.midi.ShortMessage.CHANNEL_PRESSURE*

Command value for Channel Pressure (Aftertouch) message (0xD0, or 208) 


*int_javax.sound.midi.ShortMessage.CONTINUE*

Status byte for Continue message (0xFB, or 251). 


*int_javax.sound.midi.ShortMessage.CONTROL_CHANGE*

Command value for Control Change message (0xB0, or 176) 


*int_javax.sound.midi.ShortMessage.END_OF_EXCLUSIVE*

Status byte for End of System Exclusive message (0xF7, or 247). 


*int_javax.sound.midi.ShortMessage.MIDI_TIME_CODE*

Status byte for MIDI Time Code Quarter Frame message (0xF1, or 241). 


*int_javax.sound.midi.ShortMessage.NOTE_OFF*

Command value for Note Off message (0x80, or 128) 


*int_javax.sound.midi.ShortMessage.NOTE_ON*

Command value for Note On message (0x90, or 144) 


*int_javax.sound.midi.ShortMessage.PITCH_BEND*

Command value for Pitch Bend message (0xE0, or 224) 


*int_javax.sound.midi.ShortMessage.POLY_PRESSURE*

Command value for Polyphonic Key Pressure (Aftertouch) message (0xA0, or 160) 


*int_javax.sound.midi.ShortMessage.PROGRAM_CHANGE*

Command value for Program Change message (0xC0, or 192) 


*int_javax.sound.midi.ShortMessage.SONG_POSITION_POINTER*

Status byte for Song Position Pointer message (0xF2, or 242). 


*int_javax.sound.midi.ShortMessage.SONG_SELECT*

Status byte for MIDI Song Select message (0xF3, or 243). 


*int_javax.sound.midi.ShortMessage.START*

Status byte for Start message (0xFA, or 250). 


*int_javax.sound.midi.ShortMessage.STOP*

Status byte for Stop message (0xFC, or 252). 


*int_javax.sound.midi.ShortMessage.SYSTEM_RESET*

Status byte for System Reset message (0xFF, or 255). 


*int_javax.sound.midi.ShortMessage.TIMING_CLOCK*

Status byte for Timing Clock messagem (0xF8, or 248). 


*int_javax.sound.midi.ShortMessage.TUNE_REQUEST*

Status byte for Tune Request message (0xF6, or 246). 



*javax.sound.midi.ShortMessage()*

public ShortMessage()

Constructs a new ShortMessage. The contents of the new message are guaranteed to specify a valid MIDI message. Subsequently, 
you may set the contents of the message using one of the setMessage methods. 


*javax.sound.midi.ShortMessage(byte[])*

protected ShortMessage(byte[] data)

Constructs a new ShortMessage. 

    data - an array of bytes containing the complete message. The message data may be changed using the setMessage method. 

*javax.sound.midi.ShortMessage.clone()*

public |java.lang.Object| clone()

Creates a new object of the same class and with the same contents as this object. 



    Returns: a clone of this instance. 

*javax.sound.midi.ShortMessage.getChannel()*

public int getChannel()

Obtains the MIDI channel associated with this event. This method assumes that the event is a MIDI channel message; if not, the 
return value will not be meaningful. 



    Returns: MIDI channel associated with the message. 

*javax.sound.midi.ShortMessage.getCommand()*

public int getCommand()

Obtains the MIDI command associated with this event. This method assumes that the event is a MIDI channel message; if not, the 
return value will not be meaningful. 



*javax.sound.midi.ShortMessage.getData1()*

public int getData1()

Obtains the first data byte in the message. 



    Returns: the value of the data1 field 

*javax.sound.midi.ShortMessage.getData2()*

public int getData2()

Obtains the second data byte in the message. 



    Returns: the value of the data2 field 

*javax.sound.midi.ShortMessage.getDataLength(int)*

protected final int getDataLength(int status)
  throws |javax.sound.midi.InvalidMidiDataException|
         
Retrieves the number of data bytes associated with a particular status byte value. 


    status - status byte value, which must represent a short MIDI message 

    Returns: data length in bytes (0, 1, or 2) 

*javax.sound.midi.ShortMessage.setMessage(int)*

public void setMessage(int status)
  throws |javax.sound.midi.InvalidMidiDataException|
         
Sets the parameters for a MIDI message that takes no data bytes. 


    status - the MIDI status byte 

*javax.sound.midi.ShortMessage.setMessage(int,int,int)*

public void setMessage(
  int status,
  int data1,
  int data2)
  throws |javax.sound.midi.InvalidMidiDataException|
         
Sets the parameters for a MIDI message that takes one or two data bytes. If the message takes only one data byte, the second 
data byte is ignored; if the message does not take any data bytes, both data bytes are ignored. 


    status - the MIDI status byte 
    data1 - the first data byte 
    data2 - the second data byte 

*javax.sound.midi.ShortMessage.setMessage(int,int,int,int)*

public void setMessage(
  int command,
  int channel,
  int data1,
  int data2)
  throws |javax.sound.midi.InvalidMidiDataException|
         
Sets the short message parameters for a channel message which takes up to two data bytes. If the message only takes one data 
byte, the second data byte is ignored; if the message does not take any data bytes, both data bytes are ignored. 


    command - the MIDI command represented by this message 
    channel - the channel associated with the message 
    data1 - the first data byte 
    data2 - the second data byte 


