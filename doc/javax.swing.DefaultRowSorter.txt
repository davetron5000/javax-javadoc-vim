*javax.swing.DefaultRowSorter* *DefaultRowSorter* An implementation of RowSorter that provides sorting and
 filtering around a g

public abstract class DefaultRowSorter<M,I>
  extends    |javax.swing.RowSorter|

|javax.swing.DefaultRowSorter_Description|
|javax.swing.DefaultRowSorter_Fields|
|javax.swing.DefaultRowSorter_Constructors|
|javax.swing.DefaultRowSorter_Methods|

================================================================================================================================

*javax.swing.DefaultRowSorter_Constructors*
|javax.swing.DefaultRowSorter()|Creates an empty DefaultRowSorter.

*javax.swing.DefaultRowSorter_Methods*
|javax.swing.DefaultRowSorter.allRowsChanged()|
|javax.swing.DefaultRowSorter.convertRowIndexToModel(int)|
|javax.swing.DefaultRowSorter.convertRowIndexToView(int)|
|javax.swing.DefaultRowSorter.getComparator(int)|Returns the Comparator for the specified   column.
|javax.swing.DefaultRowSorter.getMaxSortKeys()|Returns the maximum number of sort keys.
|javax.swing.DefaultRowSorter.getModel()|Returns the underlying model.
|javax.swing.DefaultRowSorter.getModelRowCount()|
|javax.swing.DefaultRowSorter.getModelWrapper()|Returns the model wrapper providing the data that is being sorted and  filtered
|javax.swing.DefaultRowSorter.getRowFilter()|Returns the filter that determines which rows, if any, should  be hidden from view
|javax.swing.DefaultRowSorter.getSortKeys()|Returns the current sort keys.
|javax.swing.DefaultRowSorter.getSortsOnUpdates()|Returns true if  a sort should happen when the underlying  model is updated; 
|javax.swing.DefaultRowSorter.getViewRowCount()|
|javax.swing.DefaultRowSorter.isSortable(int)|Returns true if the specified column is sortable; otherwise, false.
|javax.swing.DefaultRowSorter.modelStructureChanged()|
|javax.swing.DefaultRowSorter.rowsDeleted(int,int)|
|javax.swing.DefaultRowSorter.rowsInserted(int,int)|
|javax.swing.DefaultRowSorter.rowsUpdated(int,int)|
|javax.swing.DefaultRowSorter.rowsUpdated(int,int,int)|
|javax.swing.DefaultRowSorter.setComparator(int,Comparator<?>)|Sets the Comparator to use when sorting the specified  column.
|javax.swing.DefaultRowSorter.setMaxSortKeys(int)|Sets the maximum number of sort keys.
|javax.swing.DefaultRowSorter.setModelWrapper(DefaultRowSorter.ModelWrapper<M,I>)|Sets the model wrapper providing the data tha
|javax.swing.DefaultRowSorter.setRowFilter(RowFilter<?superM,?superI>)|Sets the filter that determines which rows, if any, shou
|javax.swing.DefaultRowSorter.setSortable(int,boolean)|Sets whether or not the specified column is sortable.
|javax.swing.DefaultRowSorter.setSortKeys(List<?extendsRowSorter.SortKey>)|Sets the sort keys.
|javax.swing.DefaultRowSorter.setSortsOnUpdates(boolean)|If true, specifies that a sort should happen when the underlying  mode
|javax.swing.DefaultRowSorter.sort()|Sorts and filters the rows in the view based on the sort keys  of the columns currently be
|javax.swing.DefaultRowSorter.toggleSortOrder(int)|Reverses the sort order from ascending to descending (or  descending to asce
|javax.swing.DefaultRowSorter.useToString(int)|Returns whether or not to convert the value to a string before  doing comparison

*javax.swing.DefaultRowSorter_Description*

An implementation of RowSorter that provides sorting and filtering around a grid-based data model. Beyond creating and 
installing a RowSorter, you very rarely need to interact with one directly. Refer to 
TableRowSorter(|javax.swing.table.TableRowSorter|) for a concrete implementation of RowSorter for JTable. 

Sorting is done based on the current SortKeys, in order. If two objects are equal (the Comparator for the column returns 0) the 
next SortKey is used. If no SortKeys remain or the order is UNSORTED, then the order of the rows in the model is used. 

Sorting of each column is done by way of a Comparator that you can specify using the setComparator method. If a Comparator has 
not been specified, the Comparator returned by Collator.getInstance() is used on the results of calling toString on the 
underlying objects. The Comparator is never passed null. A null value is treated as occuring before a non-null value, and two 
null values are considered equal. 

If you specify a Comparator that casts its argument to a type other than that provided by the model, a ClassCastException will 
be thrown when the data is sorted. 

In addition to sorting, DefaultRowSorter provides the ability to filter rows. Filtering is done by way of a RowFilter that is 
specified using the setRowFilter method. If no filter has been specified all rows are included. 

By default, rows are in unsorted order (the same as the model) and every column is sortable. The default Comparators are 
documented in the subclasses (for example, TableRowSorter(|javax.swing.table.TableRowSorter|) ). 

If the underlying model structure changes (the modelStructureChanged method is invoked) the following are reset to their 
default values: Comparators by column, current sort order, and whether each column is sortable. To find the default 
Comparators, see the concrete implementation (for example, TableRowSorter(|javax.swing.table.TableRowSorter|) ). The default 
sort order is unsorted (the same as the model), and columns are sortable by default. 

If the underlying model structure changes (the modelStructureChanged method is invoked) the following are reset to their 
default values: Comparators by column, current sort order and whether a column is sortable. 

DefaultRowSorter is an abstract class. Concrete subclasses must provide access to the underlying data by 
invokingsetModelWrapper. ThesetModelWrappermethod must be invoked soon after the constructor is called, ideally from within the 
subclass's constructor. Undefined behavior will result if you use aDefaultRowSorterwithout specifying aModelWrapper. 

DefaultRowSorter has two formal type parameters. The first type parameter corresponds to the class of the model, for example 
DefaultTableModel. The second type parameter corresponds to the class of the identifier passed to the RowFilter. Refer to 
TableRowSorter and RowFilter for more details on the type parameters. 



*javax.swing.DefaultRowSorter()*

public DefaultRowSorter()

Creates an empty DefaultRowSorter. 


*javax.swing.DefaultRowSorter.allRowsChanged()*

public void allRowsChanged()





*javax.swing.DefaultRowSorter.convertRowIndexToModel(int)*

public int convertRowIndexToModel(int index)





*javax.swing.DefaultRowSorter.convertRowIndexToView(int)*

public int convertRowIndexToView(int index)





*javax.swing.DefaultRowSorter.getComparator(int)*

public |java.util.Comparator|<?> getComparator(int column)

Returns the Comparator for the specified column. This will return null if a Comparator has not been specified for the column. 


    column - the column to fetch the Comparator for, in terms of the underlying model 

    Returns: the Comparator for the specified column 

*javax.swing.DefaultRowSorter.getMaxSortKeys()*

public int getMaxSortKeys()

Returns the maximum number of sort keys. 



    Returns: the maximum number of sort keys 

*javax.swing.DefaultRowSorter.getModel()*

public final |M| getModel()

Returns the underlying model. 



    Returns: the underlying model 

*javax.swing.DefaultRowSorter.getModelRowCount()*

public int getModelRowCount()





*javax.swing.DefaultRowSorter.getModelWrapper()*

protected final |javax.swing.DefaultRowSorter.ModelWrapper|<M,I> getModelWrapper()

Returns the model wrapper providing the data that is being sorted and filtered. 



    Returns: the model wrapper responsible for providing the data that gets sorted and filtered 

*javax.swing.DefaultRowSorter.getRowFilter()*

public |javax.swing.RowFilter|<? super M,? super I> getRowFilter()

Returns the filter that determines which rows, if any, should be hidden from view. 



    Returns: 

*javax.swing.DefaultRowSorter.getSortKeys()*

public |java.util.List|<? extends javax.swing.RowSorter.SortKey> getSortKeys()

Returns the current sort keys. This returns an unmodifiablenon-null List. If you need to change the sort keys, make a copy of 
the returnedList, mutate the copy and invokesetSortKeyswith the new list. 



    Returns: the current sort order 

*javax.swing.DefaultRowSorter.getSortsOnUpdates()*

public boolean getSortsOnUpdates()

Returns true if a sort should happen when the underlying model is updated; otherwise, returns false. 



    Returns: whether or not to sort when the model is updated 

*javax.swing.DefaultRowSorter.getViewRowCount()*

public int getViewRowCount()





*javax.swing.DefaultRowSorter.isSortable(int)*

public boolean isSortable(int column)

Returns true if the specified column is sortable; otherwise, false. 


    column - the column to check sorting for, in terms of the underlying model 

    Returns: true if the column is sortable 

*javax.swing.DefaultRowSorter.modelStructureChanged()*

public void modelStructureChanged()





*javax.swing.DefaultRowSorter.rowsDeleted(int,int)*

public void rowsDeleted(
  int firstRow,
  int endRow)





*javax.swing.DefaultRowSorter.rowsInserted(int,int)*

public void rowsInserted(
  int firstRow,
  int endRow)





*javax.swing.DefaultRowSorter.rowsUpdated(int,int)*

public void rowsUpdated(
  int firstRow,
  int endRow)





*javax.swing.DefaultRowSorter.rowsUpdated(int,int,int)*

public void rowsUpdated(
  int firstRow,
  int endRow,
  int column)





*javax.swing.DefaultRowSorter.setComparator(int,Comparator<?>)*

public void setComparator(
  int column,
  java.util.Comparator<?> comparator)

Sets the Comparator to use when sorting the specified column. This does not trigger a sort. If you want to sort after setting 
the comparator you need to explicitly invoke sort. 


    column - the index of the column the Comparator is to be used for, in terms of the underlying model 
    comparator - the Comparator to use 

*javax.swing.DefaultRowSorter.setMaxSortKeys(int)*

public void setMaxSortKeys(int max)

Sets the maximum number of sort keys. The number of sort keys determines how equal values are resolved when sorting. For 
example, assume a table row sorter is created and setMaxSortKeys(2) is invoked on it. The user clicks the header for column 1, 
causing the table rows to be sorted based on the items in column 1. Next, the user clicks the header for column 2, causing the 
table to be sorted based on the items in column 2; if any items in column 2 are equal, then those particular rows are ordered 
based on the items in column 1. In this case, we say that the rows are primarily sorted on column 2, and secondarily on column 
1. If the user then clicks the header for column 3, then the items are primarily sorted on column 3 and secondarily sorted on 
column 2. Because the maximum number of sort keys has been set to 2 with setMaxSortKeys, column 1 no longer has an effect on 
the order. 

The maximum number of sort keys is enforced by toggleSortOrder. You can specify more sort keys by invoking setSortKeys directly 
and they will all be honored. However if toggleSortOrder is subsequently invoked the maximum number of sort keys will be 
enforced. The default value is 3. 


    max - the maximum number of sort keys 

*javax.swing.DefaultRowSorter.setModelWrapper(DefaultRowSorter.ModelWrapper<M,I>)*

protected final void setModelWrapper(javax.swing.DefaultRowSorter.ModelWrapper<M, I> modelWrapper)

Sets the model wrapper providing the data that is being sorted and filtered. 


    modelWrapper - the model wrapper responsible for providing the data that gets sorted and filtered 

*javax.swing.DefaultRowSorter.setRowFilter(RowFilter<?superM,?superI>)*

public void setRowFilter(javax.swing.RowFilter<? super M, ? super I> filter)

Sets the filter that determines which rows, if any, should be hidden from the view. The filter is applied before sorting. A 
value of null indicates all values from the model should be included. 

RowFilter's include method is passed an Entry that wraps the underlying model. The number of columns in the Entry corresponds 
to the number of columns in the ModelWrapper. The identifier comes from the ModelWrapper as well. 

This method triggers a sort. 


    filter - the filter used to determine what entries should be included 

*javax.swing.DefaultRowSorter.setSortable(int,boolean)*

public void setSortable(
  int column,
  boolean sortable)

Sets whether or not the specified column is sortable. The specified value is only checked when toggleSortOrder is invoked. It 
is still possible to sort on a column that has been marked as unsortable by directly setting the sort keys. The default is 
true. 


    column - the column to enable or disable sorting on, in terms of the underlying model 
    sortable - whether or not the specified column is sortable 

*javax.swing.DefaultRowSorter.setSortKeys(List<?extendsRowSorter.SortKey>)*

public void setSortKeys(java.util.List<? extends javax.swing.RowSorter.SortKey> sortKeys)

Sets the sort keys. This creates a copy of the suppliedList; subsequent changes to the suppliedListdo not effect 
thisDefaultRowSorter. If the sort keys have changed this triggers a sort. 


    sortKeys - the new SortKeys; null is a shorthand for specifying an empty list, indicating that the view should be unsorted 

*javax.swing.DefaultRowSorter.setSortsOnUpdates(boolean)*

public void setSortsOnUpdates(boolean sortsOnUpdates)

If true, specifies that a sort should happen when the underlying model is updated (rowsUpdated is invoked). For example, if 
this is true and the user edits an entry the location of that item in the view may change. The default is false. 


    sortsOnUpdates - whether or not to sort on update events 

*javax.swing.DefaultRowSorter.sort()*

public void sort()

Sorts and filters the rows in the view based on the sort keys of the columns currently being sorted and the filter, if any, 
associated with this sorter. An empty sortKeys list indicates that the view should unsorted, the same as the model. 



*javax.swing.DefaultRowSorter.toggleSortOrder(int)*

public void toggleSortOrder(int column)

Reverses the sort order from ascending to descending (or descending to ascending) if the specified column is already the 
primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order. If the 
specified column is not sortable, this method has no effect. 


    column - index of the column to make the primary sorted column, in terms of the underlying model 

*javax.swing.DefaultRowSorter.useToString(int)*

protected boolean useToString(int column)

Returns whether or not to convert the value to a string before doing comparisons when sorting. If true 
ModelWrapper.getStringValueAt will be used, otherwise ModelWrapper.getValueAt will be used. It is up to subclasses, such as 
TableRowSorter, to honor this value in their ModelWrapper implementation. 


    column - the index of the column to test, in terms of the underlying model 


