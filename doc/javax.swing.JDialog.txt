*javax.swing.JDialog* *JDialog* The main class for creating a dialog window.

public class JDialog
  extends    |java.awt.Dialog|
  implements |javax.swing.WindowConstants|
             |javax.accessibility.Accessible|
             |javax.swing.RootPaneContainer|
             |javax.swing.TransferHandler.HasGetTransferHandler|

|javax.swing.JDialog_Description|
|javax.swing.JDialog_Fields|
|javax.swing.JDialog_Constructors|
|javax.swing.JDialog_Methods|

================================================================================================================================

*javax.swing.JDialog_Fields*
|javax.accessibility.AccessibleContext_javax.swing.JDialog.accessibleContext|
|javax.swing.JRootPane_javax.swing.JDialog.rootPane|
|boolean_javax.swing.JDialog.rootPaneCheckingEnabled|

*javax.swing.JDialog_Constructors*
|javax.swing.JDialog()|Creates a modeless dialog without a title and without a specified  Frame owner.
|javax.swing.JDialog(Dialog)|Creates a modeless dialog without a title with the  specified Dialog as its owner.
|javax.swing.JDialog(Dialog,boolean)|Creates a dialog with the specified owner Dialog and modality.
|javax.swing.JDialog(Dialog,String)|Creates a modeless dialog with the specified title and  with the specified owner dialog.
|javax.swing.JDialog(Dialog,String,boolean)|Creates a dialog with the specified title, modality   and the specified owner Dialo
|javax.swing.JDialog(Dialog,String,boolean,GraphicsConfiguration)|Creates a dialog with the specified title, owner Dialog,   mo
|javax.swing.JDialog(Frame)|Creates a modeless dialog without a title with the  specified Frame as its owner.
|javax.swing.JDialog(Frame,boolean)|Creates a dialog with the specified owner Frame, modality  and an empty title.
|javax.swing.JDialog(Frame,String)|Creates a modeless dialog with the specified title and  with the specified owner frame.
|javax.swing.JDialog(Frame,String,boolean)|Creates a dialog with the specified title, owner Frame  and modality.
|javax.swing.JDialog(Frame,String,boolean,GraphicsConfiguration)|Creates a dialog with the specified title,   owner Frame, moda
|javax.swing.JDialog(Window)|Creates a modeless dialog with the specified owner Window and  an empty title.
|javax.swing.JDialog(Window,Dialog.ModalityType)|Creates a dialog with the specified owner Window, modality  and an empty title
|javax.swing.JDialog(Window,String)|Creates a modeless dialog with the specified title and owner  Window.
|javax.swing.JDialog(Window,String,Dialog.ModalityType)|Creates a dialog with the specified title, owner Window and  modality.
|javax.swing.JDialog(Window,String,Dialog.ModalityType,GraphicsConfiguration)|Creates a dialog with the specified title, owner 

*javax.swing.JDialog_Methods*
|javax.swing.JDialog.addImpl(Component,Object,int)|Adds the specified child Component.
|javax.swing.JDialog.createRootPane()|Called by the constructor methods to create the default  rootPane.
|javax.swing.JDialog.dialogInit()|Called by the constructors to init the JDialog properly.
|javax.swing.JDialog.getAccessibleContext()|Gets the AccessibleContext associated with this JDialog.
|javax.swing.JDialog.getContentPane()|Returns the contentPane object for this dialog.
|javax.swing.JDialog.getDefaultCloseOperation()|Returns the operation which occurs when the user  initiates a "close" on this d
|javax.swing.JDialog.getGlassPane()|Returns the glassPane object for this dialog.
|javax.swing.JDialog.getGraphics()|
|javax.swing.JDialog.getJMenuBar()|Returns the menubar set on this dialog.
|javax.swing.JDialog.getLayeredPane()|Returns the layeredPane object for this dialog.
|javax.swing.JDialog.getRootPane()|Returns the rootPane object for this dialog.
|javax.swing.JDialog.getTransferHandler()|Gets the transferHandler property.
|javax.swing.JDialog.isDefaultLookAndFeelDecorated()|Returns true if newly created JDialogs should have their  Window decoratio
|javax.swing.JDialog.isRootPaneCheckingEnabled()|Returns whether calls to add and   setLayout are forwarded to the contentPane.
|javax.swing.JDialog.paramString()|Returns a string representation of this JDialog.
|javax.swing.JDialog.processWindowEvent(WindowEvent)|Handles window events depending on the state of the  defaultCloseOperation
|javax.swing.JDialog.remove(Component)|Removes the specified component from the container.
|javax.swing.JDialog.repaint(long,int,int,int,int)|Repaints the specified rectangle of this component within  time milliseconds
|javax.swing.JDialog.setContentPane(Container)|Sets the contentPane property.
|javax.swing.JDialog.setDefaultCloseOperation(int)|Sets the operation that will happen by default when  the user initiates a "c
|javax.swing.JDialog.setDefaultLookAndFeelDecorated(boolean)|Provides a hint as to whether or not newly created JDialogs  shoul
|javax.swing.JDialog.setGlassPane(Component)|Sets the glassPane property.
|javax.swing.JDialog.setJMenuBar(JMenuBar)|Sets the menubar for this dialog.
|javax.swing.JDialog.setLayeredPane(JLayeredPane)|Sets the layeredPane property.
|javax.swing.JDialog.setLayout(LayoutManager)|Sets the LayoutManager.
|javax.swing.JDialog.setRootPane(JRootPane)|Sets the rootPane property.
|javax.swing.JDialog.setRootPaneCheckingEnabled(boolean)|Sets whether calls to add and   setLayout are forwarded to the content
|javax.swing.JDialog.setTransferHandler(TransferHandler)|Sets thetransferHandlerproperty, which is a mechanism to  support tran
|javax.swing.JDialog.update(Graphics)|Calls paint(g).

*javax.swing.JDialog_Description*

The main class for creating a dialog window. You can use this class to create a custom dialog, or invoke the many class methods 
in (|javax.swing.JOptionPane|) to create a variety of standard dialogs. For information about creating dialogs, see The Java 
Tutorial section How to Make Dialogs. 



The JDialog component contains a JRootPane as its only child. The contentPane should be the parent of any children of the 
JDialog. As a convenience add and its variants, remove and setLayout have been overridden to forward to the contentPane as 
necessary. This means you can write: 

dialog.add(child); 

And the child will be added to the contentPane. The contentPane is always non-null. Attempting to set it to null generates an 
exception. The default contentPane has a BorderLayout manager set on it. Refer to (|javax.swing.RootPaneContainer|) for details 
on adding, removing and setting the LayoutManager of a JDialog. 

Please see the JRootPane documentation for a complete description of the contentPane, glassPane, and layeredPane components. 

In a multi-screen environment, you can create a JDialog on a different screen device than its owner. See (|java.awt.Frame|) for 
more information. 

Warning: Swing is not thread safe. For more information see Swing's Threading Policy. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support 
is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for 
long term storage of all JavaBeansTM has been added to the java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.accessibility.AccessibleContext_javax.swing.JDialog.accessibleContext*




*javax.swing.JRootPane_javax.swing.JDialog.rootPane*




*boolean_javax.swing.JDialog.rootPaneCheckingEnabled*

If true then calls to add and setLayout will be forwarded to the contentPane. This is initially false, but is set to true when 
the JDialog is constructed. 



*javax.swing.JDialog()*

public JDialog()

Creates a modeless dialog without a title and without a specified Frame owner. A shared, hidden frame will be set as the owner 
of the dialog. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

NOTE: This constructor does not allow you to create an unowned JDialog. To create an unowned JDialog you must use either the 
JDialog(Window) or JDialog(Dialog) constructor with an argument of null. 


*javax.swing.JDialog(Dialog)*

public JDialog(java.awt.Dialog owner)

Creates a modeless dialog without a title with the specified Dialog as its owner. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

    owner - the owner Dialog from which the dialog is displayed or null if this dialog has no owner 

*javax.swing.JDialog(Dialog,boolean)*

public JDialog(
  java.awt.Dialog owner,
  boolean modal)

Creates a dialog with the specified owner Dialog and modality. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

    owner - the owner Dialog from which the dialog is displayed or null if this dialog has no owner 
    modal - specifies whether dialog blocks user input to other top-level windows when shown. If true, the modality type property is set to 
       DEFAULT_MODALITY_TYPE, otherwise the dialog is modeless. 

*javax.swing.JDialog(Dialog,String)*

public JDialog(
  java.awt.Dialog owner,
  java.lang.String title)

Creates a modeless dialog with the specified title and with the specified owner dialog. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

    owner - the owner Dialog from which the dialog is displayed or null if this dialog has no owner 
    title - the String to display in the dialog's title bar 

*javax.swing.JDialog(Dialog,String,boolean)*

public JDialog(
  java.awt.Dialog owner,
  java.lang.String title,
  boolean modal)

Creates a dialog with the specified title, modality and the specified owner Dialog. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

    owner - the owner Dialog from which the dialog is displayed or null if this dialog has no owner 
    title - the String to display in the dialog's title bar 
    modal - specifies whether dialog blocks user input to other top-level windows when shown. If true, the modality type property is set to 
       DEFAULT_MODALITY_TYPE, otherwise the dialog is modeless 

*javax.swing.JDialog(Dialog,String,boolean,GraphicsConfiguration)*

public JDialog(
  java.awt.Dialog owner,
  java.lang.String title,
  boolean modal,
  java.awt.GraphicsConfiguration gc)

Creates a dialog with the specified title, owner Dialog, modality and GraphicsConfiguration. 

NOTE: Any popup components (JComboBox, JPopupMenu, JMenuBar) created within a modal dialog will be forced to be lightweight. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

    owner - the owner Dialog from which the dialog is displayed or null if this dialog has no owner 
    title - the String to display in the dialog's title bar 
    modal - specifies whether dialog blocks user input to other top-level windows when shown. If true, the modality type property is set to 
       DEFAULT_MODALITY_TYPE, otherwise the dialog is modeless 
    gc - the GraphicsConfiguration of the target screen device. If gc is null, the same GraphicsConfiguration as the owning Dialog is 
       used. 

*javax.swing.JDialog(Frame)*

public JDialog(java.awt.Frame owner)

Creates a modeless dialog without a title with the specified Frame as its owner. If owner is null, a shared, hidden frame will 
be set as the owner of the dialog. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

NOTE: This constructor does not allow you to create an unowned JDialog. To create an unowned JDialog you must use either the 
JDialog(Window) or JDialog(Dialog) constructor with an argument of null. 

    owner - the Frame from which the dialog is displayed 

*javax.swing.JDialog(Frame,boolean)*

public JDialog(
  java.awt.Frame owner,
  boolean modal)

Creates a dialog with the specified owner Frame, modality and an empty title. If owner is null, a shared, hidden frame will be 
set as the owner of the dialog. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

NOTE: This constructor does not allow you to create an unowned JDialog. To create an unowned JDialog you must use either the 
JDialog(Window) or JDialog(Dialog) constructor with an argument of null. 

    owner - the Frame from which the dialog is displayed 
    modal - specifies whether dialog blocks user input to other top-level windows when shown. If true, the modality type property is set to 
       DEFAULT_MODALITY_TYPE, otherwise the dialog is modeless. 

*javax.swing.JDialog(Frame,String)*

public JDialog(
  java.awt.Frame owner,
  java.lang.String title)

Creates a modeless dialog with the specified title and with the specified owner frame. If owner is null, a shared, hidden frame 
will be set as the owner of the dialog. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

NOTE: This constructor does not allow you to create an unowned JDialog. To create an unowned JDialog you must use either the 
JDialog(Window) or JDialog(Dialog) constructor with an argument of null. 

    owner - the Frame from which the dialog is displayed 
    title - the String to display in the dialog's title bar 

*javax.swing.JDialog(Frame,String,boolean)*

public JDialog(
  java.awt.Frame owner,
  java.lang.String title,
  boolean modal)

Creates a dialog with the specified title, owner Frame and modality. If owner is null, a shared, hidden frame will be set as 
the owner of this dialog. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

NOTE: Any popup components (JComboBox, JPopupMenu, JMenuBar) created within a modal dialog will be forced to be lightweight. 

NOTE: This constructor does not allow you to create an unowned JDialog. To create an unowned JDialog you must use either the 
JDialog(Window) or JDialog(Dialog) constructor with an argument of null. 

    owner - the Frame from which the dialog is displayed 
    title - the String to display in the dialog's title bar 
    modal - specifies whether dialog blocks user input to other top-level windows when shown. If true, the modality type property is set to 
       DEFAULT_MODALITY_TYPE otherwise the dialog is modeless 

*javax.swing.JDialog(Frame,String,boolean,GraphicsConfiguration)*

public JDialog(
  java.awt.Frame owner,
  java.lang.String title,
  boolean modal,
  java.awt.GraphicsConfiguration gc)

Creates a dialog with the specified title, owner Frame, modality and GraphicsConfiguration. If owner is null, a shared, hidden 
frame will be set as the owner of this dialog. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

NOTE: Any popup components (JComboBox, JPopupMenu, JMenuBar) created within a modal dialog will be forced to be lightweight. 

NOTE: This constructor does not allow you to create an unowned JDialog. To create an unowned JDialog you must use either the 
JDialog(Window) or JDialog(Dialog) constructor with an argument of null. 

    owner - the Frame from which the dialog is displayed 
    title - the String to display in the dialog's title bar 
    modal - specifies whether dialog blocks user input to other top-level windows when shown. If true, the modality type property is set to 
       DEFAULT_MODALITY_TYPE, otherwise the dialog is modeless. 
    gc - the GraphicsConfiguration of the target screen device. If gc is null, the same GraphicsConfiguration as the owning Frame is 
       used. 

*javax.swing.JDialog(Window)*

public JDialog(java.awt.Window owner)

Creates a modeless dialog with the specified owner Window and an empty title. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

    owner - the Window from which the dialog is displayed or null if this dialog has no owner 

*javax.swing.JDialog(Window,Dialog.ModalityType)*

public JDialog(
  java.awt.Window owner,
  java.awt.Dialog.ModalityType modalityType)

Creates a dialog with the specified owner Window, modality and an empty title. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

    owner - the Window from which the dialog is displayed or null if this dialog has no owner 
    modalityType - specifies whether dialog blocks input to other windows when shown. null value and unsupported modality types are equivalent to 
       MODELESS 

*javax.swing.JDialog(Window,String)*

public JDialog(
  java.awt.Window owner,
  java.lang.String title)

Creates a modeless dialog with the specified title and owner Window. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

    owner - the Window from which the dialog is displayed or null if this dialog has no owner 
    title - the String to display in the dialog's title bar or null if the dialog has no title 

*javax.swing.JDialog(Window,String,Dialog.ModalityType)*

public JDialog(
  java.awt.Window owner,
  java.lang.String title,
  java.awt.Dialog.ModalityType modalityType)

Creates a dialog with the specified title, owner Window and modality. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

    owner - the Window from which the dialog is displayed or null if this dialog has no owner 
    title - the String to display in the dialog's title bar or null if the dialog has no title 
    modalityType - specifies whether dialog blocks input to other windows when shown. null value and unsupported modality types are equivalent to 
       MODELESS 

*javax.swing.JDialog(Window,String,Dialog.ModalityType,GraphicsConfiguration)*

public JDialog(
  java.awt.Window owner,
  java.lang.String title,
  java.awt.Dialog.ModalityType modalityType,
  java.awt.GraphicsConfiguration gc)

Creates a dialog with the specified title, owner Window, modality and GraphicsConfiguration. 

NOTE: Any popup components (JComboBox, JPopupMenu, JMenuBar) created within a modal dialog will be forced to be lightweight. 

This constructor sets the component's locale property to the value returned by JComponent.getDefaultLocale. 

    owner - the Window from which the dialog is displayed or null if this dialog has no owner 
    title - the String to display in the dialog's title bar or null if the dialog has no title 
    modalityType - specifies whether dialog blocks input to other windows when shown. null value and unsupported modality types are equivalent to 
       MODELESS 
    gc - the GraphicsConfiguration of the target screen device; if null, the GraphicsConfiguration from the owning window is used; if 
       owner is also null, the system default GraphicsConfiguration is assumed 

*javax.swing.JDialog.addImpl(Component,Object,int)*

protected void addImpl(
  java.awt.Component comp,
  java.lang.Object constraints,
  int index)

Adds the specified child Component. This method is overridden to conditionally forward calls to the contentPane. By default, 
children are added to the contentPane instead of the frame, refer to (|javax.swing.RootPaneContainer|) for details. 


    comp - the component to be enhanced 
    constraints - the constraints to be respected 
    index - the index 

*javax.swing.JDialog.createRootPane()*

protected |javax.swing.JRootPane| createRootPane()

Called by the constructor methods to create the default rootPane. 



*javax.swing.JDialog.dialogInit()*

protected void dialogInit()

Called by the constructors to init the JDialog properly. 



*javax.swing.JDialog.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JDialog. For JDialogs, the AccessibleContext takes the form of an 
AccessibleJDialog. A new AccessibleJDialog instance is created if necessary. 



    Returns: an AccessibleJDialog that serves as the AccessibleContext of this JDialog 

*javax.swing.JDialog.getContentPane()*

public |java.awt.Container| getContentPane()

Returns the contentPane object for this dialog. 



    Returns: the contentPane property 

*javax.swing.JDialog.getDefaultCloseOperation()*

public int getDefaultCloseOperation()

Returns the operation which occurs when the user initiates a "close" on this dialog. 



    Returns: an integer indicating the window-close operation 

*javax.swing.JDialog.getGlassPane()*

public |java.awt.Component| getGlassPane()

Returns the glassPane object for this dialog. 



    Returns: the glassPane property 

*javax.swing.JDialog.getGraphics()*

public |java.awt.Graphics| getGraphics()





*javax.swing.JDialog.getJMenuBar()*

public |javax.swing.JMenuBar| getJMenuBar()

Returns the menubar set on this dialog. 



*javax.swing.JDialog.getLayeredPane()*

public |javax.swing.JLayeredPane| getLayeredPane()

Returns the layeredPane object for this dialog. 



    Returns: the layeredPane property 

*javax.swing.JDialog.getRootPane()*

public |javax.swing.JRootPane| getRootPane()

Returns the rootPane object for this dialog. 



*javax.swing.JDialog.getTransferHandler()*

public |javax.swing.TransferHandler| getTransferHandler()

Gets the transferHandler property. 



    Returns: the value of the transferHandler property 

*javax.swing.JDialog.isDefaultLookAndFeelDecorated()*

public static boolean isDefaultLookAndFeelDecorated()

Returns true if newly created JDialogs should have their Window decorations provided by the current look and feel. This is only 
a hint, as certain look and feels may not support this feature. 



    Returns: true if look and feel should provide Window decorations. 

*javax.swing.JDialog.isRootPaneCheckingEnabled()*

protected boolean isRootPaneCheckingEnabled()

Returns whether calls to add and setLayout are forwarded to the contentPane. 



    Returns: true if add and setLayout are fowarded; false otherwise 

*javax.swing.JDialog.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JDialog. This method is intended to be used only for debugging purposes, and the 
content and format of the returned string may vary between implementations. The returned string may be empty but may not be 
null. 



    Returns: a string representation of this JDialog. 

*javax.swing.JDialog.processWindowEvent(WindowEvent)*

protected void processWindowEvent(java.awt.event.WindowEvent e)

Handles window events depending on the state of the defaultCloseOperation property. 



*javax.swing.JDialog.remove(Component)*

public void remove(java.awt.Component comp)

Removes the specified component from the container. If comp is not the rootPane, this will forward the call to the contentPane. 
This will do nothing if comp is not a child of the JDialog or contentPane. 


    comp - the component to be removed 

*javax.swing.JDialog.repaint(long,int,int,int,int)*

public void repaint(
  long time,
  int x,
  int y,
  int width,
  int height)

Repaints the specified rectangle of this component within time milliseconds. Refer to RepaintManager for details on how the 
repaint is handled. 


    time - maximum time in milliseconds before update 
    x - the x coordinate 
    y - the y coordinate 
    width - the width 
    height - the height 

*javax.swing.JDialog.setContentPane(Container)*

public void setContentPane(java.awt.Container contentPane)

Sets the contentPane property. This method is called by the constructor. 

Swing's painting architecture requires an opaque JComponent in the containment hiearchy. This is typically provided by the 
content pane. If you replace the content pane it is recommended you replace it with an opaque JComponent. 


    contentPane - the contentPane object for this dialog 

*javax.swing.JDialog.setDefaultCloseOperation(int)*

public void setDefaultCloseOperation(int operation)

Sets the operation that will happen by default when the user initiates a "close" on this dialog. You must specify one of the 
following choices: 

DO_NOTHING_ON_CLOSE (defined in WindowConstants): Don't do anything; require the program to handle the operation in the 
windowClosing method of a registered WindowListener object. 

HIDE_ON_CLOSE (defined in WindowConstants): Automatically hide the dialog after invoking any registered WindowListener objects. 

DISPOSE_ON_CLOSE (defined in WindowConstants): Automatically hide and dispose the dialog after invoking any registered 
WindowListener objects. 

The value is set to HIDE_ON_CLOSE by default. Changes to the value of this property cause the firing of a property change 
event, with property name "defaultCloseOperation". 

Note: When the last displayable window within the Java virtual machine (VM) is disposed of, the VM may terminate. See AWT 
Threading Issues for more information. 


    operation - the operation which should be performed when the user closes the dialog 

*javax.swing.JDialog.setDefaultLookAndFeelDecorated(boolean)*

public static void setDefaultLookAndFeelDecorated(boolean defaultLookAndFeelDecorated)

Provides a hint as to whether or not newly created JDialogs should have their Window decorations (such as borders, widgets to 
close the window, title...) provided by the current look and feel. If defaultLookAndFeelDecorated is true, the current 
LookAndFeel supports providing window decorations, and the current window manager supports undecorated windows, then newly 
created JDialogs will have their Window decorations provided by the current LookAndFeel. Otherwise, newly created JDialogs will 
have their Window decorations provided by the current window manager. 

You can get the same effect on a single JDialog by doing the following: 

JDialog dialog = new JDialog(); dialog.setUndecorated(true); 
dialog.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG); 


    defaultLookAndFeelDecorated - A hint as to whether or not current look and feel should provide window decorations 

*javax.swing.JDialog.setGlassPane(Component)*

public void setGlassPane(java.awt.Component glassPane)

Sets the glassPane property. This method is called by the constructor. 


    glassPane - the glassPane object for this dialog 

*javax.swing.JDialog.setJMenuBar(JMenuBar)*

public void setJMenuBar(javax.swing.JMenuBar menu)

Sets the menubar for this dialog. 


    menu - the menubar being placed in the dialog 

*javax.swing.JDialog.setLayeredPane(JLayeredPane)*

public void setLayeredPane(javax.swing.JLayeredPane layeredPane)

Sets the layeredPane property. This method is called by the constructor. 


    layeredPane - the new layeredPane property 

*javax.swing.JDialog.setLayout(LayoutManager)*

public void setLayout(java.awt.LayoutManager manager)

Sets the LayoutManager. Overridden to conditionally forward the call to the contentPane. Refer to 
(|javax.swing.RootPaneContainer|) for more information. 


    manager - the LayoutManager 

*javax.swing.JDialog.setRootPane(JRootPane)*

protected void setRootPane(javax.swing.JRootPane root)

Sets the rootPane property. This method is called by the constructor. 


    root - the rootPane object for this dialog 

*javax.swing.JDialog.setRootPaneCheckingEnabled(boolean)*

protected void setRootPaneCheckingEnabled(boolean enabled)

Sets whether calls to add and setLayout are forwarded to the contentPane. 


    enabled - true if add and setLayout are forwarded, false if they should operate directly on the JDialog. 

*javax.swing.JDialog.setTransferHandler(TransferHandler)*

public void setTransferHandler(javax.swing.TransferHandler newHandler)

Sets thetransferHandlerproperty, which is a mechanism to support transfer of data into this component. Usenullif the component 
does not support data transfer operations. 

If the system propertysuppressSwingDropSupportisfalse(the default) and the current drop target on this component is 
eithernullor not a user-set drop target, this method will change the drop target as follows: IfnewHandlerisnullit will clear 
the drop target. If notnullit will install a newDropTarget. 

Note: When used withJDialog,TransferHandleronly provides data import capability, as the data export related methods are 
currently typed toJComponent. 

Please see 

How to Use Drag and Drop and Data Transfer, a section in The Java Tutorial, for more information. 


    newHandler - the new {@code TransferHandler} 

*javax.swing.JDialog.update(Graphics)*

public void update(java.awt.Graphics g)

Calls paint(g). This method was overridden to prevent an unnecessary call to clear the background. 


    g - the Graphics context in which to paint 


