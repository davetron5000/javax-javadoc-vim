*javax.swing.JProgressBar* *JProgressBar* A component that visually displays the progress of some task.

public class JProgressBar
  extends    |javax.swing.JComponent|
  implements |javax.swing.SwingConstants|
             |javax.accessibility.Accessible|

|javax.swing.JProgressBar_Description|
|javax.swing.JProgressBar_Fields|
|javax.swing.JProgressBar_Constructors|
|javax.swing.JProgressBar_Methods|

================================================================================================================================

*javax.swing.JProgressBar_Fields*
|javax.swing.event.ChangeEvent_javax.swing.JProgressBar.changeEvent|
|javax.swing.event.ChangeListener_javax.swing.JProgressBar.changeListener|
|javax.swing.BoundedRangeModel_javax.swing.JProgressBar.model|
|int_javax.swing.JProgressBar.orientation|
|boolean_javax.swing.JProgressBar.paintBorder|
|boolean_javax.swing.JProgressBar.paintString|
|java.lang.String_javax.swing.JProgressBar.progressString|

*javax.swing.JProgressBar_Constructors*
|javax.swing.JProgressBar()|Creates a horizontal progress bar  that displays a border but no progress string.
|javax.swing.JProgressBar(BoundedRangeModel)|Creates a horizontal progress bar   that uses the specified model  to hold the pro
|javax.swing.JProgressBar(int)|Creates a progress bar with the specified orientation,  which can be   eitherSwingConstants.VERT
|javax.swing.JProgressBar(int,int)|Creates a horizontal progress bar  with the specified minimum and maximum.
|javax.swing.JProgressBar(int,int,int)|Creates a progress bar using the specified orientation,  minimum, and maximum.

*javax.swing.JProgressBar_Methods*
|javax.swing.JProgressBar.addChangeListener(ChangeListener)|Adds the specified ChangeListener to the progress bar.
|javax.swing.JProgressBar.createChangeListener()|Subclasses that want to handle change events   from the model differently  can
|javax.swing.JProgressBar.fireStateChanged()|Send aChangeEvent, whose source is thisJProgressBar, to  allChangeListeners that h
|javax.swing.JProgressBar.getAccessibleContext()|Gets the AccessibleContext associated with this   JProgressBar.
|javax.swing.JProgressBar.getChangeListeners()|Returns an array of all the ChangeListeners added  to this progress bar with add
|javax.swing.JProgressBar.getMaximum()|Returns the progress bar'smaximumvalue  from the BoundedRangeModel.
|javax.swing.JProgressBar.getMinimum()|Returns the progress bar'sminimumvalue  from the BoundedRangeModel.
|javax.swing.JProgressBar.getModel()|Returns the data model used by this progress bar.
|javax.swing.JProgressBar.getOrientation()|ReturnsSwingConstants.VERTICALorSwingConstants.HORIZONTAL, depending on the orientat
|javax.swing.JProgressBar.getPercentComplete()|Returns the percent complete for the progress bar.
|javax.swing.JProgressBar.getString()|Returns aStringrepresentation of the current progress.
|javax.swing.JProgressBar.getUI()|Returns the look-and-feel object that renders this component.
|javax.swing.JProgressBar.getUIClassID()|Returns the name of the look-and-feel class that renders this component.
|javax.swing.JProgressBar.getValue()|Returns the progress bar's currentvaluefrom the BoundedRangeModel.
|javax.swing.JProgressBar.isBorderPainted()|Returns the borderPainted property.
|javax.swing.JProgressBar.isIndeterminate()|Returns the value of the indeterminate property.
|javax.swing.JProgressBar.isStringPainted()|Returns the value of the stringPainted property.
|javax.swing.JProgressBar.paintBorder(Graphics)|Paints the progress bar's border if the borderPainted  property is true.
|javax.swing.JProgressBar.paramString()|Returns a string representation of this JProgressBar.
|javax.swing.JProgressBar.removeChangeListener(ChangeListener)|Removes a ChangeListener from the progress bar.
|javax.swing.JProgressBar.setBorderPainted(boolean)|Sets the borderPainted property, which is  true if the progress bar should 
|javax.swing.JProgressBar.setIndeterminate(boolean)|Sets the indeterminate property of the progress bar,  which determines whet
|javax.swing.JProgressBar.setMaximum(int)|Sets the progress bar's maximum value  (stored in the progress bar's data model) to n
|javax.swing.JProgressBar.setMinimum(int)|Sets the progress bar's minimum value   (stored in the progress bar's data model) to 
|javax.swing.JProgressBar.setModel(BoundedRangeModel)|Sets the data model used by the JProgressBar.
|javax.swing.JProgressBar.setOrientation(int)|Sets the progress bar's orientation to newOrientation,   which must beSwingConsta
|javax.swing.JProgressBar.setString(String)|Sets the value of the progress string.
|javax.swing.JProgressBar.setStringPainted(boolean)|Sets the value of the stringPainted property,  which determines whether the
|javax.swing.JProgressBar.setUI(ProgressBarUI)|Sets the look-and-feel object that renders this component.
|javax.swing.JProgressBar.setValue(int)|Sets the progress bar's current value ton.
|javax.swing.JProgressBar.updateUI()|Resets the UI property to a value from the current look and feel.

*javax.swing.JProgressBar_Description*

A component that visually displays the progress of some task. As the task progresses towards completion, the progress bar 
displays the task's percentage of completion. This percentage is typically represented visually by a rectangle which starts out 
empty and gradually becomes filled in as the task progresses. In addition, the progress bar can display a textual 
representation of this percentage. JProgressBaruses aBoundedRangeModelas its data model, with thevalueproperty representing the 
"current" state of the task, and theminimumandmaximumproperties representing the beginning and end points, respectively. 

To indicate that a task of unknown length is executing, you can put a progress bar into indeterminate mode. While the bar is in 
indeterminate mode, it animates constantly to show that work is occurring. As soon as you can determine the task's length and 
amount of progress, you should update the progress bar's value and switch it back to determinate mode. 



Here is an example of creating a progress bar, where task is an object (representing some piece of work) which returns 
information about the progress of the task: 

progressBar = new JProgressBar(0, task.getLengthOfTask()); progressBar.setValue(0); progressBar.setStringPainted(true); 

Here is an example of querying the current state of the task, and using the returned value to update the progress bar: 

progressBar.setValue(task.getCurrent()); 

Here is an example of putting a progress bar into indeterminate mode, and then switching back to determinate mode once the 
length of the task is known: 

progressBar = new JProgressBar(); ...//when the task of (initially) unknown length begins: progressBar.setIndeterminate(true); 
...//do some work; get length of task... progressBar.setMaximum(newLength); progressBar.setValue(newValue); 
progressBar.setIndeterminate(false); 



For complete examples and further documentation see How to Monitor Progress, a section in The Java Tutorial. 

Warning: Swing is not thread safe. For more information see Swing's Threading Policy. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support 
is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for 
long term storage of all JavaBeansTM has been added to the java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.event.ChangeEvent_javax.swing.JProgressBar.changeEvent*

Only one ChangeEvent is needed per instance since the event's only interesting property is the immutable source, which is the 
progress bar. The event is lazily created the first time that an event notification is fired. 


*javax.swing.event.ChangeListener_javax.swing.JProgressBar.changeListener*

Listens for change events sent by the progress bar's model, redispatching them to change-event listeners registered upon this 
progress bar. 


*javax.swing.BoundedRangeModel_javax.swing.JProgressBar.model*

The object that holds the data for the progress bar. 


*int_javax.swing.JProgressBar.orientation*

Whether the progress bar is horizontal or vertical. The default is HORIZONTAL. 


*boolean_javax.swing.JProgressBar.paintBorder*

Whether to display a border around the progress bar. The default is true. 


*boolean_javax.swing.JProgressBar.paintString*

Whether to display a string of text on the progress bar. The default is false. Setting this to true causes a textual display of 
the progress to be rendered on the progress bar. If the progressString is null, the percentage of completion is displayed on 
the progress bar. Otherwise, the progressString is rendered on the progress bar. 


*java.lang.String_javax.swing.JProgressBar.progressString*

An optional string that can be displayed on the progress bar. The default is null. Setting this to a non-null value does not 
imply that the string will be displayed. To display the string,paintStringmust betrue. 



*javax.swing.JProgressBar()*

public JProgressBar()

Creates a horizontal progress bar that displays a border but no progress string. The initial and minimum values are 0, and the 
maximum is 100. 


*javax.swing.JProgressBar(BoundedRangeModel)*

public JProgressBar(javax.swing.BoundedRangeModel newModel)

Creates a horizontal progress bar that uses the specified model to hold the progress bar's data. By default, a border is 
painted but a progress string is not. 

    newModel - the data model for the progress bar 

*javax.swing.JProgressBar(int)*

public JProgressBar(int orient)

Creates a progress bar with the specified orientation, which can be eitherSwingConstants.VERTICALorSwingConstants.HORIZONTAL. 
By default, a border is painted but a progress string is not. The initial and minimum values are 0, and the maximum is 100. 

    orient - the desired orientation of the progress bar 

*javax.swing.JProgressBar(int,int)*

public JProgressBar(
  int min,
  int max)

Creates a horizontal progress bar with the specified minimum and maximum. Sets the initial value of the progress bar to the 
specified minimum. By default, a border is painted but a progress string is not. 

The BoundedRangeModel that holds the progress bar's data handles any issues that may arise from improperly setting the minimum, 
initial, and maximum values on the progress bar. See theBoundedRangeModeldocumentation for details. 

    min - the minimum value of the progress bar 
    max - the maximum value of the progress bar 

*javax.swing.JProgressBar(int,int,int)*

public JProgressBar(
  int orient,
  int min,
  int max)

Creates a progress bar using the specified orientation, minimum, and maximum. By default, a border is painted but a progress 
string is not. Sets the initial value of the progress bar to the specified minimum. 

The BoundedRangeModel that holds the progress bar's data handles any issues that may arise from improperly setting the minimum, 
initial, and maximum values on the progress bar. See theBoundedRangeModeldocumentation for details. 

    orient - the desired orientation of the progress bar 
    min - the minimum value of the progress bar 
    max - the maximum value of the progress bar 

*javax.swing.JProgressBar.addChangeListener(ChangeListener)*

public void addChangeListener(javax.swing.event.ChangeListener l)

Adds the specified ChangeListener to the progress bar. 


    l - the ChangeListener to add 

*javax.swing.JProgressBar.createChangeListener()*

protected |javax.swing.event.ChangeListener| createChangeListener()

Subclasses that want to handle change events from the model differently can override this to return an instance of a custom 
ChangeListener implementation. The defaultChangeListenersimply calls thefireStateChangedmethod to forwardChangeEvents to 
theChangeListeners that have been added directly to the progress bar. 



*javax.swing.JProgressBar.fireStateChanged()*

protected void fireStateChanged()

Send aChangeEvent, whose source is thisJProgressBar, to allChangeListeners that have registered interest inChangeEvents. This 
method is called each time aChangeEventis received from the model. 

The event instance is created if necessary, and stored inchangeEvent. 



*javax.swing.JProgressBar.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JProgressBar. For progress bars, the AccessibleContext takes the form of an 
AccessibleJProgressBar. A new AccessibleJProgressBar instance is created if necessary. 



    Returns: an AccessibleJProgressBar that serves as the AccessibleContext of this JProgressBar 

*javax.swing.JProgressBar.getChangeListeners()*

public |javax.swing.event.ChangeListener|[] getChangeListeners()

Returns an array of all the ChangeListeners added to this progress bar with addChangeListener. 



    Returns: all of the ChangeListeners added or an empty array if no listeners have been added 

*javax.swing.JProgressBar.getMaximum()*

public int getMaximum()

Returns the progress bar'smaximumvalue from the BoundedRangeModel. 



    Returns: the progress bar's maximum value 

*javax.swing.JProgressBar.getMinimum()*

public int getMinimum()

Returns the progress bar'sminimumvalue from the BoundedRangeModel. 



    Returns: the progress bar's minimum value 

*javax.swing.JProgressBar.getModel()*

public |javax.swing.BoundedRangeModel| getModel()

Returns the data model used by this progress bar. 



    Returns: the BoundedRangeModel currently in use 

*javax.swing.JProgressBar.getOrientation()*

public int getOrientation()

ReturnsSwingConstants.VERTICALorSwingConstants.HORIZONTAL, depending on the orientation of the progress bar. The default 
orientation isSwingConstants.HORIZONTAL. 



    Returns: HORIZONTAL or VERTICAL 

*javax.swing.JProgressBar.getPercentComplete()*

public double getPercentComplete()

Returns the percent complete for the progress bar. Note that this number is between 0.0 and 1.0. 



    Returns: the percent complete for this progress bar 

*javax.swing.JProgressBar.getString()*

public |java.lang.String| getString()

Returns aStringrepresentation of the current progress. By default, this returns a simple percentageStringbased on the value 
returned fromgetPercentComplete. An example would be the "42%". You can change this by callingsetString. 



    Returns: the value of the progress string, or a simple percentage string if the progress string is {@code null} 

*javax.swing.JProgressBar.getUI()*

public |javax.swing.plaf.ProgressBarUI| getUI()

Returns the look-and-feel object that renders this component. 



    Returns: the ProgressBarUI object that renders this component 

*javax.swing.JProgressBar.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the look-and-feel class that renders this component. 



    Returns: the string "ProgressBarUI" 

*javax.swing.JProgressBar.getValue()*

public int getValue()

Returns the progress bar's currentvaluefrom the BoundedRangeModel. The value is always between the minimum and maximum values, 
inclusive. 



    Returns: the current value of the progress bar 

*javax.swing.JProgressBar.isBorderPainted()*

public boolean isBorderPainted()

Returns the borderPainted property. 



    Returns: the value of the borderPainted property 

*javax.swing.JProgressBar.isIndeterminate()*

public boolean isIndeterminate()

Returns the value of the indeterminate property. 



    Returns: the value of the indeterminate property 

*javax.swing.JProgressBar.isStringPainted()*

public boolean isStringPainted()

Returns the value of the stringPainted property. 



    Returns: the value of the stringPainted property 

*javax.swing.JProgressBar.paintBorder(Graphics)*

protected void paintBorder(java.awt.Graphics g)

Paints the progress bar's border if the borderPainted property is true. 


    g - the Graphics context within which to paint the border 

*javax.swing.JProgressBar.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JProgressBar. This method is intended to be used only for debugging purposes. The 
content and format of the returned string may vary between implementations. The returned string may be empty but may not be 
null. 



    Returns: a string representation of this JProgressBar 

*javax.swing.JProgressBar.removeChangeListener(ChangeListener)*

public void removeChangeListener(javax.swing.event.ChangeListener l)

Removes a ChangeListener from the progress bar. 


    l - the ChangeListener to remove 

*javax.swing.JProgressBar.setBorderPainted(boolean)*

public void setBorderPainted(boolean b)

Sets the borderPainted property, which is true if the progress bar should paint its border. The default value for this property 
is true. Some look and feels might not implement painted borders; they will ignore this property. 


    b - true if the progress bar should paint its border; otherwise, false 

*javax.swing.JProgressBar.setIndeterminate(boolean)*

public void setIndeterminate(boolean newValue)

Sets the indeterminate property of the progress bar, which determines whether the progress bar is in determinate or 
indeterminate mode. An indeterminate progress bar continuously displays animation indicating that an operation of unknown 
length is occurring. By default, this property is false. Some look and feels might not support indeterminate progress bars; 
they will ignore this property. 



See How to Monitor Progress for examples of using indeterminate progress bars. 


    newValue - true if the progress bar should change to indeterminate mode; false if it should revert to normal. 

*javax.swing.JProgressBar.setMaximum(int)*

public void setMaximum(int n)

Sets the progress bar's maximum value (stored in the progress bar's data model) to n. 

The underlying BoundedRangeModel handles any mathematical issues arising from assigning faulty values. See 
theBoundedRangeModeldocumentation for details. 

If the maximum value is different from the previous maximum, all change listeners are notified. 


    n - the new maximum 

*javax.swing.JProgressBar.setMinimum(int)*

public void setMinimum(int n)

Sets the progress bar's minimum value (stored in the progress bar's data model) to n. 

The data model (a BoundedRangeModel instance) handles any mathematical issues arising from assigning faulty values. See 
theBoundedRangeModeldocumentation for details. 

If the minimum value is different from the previous minimum, all change listeners are notified. 


    n - the new minimum 

*javax.swing.JProgressBar.setModel(BoundedRangeModel)*

public void setModel(javax.swing.BoundedRangeModel newModel)

Sets the data model used by the JProgressBar. Note that theBoundedRangeModel'sextentis not used, and is set to0. 


    newModel - the BoundedRangeModel to use 

*javax.swing.JProgressBar.setOrientation(int)*

public void setOrientation(int newOrientation)

Sets the progress bar's orientation to newOrientation, which must beSwingConstants.VERTICALorSwingConstants.HORIZONTAL. The 
default orientation isSwingConstants.HORIZONTAL. 


    newOrientation - HORIZONTAL or VERTICAL 

*javax.swing.JProgressBar.setString(String)*

public void setString(java.lang.String s)

Sets the value of the progress string. By default, this string is null, implying the built-in behavior of using a simple 
percent string. If you have provided a custom progress string and want to revert to the built-in behavior, set the string back 
to null. 

The progress string is painted only if the isStringPainted method returns true. 


    s - the value of the progress string 

*javax.swing.JProgressBar.setStringPainted(boolean)*

public void setStringPainted(boolean b)

Sets the value of the stringPainted property, which determines whether the progress bar should render a progress string. The 
default is false, meaning no string is painted. Some look and feels might not support progress strings or might support them 
only when the progress bar is in determinate mode. 


    b - true if the progress bar should render a string 

*javax.swing.JProgressBar.setUI(ProgressBarUI)*

public void setUI(javax.swing.plaf.ProgressBarUI ui)

Sets the look-and-feel object that renders this component. 


    ui - a ProgressBarUI object 

*javax.swing.JProgressBar.setValue(int)*

public void setValue(int n)

Sets the progress bar's current value ton. This method forwards the new value to the model. 

The data model (an instance ofBoundedRangeModel) handles any mathematical issues arising from assigning faulty values. See 
theBoundedRangeModeldocumentation for details. 

If the new value is different from the previous value, all change listeners are notified. 


    n - the new value 

*javax.swing.JProgressBar.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 




