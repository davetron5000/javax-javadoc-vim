*javax.swing.JSlider* *JSlider* A component that lets the user graphically select a value by sliding
 a knob within a bounded in

public class JSlider
  extends    |javax.swing.JComponent|
  implements |javax.swing.SwingConstants|
             |javax.accessibility.Accessible|

|javax.swing.JSlider_Description|
|javax.swing.JSlider_Fields|
|javax.swing.JSlider_Constructors|
|javax.swing.JSlider_Methods|

================================================================================================================================

*javax.swing.JSlider_Fields*
|javax.swing.event.ChangeEvent_javax.swing.JSlider.changeEvent|
|javax.swing.event.ChangeListener_javax.swing.JSlider.changeListener|
|int_javax.swing.JSlider.majorTickSpacing|
|int_javax.swing.JSlider.minorTickSpacing|
|int_javax.swing.JSlider.orientation|
|javax.swing.BoundedRangeModel_javax.swing.JSlider.sliderModel|
|boolean_javax.swing.JSlider.snapToTicks|

*javax.swing.JSlider_Constructors*
|javax.swing.JSlider()|Creates a horizontal slider with the range 0 to 100 and  an initial value of 50.
|javax.swing.JSlider(BoundedRangeModel)|Creates a horizontal slider using the specified  BoundedRangeModel.
|javax.swing.JSlider(int)|Creates a slider using the specified orientation with the   range0to100and an initial value of50.
|javax.swing.JSlider(int,int)|Creates a horizontal slider using the specified min and max  with an initial value equal to the a
|javax.swing.JSlider(int,int,int)|Creates a horizontal slider using the specified min, max and value.
|javax.swing.JSlider(int,int,int,int)|Creates a slider with the specified orientation and the  specified minimum, maximum, and 

*javax.swing.JSlider_Methods*
|javax.swing.JSlider.addChangeListener(ChangeListener)|Adds a ChangeListener to the slider.
|javax.swing.JSlider.createChangeListener()|Subclasses that want to handleChangeEvents  from the model differently  can overrid
|javax.swing.JSlider.createStandardLabels(int)|Creates aHashtableof numerical text labels, starting at the  slider minimum, and
|javax.swing.JSlider.createStandardLabels(int,int)|Creates aHashtableof numerical text labels, starting at the  starting point 
|javax.swing.JSlider.fireStateChanged()|Send aChangeEvent, whose source is thisJSlider, to  allChangeListeners that have regist
|javax.swing.JSlider.getAccessibleContext()|Gets the AccessibleContext associated with this JSlider.
|javax.swing.JSlider.getChangeListeners()|Returns an array of all the ChangeListeners added  to this JSlider with addChangeList
|javax.swing.JSlider.getExtent()|Returns the "extent" from the BoundedRangeModel.
|javax.swing.JSlider.getInverted()|Returns true if the value-range shown for the slider is reversed,
|javax.swing.JSlider.getLabelTable()|Returns the dictionary of what labels to draw at which values.
|javax.swing.JSlider.getMajorTickSpacing()|This method returns the major tick spacing.
|javax.swing.JSlider.getMaximum()|Returns the maximum value supported by the slider  from the BoundedRangeModel.
|javax.swing.JSlider.getMinimum()|Returns the minimum value supported by the slider  from the BoundedRangeModel.
|javax.swing.JSlider.getMinorTickSpacing()|This method returns the minor tick spacing.
|javax.swing.JSlider.getModel()|Returns theBoundedRangeModelthat handles the slider's three  fundamental properties: minimum, m
|javax.swing.JSlider.getOrientation()|Return this slider's vertical or horizontal orientation.
|javax.swing.JSlider.getPaintLabels()|Tells if labels are to be painted.
|javax.swing.JSlider.getPaintTicks()|Tells if tick marks are to be painted.
|javax.swing.JSlider.getPaintTrack()|Tells if the track (area the slider slides in) is to be painted.
|javax.swing.JSlider.getSnapToTicks()|Returns true if the knob (and the data value it represents)   resolve to the closest tick
|javax.swing.JSlider.getUI()|Gets the UI object which implements the Lfor this component.
|javax.swing.JSlider.getUIClassID()|Returns the name of the Lclass that renders this component.
|javax.swing.JSlider.getValue()|Returns the slider's current value  from theBoundedRangeModel.
|javax.swing.JSlider.getValueIsAdjusting()|Returns thevalueIsAdjustingproperty from the model.
|javax.swing.JSlider.paramString()|Returns a string representation of this JSlider.
|javax.swing.JSlider.removeChangeListener(ChangeListener)|Removes a ChangeListener from the slider.
|javax.swing.JSlider.setExtent(int)|Sets the size of the range "covered" by the knob.
|javax.swing.JSlider.setFont(Font)|
|javax.swing.JSlider.setInverted(boolean)|Specify true to reverse the value-range shown for the slider and false to  put the va
|javax.swing.JSlider.setLabelTable(Dictionary)|Used to specify what label will be drawn at any given value.
|javax.swing.JSlider.setMajorTickSpacing(int)|This method sets the major tick spacing.
|javax.swing.JSlider.setMaximum(int)|Sets the slider's maximum value tomaximum.
|javax.swing.JSlider.setMinimum(int)|Sets the slider's minimum value tominimum.
|javax.swing.JSlider.setMinorTickSpacing(int)|This method sets the minor tick spacing.
|javax.swing.JSlider.setModel(BoundedRangeModel)|Sets theBoundedRangeModelthat handles the slider's three  fundamental properti
|javax.swing.JSlider.setOrientation(int)|Set the slider's orientation to eitherSwingConstants.VERTICALorSwingConstants.HORIZONT
|javax.swing.JSlider.setPaintLabels(boolean)|Determines whether labels are painted on the slider.
|javax.swing.JSlider.setPaintTicks(boolean)|Determines whether tick marks are painted on the slider.
|javax.swing.JSlider.setPaintTrack(boolean)|Determines whether the track is painted on the slider.
|javax.swing.JSlider.setSnapToTicks(boolean)|Specifying true makes the knob (and the data value it represents)   resolve to the
|javax.swing.JSlider.setUI(SliderUI)|Sets the UI object which implements the Lfor this component.
|javax.swing.JSlider.setValue(int)|Sets the slider's current value ton.
|javax.swing.JSlider.setValueIsAdjusting(boolean)|Sets the model'svalueIsAdjustingproperty.
|javax.swing.JSlider.updateLabelUIs()|Updates the UIs for the labels in the label table by callingupdateUIon each label.
|javax.swing.JSlider.updateUI()|Resets the UI property to a value from the current look and feel.

*javax.swing.JSlider_Description*

A component that lets the user graphically select a value by sliding a knob within a bounded interval. 

The slider can show both major tick marks, and minor tick marks between the major ones. The number of values between the tick 
marks is controlled with setMajorTickSpacing and setMinorTickSpacing. Painting of tick marks is controlled bysetPaintTicks. 

Sliders can also print text labels at regular intervals (or at arbitrary locations) along the slider track. Painting of labels 
is controlled bysetLabelTableandsetPaintLabels. 

For further information and examples see How to Use Sliders, a section in The Java Tutorial. 

Warning: Swing is not thread safe. For more information see Swing's Threading Policy. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support 
is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for 
long term storage of all JavaBeansTM has been added to the java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.event.ChangeEvent_javax.swing.JSlider.changeEvent*

Only one ChangeEvent is needed per slider instance since the event's only (read-only) state is the source property. The source 
of events generated here is always "this". The event is lazily created the first time that an event notification is fired. 


*javax.swing.event.ChangeListener_javax.swing.JSlider.changeListener*

The changeListener (no suffix) is the listener we add to the slider's model. This listener is initialized to 
theChangeListenerreturned fromcreateChangeListener, which by default just forwards events toChangeListeners (if any) added 
directly to the slider. 


*int_javax.swing.JSlider.majorTickSpacing*

The number of values between the major tick marks -- the larger marks that break up the minor tick marks. 


*int_javax.swing.JSlider.minorTickSpacing*

The number of values between the minor tick marks -- the smaller marks that occur between the major tick marks. 


*int_javax.swing.JSlider.orientation*

Whether the slider is horizontal or vertical The default is horizontal. 


*javax.swing.BoundedRangeModel_javax.swing.JSlider.sliderModel*

The data model that handles the numeric maximum value, minimum value, and current-position value for the slider. 


*boolean_javax.swing.JSlider.snapToTicks*

If true, the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the 
knob. The default is false. 



*javax.swing.JSlider()*

public JSlider()

Creates a horizontal slider with the range 0 to 100 and an initial value of 50. 


*javax.swing.JSlider(BoundedRangeModel)*

public JSlider(javax.swing.BoundedRangeModel brm)

Creates a horizontal slider using the specified BoundedRangeModel. 


*javax.swing.JSlider(int)*

public JSlider(int orientation)

Creates a slider using the specified orientation with the range0to100and an initial value of50. The orientation can be either 
SwingConstants.VERTICAL or SwingConstants.HORIZONTAL. 

    orientation - the orientation of the slider 

*javax.swing.JSlider(int,int)*

public JSlider(
  int min,
  int max)

Creates a horizontal slider using the specified min and max with an initial value equal to the average of the min plus max. 

The BoundedRangeModel that holds the slider's data handles any issues that may arise from improperly setting the minimum and 
maximum values on the slider. See theBoundedRangeModeldocumentation for details. 

    min - the minimum value of the slider 
    max - the maximum value of the slider 

*javax.swing.JSlider(int,int,int)*

public JSlider(
  int min,
  int max,
  int value)

Creates a horizontal slider using the specified min, max and value. 

The BoundedRangeModel that holds the slider's data handles any issues that may arise from improperly setting the minimum, 
initial, and maximum values on the slider. See theBoundedRangeModeldocumentation for details. 

    min - the minimum value of the slider 
    max - the maximum value of the slider 
    value - the initial value of the slider 

*javax.swing.JSlider(int,int,int,int)*

public JSlider(
  int orientation,
  int min,
  int max,
  int value)

Creates a slider with the specified orientation and the specified minimum, maximum, and initial values. The orientation can be 
either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL. 

The BoundedRangeModel that holds the slider's data handles any issues that may arise from improperly setting the minimum, 
initial, and maximum values on the slider. See theBoundedRangeModeldocumentation for details. 

    orientation - the orientation of the slider 
    min - the minimum value of the slider 
    max - the maximum value of the slider 
    value - the initial value of the slider 

*javax.swing.JSlider.addChangeListener(ChangeListener)*

public void addChangeListener(javax.swing.event.ChangeListener l)

Adds a ChangeListener to the slider. 


    l - the ChangeListener to add 

*javax.swing.JSlider.createChangeListener()*

protected |javax.swing.event.ChangeListener| createChangeListener()

Subclasses that want to handleChangeEvents from the model differently can override this to return an instance of a custom 
ChangeListener implementation. The defaultChangeListenersimply calls thefireStateChangedmethod to forwardChangeEvents to 
theChangeListeners that have been added directly to the slider. 



*javax.swing.JSlider.createStandardLabels(int)*

public |java.util.Hashtable| createStandardLabels(int increment)

Creates aHashtableof numerical text labels, starting at the slider minimum, and using the increment specified. For example, if 
you call createStandardLabels( 10 ) and the slider minimum is zero, then labels will be created for the values 0, 10, 20, 30, 
and so on. 

For the labels to be drawn on the slider, the returnedHashtablemust be passed intosetLabelTable, andsetPaintLabelsmust be set 
totrue. 

For further details on the makeup of the returnedHashtable, see thesetLabelTabledocumentation. 


    increment - distance between labels in the generated hashtable 

    Returns: a new {@code Hashtable} of labels 

*javax.swing.JSlider.createStandardLabels(int,int)*

public |java.util.Hashtable| createStandardLabels(
  int increment,
  int start)

Creates aHashtableof numerical text labels, starting at the starting point specified, and using the increment specified. For 
example, if you call createStandardLabels( 10, 2 ), then labels will be created for the values 2, 12, 22, 32, and so on. 

For the labels to be drawn on the slider, the returnedHashtablemust be passed intosetLabelTable, andsetPaintLabelsmust be set 
totrue. 

For further details on the makeup of the returnedHashtable, see thesetLabelTabledocumentation. 


    increment - distance between labels in the generated hashtable 
    start - value at which the labels will begin 

    Returns: a new {@code Hashtable} of labels 

*javax.swing.JSlider.fireStateChanged()*

protected void fireStateChanged()

Send aChangeEvent, whose source is thisJSlider, to allChangeListeners that have registered interest inChangeEvents. This method 
is called each time aChangeEventis received from the model. 

The event instance is created if necessary, and stored inchangeEvent. 



*javax.swing.JSlider.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JSlider. For sliders, the AccessibleContext takes the form of an 
AccessibleJSlider. A new AccessibleJSlider instance is created if necessary. 



    Returns: an AccessibleJSlider that serves as the AccessibleContext of this JSlider 

*javax.swing.JSlider.getChangeListeners()*

public |javax.swing.event.ChangeListener|[] getChangeListeners()

Returns an array of all the ChangeListeners added to this JSlider with addChangeListener(). 



    Returns: all of the ChangeListeners added or an empty array if no listeners have been added 

*javax.swing.JSlider.getExtent()*

public int getExtent()

Returns the "extent" from the BoundedRangeModel. This respresents the range of values "covered" by the knob. 



    Returns: an int representing the extent 

*javax.swing.JSlider.getInverted()*

public boolean getInverted()

Returns true if the value-range shown for the slider is reversed, 



    Returns: true if the slider values are reversed from their normal order 

*javax.swing.JSlider.getLabelTable()*

public |java.util.Dictionary| getLabelTable()

Returns the dictionary of what labels to draw at which values. 



    Returns: the Dictionary containing labels and where to draw them 

*javax.swing.JSlider.getMajorTickSpacing()*

public int getMajorTickSpacing()

This method returns the major tick spacing. The number that is returned represents the distance, measured in values, between 
each major tick mark. If you have a slider with a range from 0 to 50 and the major tick spacing is set to 10, you will get 
major ticks next to the following values: 0, 10, 20, 30, 40, 50. 



    Returns: the number of values between major ticks 

*javax.swing.JSlider.getMaximum()*

public int getMaximum()

Returns the maximum value supported by the slider from the BoundedRangeModel. 



    Returns: the value of the model's maximum property 

*javax.swing.JSlider.getMinimum()*

public int getMinimum()

Returns the minimum value supported by the slider from the BoundedRangeModel. 



    Returns: the value of the model's minimum property 

*javax.swing.JSlider.getMinorTickSpacing()*

public int getMinorTickSpacing()

This method returns the minor tick spacing. The number that is returned represents the distance, measured in values, between 
each minor tick mark. If you have a slider with a range from 0 to 50 and the minor tick spacing is set to 10, you will get 
minor ticks next to the following values: 0, 10, 20, 30, 40, 50. 



    Returns: the number of values between minor ticks 

*javax.swing.JSlider.getModel()*

public |javax.swing.BoundedRangeModel| getModel()

Returns theBoundedRangeModelthat handles the slider's three fundamental properties: minimum, maximum, value. 



    Returns: the data model for this component 

*javax.swing.JSlider.getOrientation()*

public int getOrientation()

Return this slider's vertical or horizontal orientation. 



    Returns: {@code SwingConstants.VERTICAL} or {@code SwingConstants.HORIZONTAL} 

*javax.swing.JSlider.getPaintLabels()*

public boolean getPaintLabels()

Tells if labels are to be painted. 



    Returns: true if labels are painted, else false 

*javax.swing.JSlider.getPaintTicks()*

public boolean getPaintTicks()

Tells if tick marks are to be painted. 



    Returns: true if tick marks are painted, else false 

*javax.swing.JSlider.getPaintTrack()*

public boolean getPaintTrack()

Tells if the track (area the slider slides in) is to be painted. 



    Returns: true if track is painted, else false 

*javax.swing.JSlider.getSnapToTicks()*

public boolean getSnapToTicks()

Returns true if the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned 
the knob. 



    Returns: true if the value snaps to the nearest tick mark, else false 

*javax.swing.JSlider.getUI()*

public |javax.swing.plaf.SliderUI| getUI()

Gets the UI object which implements the Lfor this component. 



    Returns: the SliderUI object that implements the Slider L&F 

*javax.swing.JSlider.getUIClassID()*

public |java.lang.String| getUIClassID()

Returns the name of the Lclass that renders this component. 



    Returns: 

*javax.swing.JSlider.getValue()*

public int getValue()

Returns the slider's current value from theBoundedRangeModel. 



    Returns: the current value of the slider 

*javax.swing.JSlider.getValueIsAdjusting()*

public boolean getValueIsAdjusting()

Returns thevalueIsAdjustingproperty from the model. For details on how this is used, see thesetValueIsAdjustingdocumentation. 



    Returns: the value of the model's {@code valueIsAdjusting} property 

*javax.swing.JSlider.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JSlider. This method is intended to be used only for debugging purposes, and the 
content and format of the returned string may vary between implementations. The returned string may be empty but may not be 
null. 



    Returns: a string representation of this JSlider. 

*javax.swing.JSlider.removeChangeListener(ChangeListener)*

public void removeChangeListener(javax.swing.event.ChangeListener l)

Removes a ChangeListener from the slider. 


    l - the ChangeListener to remove 

*javax.swing.JSlider.setExtent(int)*

public void setExtent(int extent)

Sets the size of the range "covered" by the knob. Most look and feel implementations will change the value by this amount if 
the user clicks on either side of the knob. This method just forwards the new extent value to the model. 

The data model (an instance ofBoundedRangeModel) handles any mathematical issues arising from assigning faulty values. See 
theBoundedRangeModeldocumentation for details. 

If the new extent value is different from the previous extent value, all change listeners are notified. 


    extent - the new extent 

*javax.swing.JSlider.setFont(Font)*

public void setFont(java.awt.Font font)





*javax.swing.JSlider.setInverted(boolean)*

public void setInverted(boolean b)

Specify true to reverse the value-range shown for the slider and false to put the value range in the normal order. The order 
depends on the slider's ComponentOrientation property. Normal (non-inverted) horizontal sliders with a ComponentOrientation 
value of LEFT_TO_RIGHT have their maximum on the right. Normal horizontal sliders with a ComponentOrientation value of 
RIGHT_TO_LEFT have their maximum on the left. Normal vertical sliders have their maximum on the top. These labels are reversed 
when the slider is inverted. 

By default, the value of this property isfalse. 


    b - true to reverse the slider values from their normal order 

*javax.swing.JSlider.setLabelTable(Dictionary)*

public void setLabelTable(java.util.Dictionary labels)

Used to specify what label will be drawn at any given value. The key-value pairs are of this format: { Integer value, 
java.swing.JComponent label }. 

An easy way to generate a standard table of value labels is by using thecreateStandardLabelsmethod. 

Once the labels have been set, this method calls (|javax.swing.JSlider|) . Note that the labels are only painted if 
thepaintLabelsproperty istrue. 


    labels - new {@code Dictionary} of labels, or {@code null} to remove all labels 

*javax.swing.JSlider.setMajorTickSpacing(int)*

public void setMajorTickSpacing(int n)

This method sets the major tick spacing. The number that is passed in represents the distance, measured in values, between each 
major tick mark. If you have a slider with a range from 0 to 50 and the major tick spacing is set to 10, you will get major 
ticks next to the following values: 0, 10, 20, 30, 40, 50. 

In order for major ticks to be painted,setPaintTicksmust be set totrue. 

This method will also set up a label table for you. If there is not already a label table, and the major tick spacing is> 0, 
andgetPaintLabelsreturnstrue, a standard label table will be generated (by callingcreateStandardLabels) with labels at the 
major tick marks. For the example above, you would get text labels: "0", "10", "20", "30", "40", "50". The label table is then 
set on the slider by callingsetLabelTable. 


    n - new value for the {@code majorTickSpacing} property 

*javax.swing.JSlider.setMaximum(int)*

public void setMaximum(int maximum)

Sets the slider's maximum value tomaximum. This method forwards the new maximum value to the model. 

The data model (an instance ofBoundedRangeModel) handles any mathematical issues arising from assigning faulty values. See 
theBoundedRangeModeldocumentation for details. 

If the new maximum value is different from the previous maximum value, all change listeners are notified. 


    n - the new maximum 

*javax.swing.JSlider.setMinimum(int)*

public void setMinimum(int minimum)

Sets the slider's minimum value tominimum. This method forwards the new minimum value to the model. 

The data model (an instance ofBoundedRangeModel) handles any mathematical issues arising from assigning faulty values. See 
theBoundedRangeModeldocumentation for details. 

If the new minimum value is different from the previous minimum value, all change listeners are notified. 


    n - the new minimum 

*javax.swing.JSlider.setMinorTickSpacing(int)*

public void setMinorTickSpacing(int n)

This method sets the minor tick spacing. The number that is passed in represents the distance, measured in values, between each 
minor tick mark. If you have a slider with a range from 0 to 50 and the minor tick spacing is set to 10, you will get minor 
ticks next to the following values: 0, 10, 20, 30, 40, 50. 

In order for minor ticks to be painted,setPaintTicksmust be set totrue. 


    n - new value for the {@code minorTickSpacing} property 

*javax.swing.JSlider.setModel(BoundedRangeModel)*

public void setModel(javax.swing.BoundedRangeModel newModel)

Sets theBoundedRangeModelthat handles the slider's three fundamental properties: minimum, maximum, value. 

Attempts to pass anullmodel to this method result in undefined behavior, and, most likely, exceptions. 


    newModel - the new, {@code non-null} BoundedRangeModel to use 

*javax.swing.JSlider.setOrientation(int)*

public void setOrientation(int orientation)

Set the slider's orientation to eitherSwingConstants.VERTICALorSwingConstants.HORIZONTAL. 


    orientation - {@code HORIZONTAL} or {@code VERTICAL} 

*javax.swing.JSlider.setPaintLabels(boolean)*

public void setPaintLabels(boolean b)

Determines whether labels are painted on the slider. 

This method will also set up a label table for you. If there is not already a label table, and the major tick spacing is> 0, a 
standard label table will be generated (by callingcreateStandardLabels) with labels at the major tick marks. The label table is 
then set on the slider by callingsetLabelTable. 

By default, this property isfalse. 


    b - whether or not to paint labels 

*javax.swing.JSlider.setPaintTicks(boolean)*

public void setPaintTicks(boolean b)

Determines whether tick marks are painted on the slider. By default, this property isfalse. 


    b - whether or not tick marks should be painted 

*javax.swing.JSlider.setPaintTrack(boolean)*

public void setPaintTrack(boolean b)

Determines whether the track is painted on the slider. By default, this property istrue. 


    b - whether or not to paint the slider track 

*javax.swing.JSlider.setSnapToTicks(boolean)*

public void setSnapToTicks(boolean b)

Specifying true makes the knob (and the data value it represents) resolve to the closest tick mark next to where the user 
positioned the knob. By default, this property isfalse. 


    b - true to snap the knob to the nearest tick mark 

*javax.swing.JSlider.setUI(SliderUI)*

public void setUI(javax.swing.plaf.SliderUI ui)

Sets the UI object which implements the Lfor this component. 


    ui - the SliderUI Lobject 

*javax.swing.JSlider.setValue(int)*

public void setValue(int n)

Sets the slider's current value ton. This method forwards the new value to the model. 

The data model (an instance ofBoundedRangeModel) handles any mathematical issues arising from assigning faulty values. See 
theBoundedRangeModeldocumentation for details. 

If the new value is different from the previous value, all change listeners are notified. 


    n - the new value 

*javax.swing.JSlider.setValueIsAdjusting(boolean)*

public void setValueIsAdjusting(boolean b)

Sets the model'svalueIsAdjustingproperty. Slider look and feel implementations should set this property totruewhen a knob drag 
begins, and tofalsewhen the drag ends. The slider model will not generateChangeEvents whilevalueIsAdjustingistrue. 


    b - the new value for the {@code valueIsAdjusting} property 

*javax.swing.JSlider.updateLabelUIs()*

protected void updateLabelUIs()

Updates the UIs for the labels in the label table by callingupdateUIon each label. The UIs are updated from the current look 
and feel. The labels are also set to their preferred size. 



*javax.swing.JSlider.updateUI()*

public void updateUI()

Resets the UI property to a value from the current look and feel. 




