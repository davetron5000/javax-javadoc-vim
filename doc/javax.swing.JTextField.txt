*javax.swing.JTextField* *JTextField* JTextField is a lightweight component that allows the editing 
 of a single line of text.

public class JTextField
  extends    |javax.swing.text.JTextComponent|
  implements |javax.swing.SwingConstants|

|javax.swing.JTextField_Description|
|javax.swing.JTextField_Fields|
|javax.swing.JTextField_Constructors|
|javax.swing.JTextField_Methods|

================================================================================================================================

*javax.swing.JTextField_Fields*
|java.lang.String_javax.swing.JTextField.notifyAction|

*javax.swing.JTextField_Constructors*
|javax.swing.JTextField()|Constructs a new TextField.
|javax.swing.JTextField(Document,String,int)|Constructs a new JTextField that uses the given text  storage model and the given 
|javax.swing.JTextField(int)|Constructs a new empty TextField with the specified  number of columns.
|javax.swing.JTextField(String)|Constructs a new TextField initialized with the  specified text.
|javax.swing.JTextField(String,int)|Constructs a new TextField initialized with the  specified text and columns.

*javax.swing.JTextField_Methods*
|javax.swing.JTextField.actionPropertyChanged(Action,String)|Updates the textfield's state in response to property changes in  
|javax.swing.JTextField.addActionListener(ActionListener)|Adds the specified action listener to receive   action events from th
|javax.swing.JTextField.configurePropertiesFromAction(Action)|Sets the properties on this textfield to match those in the speci
|javax.swing.JTextField.createActionPropertyChangeListener(Action)|Creates and returns a PropertyChangeListener that is  respon
|javax.swing.JTextField.createDefaultModel()|Creates the default implementation of the model  to be used at construction if one
|javax.swing.JTextField.fireActionPerformed()|Notifies all listeners that have registered interest for  notification on this ev
|javax.swing.JTextField.getAccessibleContext()|Gets the AccessibleContext associated with this   JTextField.
|javax.swing.JTextField.getAction()|Returns the currently set Action for this  ActionEvent source, or null  if no Action is set
|javax.swing.JTextField.getActionListeners()|Returns an array of all the ActionListeners added  to this JTextField with addActi
|javax.swing.JTextField.getActions()|Fetches the command list for the editor.
|javax.swing.JTextField.getColumns()|Returns the number of columns in this TextField.
|javax.swing.JTextField.getColumnWidth()|Returns the column width.
|javax.swing.JTextField.getHorizontalAlignment()|Returns the horizontal alignment of the text.
|javax.swing.JTextField.getHorizontalVisibility()|Gets the visibility of the text field.
|javax.swing.JTextField.getPreferredSize()|Returns the preferred size Dimensions needed for this   TextField.
|javax.swing.JTextField.getScrollOffset()|Gets the scroll offset, in pixels.
|javax.swing.JTextField.getUIClassID()|Gets the class ID for a UI.
|javax.swing.JTextField.isValidateRoot()|Calls to revalidate that come from within the  textfield itself will  be handled by va
|javax.swing.JTextField.paramString()|Returns a string representation of this JTextField.
|javax.swing.JTextField.postActionEvent()|Processes action events occurring on this textfield by  dispatching them to any regis
|javax.swing.JTextField.removeActionListener(ActionListener)|Removes the specified action listener so that it no longer  receiv
|javax.swing.JTextField.scrollRectToVisible(Rectangle)|Scrolls the field left or right.
|javax.swing.JTextField.setAction(Action)|Sets the Action for the ActionEvent source.
|javax.swing.JTextField.setActionCommand(String)|Sets the command string used for action events.
|javax.swing.JTextField.setColumns(int)|Sets the number of columns in this TextField,  and then invalidate the layout.
|javax.swing.JTextField.setDocument(Document)|Associates the editor with a text document.
|javax.swing.JTextField.setFont(Font)|Sets the current font.
|javax.swing.JTextField.setHorizontalAlignment(int)|Sets the horizontal alignment of the text.
|javax.swing.JTextField.setScrollOffset(int)|Sets the scroll offset, in pixels.

*javax.swing.JTextField_Description*

JTextField is a lightweight component that allows the editing of a single line of text. For information on and examples of 
using text fields, see How to Use Text Fields in The Java Tutorial. 

JTextField is intended to be source-compatible with java.awt.TextField where it is reasonable to do so. This component has 
capabilities not found in the java.awt.TextField class. The superclass should be consulted for additional capabilities. 

JTextField has a method to establish the string used as the command string for the action event that gets fired. The 
java.awt.TextField used the text of the field as the command string for the ActionEvent. JTextField will use the command string 
set with the setActionCommand method if not null, otherwise it will use the text of the field as a compatibility with 
java.awt.TextField. 

The method setEchoChar and getEchoChar are not provided directly to avoid a new implementation of a pluggable look-and-feel 
inadvertently exposing password characters. To provide password-like services a separate class JPasswordField extends 
JTextField to provide this service with an independently pluggable look-and-feel. 

The java.awt.TextField could be monitored for changes by adding a TextListener for TextEvent's. In the JTextComponent based 
components, changes are broadcasted from the model via a DocumentEvent to DocumentListeners. The DocumentEvent gives the 
location of the change and the kind of change if desired. The code fragment might look something like: 

DocumentListener myListener = ??; JTextField myArea = ??; myArea.getDocument().addDocumentListener(myListener); 

The horizontal alignment of JTextField can be set to be left justified, leading justified, centered, right justified or 
trailing justified. Right/trailing justification is useful if the required size of the field text is smaller than the size 
allocated to it. This is determined by the setHorizontalAlignment and getHorizontalAlignment methods. The default is to be 
leading justified. 

How the text field consumes VK_ENTER events depends on whether the text field has any action listeners. If so, then VK_ENTER 
results in the listeners getting an ActionEvent, and the VK_ENTER event is consumed. This is compatible with how AWT text 
fields handle VK_ENTER events. If the text field has no action listeners, then as of v 1.3 the VK_ENTER event is not consumed. 
Instead, the bindings of ancestor components are processed, which enables the default button feature of JFC/Swing to work. 

Customized fields can easily be created by extending the model and changing the default model provided. For example, the 
following piece of code will create a field that holds only upper case characters. It will work even if text is pasted into 
from the clipboard or it is altered via programmatic changes. 

public class UpperCaseField extends JTextField { 

public UpperCaseField(int cols) { super(cols); } 

protected Document createDefaultModel() { return new UpperCaseDocument(); } 

static class UpperCaseDocument extends PlainDocument { 

public void insertString(int offs, String str, AttributeSet a) throws BadLocationException { 

if (str == null) { return; } char[] upper = str.toCharArray(); for (int i = 0; i 

Warning: Swing is not thread safe. For more information see Swing's Threading Policy. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support 
is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for 
long term storage of all JavaBeansTM has been added to the java.beans package. Please see (|java.beans.XMLEncoder|) . 



*java.lang.String_javax.swing.JTextField.notifyAction*

Name of the action to send notification that the contents of the field have been accepted. Typically this is bound to a 
carriage-return. 



*javax.swing.JTextField()*

public JTextField()

Constructs a new TextField. A default model is created, the initial string is null, and the number of columns is set to 0. 


*javax.swing.JTextField(Document,String,int)*

public JTextField(
  javax.swing.text.Document doc,
  java.lang.String text,
  int columns)

Constructs a new JTextField that uses the given text storage model and the given number of columns. This is the constructor 
through which the other constructors feed. If the document is null, a default model is created. 

    doc - the text storage to use; if this is null, a default will be provided by calling the createDefaultModel method 
    text - the initial string to display, or null 
    columns - the number of columns to use to calculate the preferred width >= 0; if columns is set to zero, the preferred width will be 
       whatever naturally results from the component implementation 

*javax.swing.JTextField(int)*

public JTextField(int columns)

Constructs a new empty TextField with the specified number of columns. A default model is created and the initial string is set 
to null. 

    columns - the number of columns to use to calculate the preferred width; if columns is set to zero, the preferred width will be whatever 
       naturally results from the component implementation 

*javax.swing.JTextField(String)*

public JTextField(java.lang.String text)

Constructs a new TextField initialized with the specified text. A default model is created and the number of columns is 0. 

    text - the text to be displayed, or null 

*javax.swing.JTextField(String,int)*

public JTextField(
  java.lang.String text,
  int columns)

Constructs a new TextField initialized with the specified text and columns. A default model is created. 

    text - the text to be displayed, or null 
    columns - the number of columns to use to calculate the preferred width; if columns is set to zero, the preferred width will be whatever 
       naturally results from the component implementation 

*javax.swing.JTextField.actionPropertyChanged(Action,String)*

protected void actionPropertyChanged(
  javax.swing.Action action,
  java.lang.String propertyName)

Updates the textfield's state in response to property changes in associated action. This method is invoked from 
thePropertyChangeListenerreturned fromcreateActionPropertyChangeListener. Subclasses do not normally need to invoke this. 
Subclasses that support additionalActionproperties should override this andconfigurePropertiesFromAction. 

Refer to the table at Swing Components Supporting Action for a list of the properties this method sets. 


    action - the Action associated with this textfield 
    propertyName - the name of the property that changed 

*javax.swing.JTextField.addActionListener(ActionListener)*

public synchronized void addActionListener(java.awt.event.ActionListener l)

Adds the specified action listener to receive action events from this textfield. 


    l - the action listener to be added 

*javax.swing.JTextField.configurePropertiesFromAction(Action)*

protected void configurePropertiesFromAction(javax.swing.Action a)

Sets the properties on this textfield to match those in the specified Action. Refer to Swing Components Supporting Action for 
more details as to which properties this sets. 


    a - the Action from which to get the properties, or null 

*javax.swing.JTextField.createActionPropertyChangeListener(Action)*

protected |java.beans.PropertyChangeListener| createActionPropertyChangeListener(javax.swing.Action a)

Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and 
updating the appropriate properties. 

Warning: If you subclass this do not create an anonymous inner class. If you do the lifetime of the textfield will be tied to 
that of the Action. 


    a - the textfield's action 

*javax.swing.JTextField.createDefaultModel()*

protected |javax.swing.text.Document| createDefaultModel()

Creates the default implementation of the model to be used at construction if one isn't explicitly given. An instance of 
PlainDocument is returned. 



    Returns: the default model implementation 

*javax.swing.JTextField.fireActionPerformed()*

protected void fireActionPerformed()

Notifies all listeners that have registered interest for notification on this event type. The event instance is lazily created. 
The listener list is processed in last to first order. 



*javax.swing.JTextField.getAccessibleContext()*

public |javax.accessibility.AccessibleContext| getAccessibleContext()

Gets the AccessibleContext associated with this JTextField. For JTextFields, the AccessibleContext takes the form of an 
AccessibleJTextField. A new AccessibleJTextField instance is created if necessary. 



    Returns: an AccessibleJTextField that serves as the AccessibleContext of this JTextField 

*javax.swing.JTextField.getAction()*

public |javax.swing.Action| getAction()

Returns the currently set Action for this ActionEvent source, or null if no Action is set. 



    Returns: the Action for this ActionEvent source, or null 

*javax.swing.JTextField.getActionListeners()*

public synchronized |java.awt.event.ActionListener|[] getActionListeners()

Returns an array of all the ActionListeners added to this JTextField with addActionListener(). 



    Returns: all of the ActionListeners added or an empty array if no listeners have been added 

*javax.swing.JTextField.getActions()*

public |javax.swing.Action|[] getActions()

Fetches the command list for the editor. This is the list of commands supported by the plugged-in UI augmented by the 
collection of commands that the editor itself supports. These are useful for binding to events, such as in a keymap. 



    Returns: the command list 

*javax.swing.JTextField.getColumns()*

public int getColumns()

Returns the number of columns in this TextField. 



    Returns: the number of columns >= 0 

*javax.swing.JTextField.getColumnWidth()*

protected int getColumnWidth()

Returns the column width. The meaning of what a column is can be considered a fairly weak notion for some fonts. This method is 
used to define the width of a column. By default this is defined to be the width of the character m for the font used. This 
method can be redefined to be some alternative amount 



    Returns: the column width >= 1 

*javax.swing.JTextField.getHorizontalAlignment()*

public int getHorizontalAlignment()

Returns the horizontal alignment of the text. Valid keys are: 

JTextField.LEFT JTextField.CENTER JTextField.RIGHT JTextField.LEADING JTextField.TRAILING 



    Returns: the horizontal alignment 

*javax.swing.JTextField.getHorizontalVisibility()*

public |javax.swing.BoundedRangeModel| getHorizontalVisibility()

Gets the visibility of the text field. This can be adjusted to change the location of the visible area if the size of the field 
is greater than the area that was allocated to the field. 

The fields look-and-feel implementation manages the values of the minimum, maximum, and extent properties on the 
BoundedRangeModel. 



    Returns: the visibility 

*javax.swing.JTextField.getPreferredSize()*

public |java.awt.Dimension| getPreferredSize()

Returns the preferred size Dimensions needed for this TextField. If a non-zero number of columns has been set, the width is set 
to the columns multiplied by the column width. 



    Returns: the dimension of this textfield 

*javax.swing.JTextField.getScrollOffset()*

public int getScrollOffset()

Gets the scroll offset, in pixels. 



    Returns: the offset >= 0 

*javax.swing.JTextField.getUIClassID()*

public |java.lang.String| getUIClassID()

Gets the class ID for a UI. 



    Returns: the string "TextFieldUI" 

*javax.swing.JTextField.isValidateRoot()*

public boolean isValidateRoot()

Calls to revalidate that come from within the textfield itself will be handled by validating the textfield, unless the 
textfield is contained within a JViewport, in which case this returns false. 



    Returns: if the parent of this textfield is a JViewPort return false, otherwise return true 

*javax.swing.JTextField.paramString()*

protected |java.lang.String| paramString()

Returns a string representation of this JTextField. This method is intended to be used only for debugging purposes, and the 
content and format of the returned string may vary between implementations. The returned string may be empty but may not be 
null. 



    Returns: a string representation of this JTextField 

*javax.swing.JTextField.postActionEvent()*

public void postActionEvent()

Processes action events occurring on this textfield by dispatching them to any registered ActionListener objects. This is 
normally called by the controller registered with textfield. 



*javax.swing.JTextField.removeActionListener(ActionListener)*

public synchronized void removeActionListener(java.awt.event.ActionListener l)

Removes the specified action listener so that it no longer receives action events from this textfield. 


    l - the action listener to be removed 

*javax.swing.JTextField.scrollRectToVisible(Rectangle)*

public void scrollRectToVisible(java.awt.Rectangle r)

Scrolls the field left or right. 


    r - the region to scroll 

*javax.swing.JTextField.setAction(Action)*

public void setAction(javax.swing.Action a)

Sets the Action for the ActionEvent source. The new Action replaces any previously set Action but does not affect 
ActionListeners independently added with addActionListener. If the Action is already a registered ActionListener for the 
ActionEvent source, it is not re-registered. 

Setting the Action results in immediately changing all the properties described in Swing Components Supporting Action. 
Subsequently, the textfield's properties are automatically updated as the Action's properties change. 

This method uses three other methods to set and help track the Action's property values. It uses the 
configurePropertiesFromAction method to immediately change the textfield's properties. To track changes in the Action's 
property values, this method registers the PropertyChangeListener returned by createActionPropertyChangeListener. The 
defaultPropertyChangeListenerinvokes theactionPropertyChangedmethod when a property in theActionchanges. 


    a - the Action for the JTextField, or null 

*javax.swing.JTextField.setActionCommand(String)*

public void setActionCommand(java.lang.String command)

Sets the command string used for action events. 


    command - the command string 

*javax.swing.JTextField.setColumns(int)*

public void setColumns(int columns)

Sets the number of columns in this TextField, and then invalidate the layout. 


    columns - the number of columns >= 0 

*javax.swing.JTextField.setDocument(Document)*

public void setDocument(javax.swing.text.Document doc)

Associates the editor with a text document. The currently registered factory is used to build a view for the document, which 
gets displayed by the editor after revalidation. A PropertyChange event ("document") is propagated to each listener. 


    doc - the document to display/edit 

*javax.swing.JTextField.setFont(Font)*

public void setFont(java.awt.Font f)

Sets the current font. This removes cached row height and column width so the new font will be reflected. revalidate is called 
after setting the font. 


    f - the new font 

*javax.swing.JTextField.setHorizontalAlignment(int)*

public void setHorizontalAlignment(int alignment)

Sets the horizontal alignment of the text. Valid keys are: 

JTextField.LEFT JTextField.CENTER JTextField.RIGHT JTextField.LEADING JTextField.TRAILING 

invalidate and repaint are called when the alignment is set, and a PropertyChange event ("horizontalAlignment") is fired. 


    alignment - the alignment 

*javax.swing.JTextField.setScrollOffset(int)*

public void setScrollOffset(int scrollOffset)

Sets the scroll offset, in pixels. 


    scrollOffset - the offset >= 0 


