*javax.swing.ListSelectionModel* *ListSelectionModel* This interface represents the current state of the 
 selection for any of 

public interface interface ListSelectionModel


|javax.swing.ListSelectionModel_Description|
|javax.swing.ListSelectionModel_Fields|
|javax.swing.ListSelectionModel_Constructors|
|javax.swing.ListSelectionModel_Methods|

================================================================================================================================

*javax.swing.ListSelectionModel_Fields*
|int_javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION|
|int_javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION|
|int_javax.swing.ListSelectionModel.SINGLE_SELECTION|

*javax.swing.ListSelectionModel_Methods*
|javax.swing.ListSelectionModel.addListSelectionListener(ListSelectionListener)|Add a listener to the list that's notified each
|javax.swing.ListSelectionModel.addSelectionInterval(int,int)|Changes the selection to be the set union of the current selectio
|javax.swing.ListSelectionModel.clearSelection()|Change the selection to the empty set.
|javax.swing.ListSelectionModel.getAnchorSelectionIndex()|Return the first index argument from the most recent call to   setSel
|javax.swing.ListSelectionModel.getLeadSelectionIndex()|Return the second index argument from the most recent call to   setSele
|javax.swing.ListSelectionModel.getMaxSelectionIndex()|Returns the last selected index or -1 if the selection is empty.
|javax.swing.ListSelectionModel.getMinSelectionIndex()|Returns the first selected index or -1 if the selection is empty.
|javax.swing.ListSelectionModel.getSelectionMode()|Returns the current selection mode.
|javax.swing.ListSelectionModel.getValueIsAdjusting()|Returnstrueif the selection is undergoing a series of changes.
|javax.swing.ListSelectionModel.insertIndexInterval(int,int,boolean)|Insert length indices beginning before/after index.
|javax.swing.ListSelectionModel.isSelectedIndex(int)|Returns true if the specified index is selected.
|javax.swing.ListSelectionModel.isSelectionEmpty()|Returns true if no indices are selected.
|javax.swing.ListSelectionModel.removeIndexInterval(int,int)|Remove the indices in the interval index0,index1 (inclusive) from 
|javax.swing.ListSelectionModel.removeListSelectionListener(ListSelectionListener)|Remove a listener from the list that's notif
|javax.swing.ListSelectionModel.removeSelectionInterval(int,int)|Changes the selection to be the set difference of the current 
|javax.swing.ListSelectionModel.setAnchorSelectionIndex(int)|Set the anchor selection index.
|javax.swing.ListSelectionModel.setLeadSelectionIndex(int)|Set the lead selection index.
|javax.swing.ListSelectionModel.setSelectionInterval(int,int)|Changes the selection to be betweenindex0andindex1inclusive.
|javax.swing.ListSelectionModel.setSelectionMode(int)|Sets the selection mode.
|javax.swing.ListSelectionModel.setValueIsAdjusting(boolean)|Sets thevalueIsAdjustingproperty, which indicates whether  or not 

*javax.swing.ListSelectionModel_Description*

This interface represents the current state of the selection for any of the components that display a list of values with 
stable indices. The selection is modeled as a set of intervals, each interval represents a contiguous range of selected list 
elements. The methods for modifying the set of selected intervals all take a pair of indices, index0 and index1, that represent 
a closed interval, i.e. the interval includes both index0 and index1. 



*int_javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION*

A value for the selectionMode property: select one or more contiguous ranges of indices at a time. 


*int_javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION*

A value for the selectionMode property: select one contiguous range of indices at a time. 


*int_javax.swing.ListSelectionModel.SINGLE_SELECTION*

A value for the selectionMode property: select one list index at a time. 



*javax.swing.ListSelectionModel.addListSelectionListener(ListSelectionListener)*

public void addListSelectionListener(javax.swing.event.ListSelectionListener x)

Add a listener to the list that's notified each time a change to the selection occurs. 


    x - the ListSelectionListener 

*javax.swing.ListSelectionModel.addSelectionInterval(int,int)*

public void addSelectionInterval(
  int index0,
  int index1)

Changes the selection to be the set union of the current selection and the indices 
betweenindex0andindex1inclusive.index0doesn't have to be less than or equal toindex1. 

InSINGLE_SELECTIONselection mode, this is equivalent to callingsetSelectionInterval, and only the second index is used. 
InSINGLE_INTERVAL_SELECTIONselection mode, this method behaves likesetSelectionInterval, unless the given interval is 
immediately adjacent to or overlaps the existing selection, and can therefore be used to grow the selection. 

If this represents a change to the current selection, then eachListSelectionListeneris notified of the change. 


    index0 - one end of the interval. 
    index1 - other end of the interval 

*javax.swing.ListSelectionModel.clearSelection()*

public void clearSelection()

Change the selection to the empty set. If this represents a change to the current selection then notify each 
ListSelectionListener. 



*javax.swing.ListSelectionModel.getAnchorSelectionIndex()*

public int getAnchorSelectionIndex()

Return the first index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or 
removeSelectionInterval(). The most recent index0 is considered the "anchor" and the most recent index1 is considered the 
"lead". Some interfaces display these indices specially, e.g. Windows95 displays the lead index with a dotted yellow outline. 



*javax.swing.ListSelectionModel.getLeadSelectionIndex()*

public int getLeadSelectionIndex()

Return the second index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or 
removeSelectionInterval(). 



*javax.swing.ListSelectionModel.getMaxSelectionIndex()*

public int getMaxSelectionIndex()

Returns the last selected index or -1 if the selection is empty. 



*javax.swing.ListSelectionModel.getMinSelectionIndex()*

public int getMinSelectionIndex()

Returns the first selected index or -1 if the selection is empty. 



*javax.swing.ListSelectionModel.getSelectionMode()*

public int getSelectionMode()

Returns the current selection mode. 



    Returns: the current selection mode 

*javax.swing.ListSelectionModel.getValueIsAdjusting()*

public boolean getValueIsAdjusting()

Returnstrueif the selection is undergoing a series of changes. 



    Returns: true if the selection is undergoing a series of changes 

*javax.swing.ListSelectionModel.insertIndexInterval(int,int,boolean)*

public void insertIndexInterval(
  int index,
  int length,
  boolean before)

Insert length indices beginning before/after index. This is typically called to sync the selection model with a corresponding 
change in the data model. 



*javax.swing.ListSelectionModel.isSelectedIndex(int)*

public boolean isSelectedIndex(int index)

Returns true if the specified index is selected. 



*javax.swing.ListSelectionModel.isSelectionEmpty()*

public boolean isSelectionEmpty()

Returns true if no indices are selected. 



*javax.swing.ListSelectionModel.removeIndexInterval(int,int)*

public void removeIndexInterval(
  int index0,
  int index1)

Remove the indices in the interval index0,index1 (inclusive) from the selection model. This is typically called to sync the 
selection model width a corresponding change in the data model. 



*javax.swing.ListSelectionModel.removeListSelectionListener(ListSelectionListener)*

public void removeListSelectionListener(javax.swing.event.ListSelectionListener x)

Remove a listener from the list that's notified each time a change to the selection occurs. 


    x - the ListSelectionListener 

*javax.swing.ListSelectionModel.removeSelectionInterval(int,int)*

public void removeSelectionInterval(
  int index0,
  int index1)

Changes the selection to be the set difference of the current selection and the indices 
betweenindex0andindex1inclusive.index0doesn't have to be less than or equal toindex1. 

InSINGLE_INTERVAL_SELECTIONselection mode, if the removal would produce two disjoint selections, the removal is extended 
through the greater end of the selection. For example, if the selection is0-10and you supply indices5,6(in any order) the 
resulting selection is0-4. 

If this represents a change to the current selection, then eachListSelectionListeneris notified of the change. 


    index0 - one end of the interval. 
    index1 - other end of the interval 

*javax.swing.ListSelectionModel.setAnchorSelectionIndex(int)*

public void setAnchorSelectionIndex(int index)

Set the anchor selection index. 



*javax.swing.ListSelectionModel.setLeadSelectionIndex(int)*

public void setLeadSelectionIndex(int index)

Set the lead selection index. 



*javax.swing.ListSelectionModel.setSelectionInterval(int,int)*

public void setSelectionInterval(
  int index0,
  int index1)

Changes the selection to be betweenindex0andindex1inclusive.index0doesn't have to be less than or equal toindex1. 

InSINGLE_SELECTIONselection mode, only the second index is used. 

If this represents a change to the current selection, then eachListSelectionListeneris notified of the change. 


    index0 - one end of the interval. 
    index1 - other end of the interval 

*javax.swing.ListSelectionModel.setSelectionMode(int)*

public void setSelectionMode(int selectionMode)

Sets the selection mode. The following list describes the accepted selection modes: 

ListSelectionModel.SINGLE_SELECTION- Only one list index can be selected at a time. In this 
mode,setSelectionIntervalandaddSelectionIntervalare equivalent, both replacing the current selection with the index represented 
by the second argument (the "lead"). ListSelectionModel.SINGLE_INTERVAL_SELECTION- Only one contiguous interval can be selected 
at a time. In this mode,addSelectionIntervalbehaves likesetSelectionInterval(replacing the current selection), unless the given 
interval is immediately adjacent to or overlaps the existing selection, and can therefore be used to grow it. 
ListSelectionModel.MULTIPLE_INTERVAL_SELECTION- In this mode, there's no restriction on what can be selected. 



*javax.swing.ListSelectionModel.setValueIsAdjusting(boolean)*

public void setValueIsAdjusting(boolean valueIsAdjusting)

Sets thevalueIsAdjustingproperty, which indicates whether or not upcoming selection changes should be considered part of a 
single change. The value of this property is used to initialize thevalueIsAdjustingproperty of theListSelectionEvents that are 
generated. 

For example, if the selection is being updated in response to a user drag, this property can be set totruewhen the drag is 
initiated and set tofalsewhen the drag is finished. During the drag, listeners receive events with avalueIsAdjustingproperty 
set totrue. At the end of the drag, when the change is finalized, listeners receive an event with the value set tofalse. 
Listeners can use this pattern if they wish to update only when a change has been finalized. 

Setting this property totruebegins a series of changes that is to be considered part of a single change. When the property is 
changed back tofalse, an event is sent out characterizing the entire selection change (if there was one), with the 
event'svalueIsAdjustingproperty set tofalse. 


    valueIsAdjusting - the new value of the property 


