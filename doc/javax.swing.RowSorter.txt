*javax.swing.RowSorter* *RowSorter* RowSorter provides the basis for sorting and filtering.

public abstract class RowSorter<M>
  extends    |java.lang.Object|

|javax.swing.RowSorter_Description|
|javax.swing.RowSorter_Fields|
|javax.swing.RowSorter_Constructors|
|javax.swing.RowSorter_Methods|

================================================================================================================================

*javax.swing.RowSorter_Constructors*
|javax.swing.RowSorter()|Creates a RowSorter.

*javax.swing.RowSorter_Methods*
|javax.swing.RowSorter.addRowSorterListener(RowSorterListener)|Adds a RowSorterListener to receive notification  about this Row
|javax.swing.RowSorter.allRowsChanged()|Invoked when the contents of the underlying model have  completely changed.
|javax.swing.RowSorter.convertRowIndexToModel(int)|Returns the location of index in terms of the  underlying model.
|javax.swing.RowSorter.convertRowIndexToView(int)|Returns the location of index in terms of the  view.
|javax.swing.RowSorter.fireRowSorterChanged(int[])|Notifies listener that the mapping has changed.
|javax.swing.RowSorter.fireSortOrderChanged()|Notifies listener that the sort order has changed.
|javax.swing.RowSorter.getModel()|Returns the underlying model.
|javax.swing.RowSorter.getModelRowCount()|Returns the number of rows in the underlying model.
|javax.swing.RowSorter.getSortKeys()|Returns the current sort keys.
|javax.swing.RowSorter.getViewRowCount()|Returns the number of rows in the view.
|javax.swing.RowSorter.modelStructureChanged()|Invoked when the underlying model structure has completely  changed.
|javax.swing.RowSorter.removeRowSorterListener(RowSorterListener)|Removes a RowSorterListener.
|javax.swing.RowSorter.rowsDeleted(int,int)|Invoked when rows have been deleted from the underlying model  in the specified ran
|javax.swing.RowSorter.rowsInserted(int,int)|Invoked when rows have been inserted into the underlying model  in the specified r
|javax.swing.RowSorter.rowsUpdated(int,int)|Invoked when rows have been changed in the underlying model  between the specified 
|javax.swing.RowSorter.rowsUpdated(int,int,int)|Invoked when the column in the rows have been updated in  the underlying model 
|javax.swing.RowSorter.setSortKeys(List<?extendsRowSorter.SortKey>)|Sets the current sort keys.
|javax.swing.RowSorter.toggleSortOrder(int)|Reverses the sort order of the specified column.

*javax.swing.RowSorter_Description*

RowSorter provides the basis for sorting and filtering. Beyond creating and installing a RowSorter, you very rarely need to 
interact with one directly. Refer to TableRowSorter(|javax.swing.table.TableRowSorter|) for a concrete implementation of 
RowSorter for JTable. 

RowSorter's primary role is to provide a mapping between two coordinate systems: that of the view (for example a JTable) and 
that of the underlying data source, typically a model. 

The view invokes the following methods on the RowSorter: 

toggleSortOrder The view invokes this when the appropriate user gesture has occurred to trigger a sort. For example, the user 
clicked a column header in a table. One of the model change methods The view invokes a model change method when the underlying 
model has changed. There may be order dependencies in how the events are delivered, so a RowSorter should not update its 
mapping until one of these methods is invoked. 

Because the view makes extensive use of the convertRowIndexToModel, convertRowIndexToView and getViewRowCount methods, these 
methods need to be fast. 

RowSorter provides notification of changes by way of RowSorterListener. Two types of notification are sent: 

RowSorterEvent.Type.SORT_ORDER_CHANGED notifies listeners that the sort order has changed. This is typically followed by a 
notification that the sort has changed. RowSorterEvent.Type.SORTED notifies listeners that the mapping maintained by the 
RowSorter has changed in some way. 

RowSorter implementations typically don't have a one-to-one mapping with the underlying model, but they can. For example, if a 
database does the sorting, toggleSortOrder might call through to the database (on a background thread), and override the 
mapping methods to return the argument that is passed in. 

Concrete implementations of RowSorter need to reference a model such as TableModel or ListModel. The view classes, such as 
JTable and JList, will also have a reference to the model. To avoid ordering dependencies, RowSorter implementations should not 
install a listener on the model. Instead the view class will call into the RowSorter when the model changes. For example, if a 
row is updated in a TableModel JTable invokes rowsUpdated. When the model changes, the view may call into any of the following 
methods: modelStructureChanged, allRowsChanged, rowsInserted, rowsDeleted and rowsUpdated. 



*javax.swing.RowSorter()*

public RowSorter()

Creates a RowSorter. 


*javax.swing.RowSorter.addRowSorterListener(RowSorterListener)*

public void addRowSorterListener(javax.swing.event.RowSorterListener l)

Adds a RowSorterListener to receive notification about this RowSorter. If the same listener is added more than once it will 
receive multiple notifications. If l is null nothing is done. 


    l - the RowSorterListener 

*javax.swing.RowSorter.allRowsChanged()*

public abstract void allRowsChanged()

Invoked when the contents of the underlying model have completely changed. The structure of the table is the same, only the 
contents have changed. This is typically sent when it is too expensive to characterize the change in terms of the other 
methods. 

You normally do not call this method. This method is public to allow view classes to call it. 



*javax.swing.RowSorter.convertRowIndexToModel(int)*

public abstract int convertRowIndexToModel(int index)

Returns the location of index in terms of the underlying model. That is, for the row index in the coordinates of the view this 
returns the row index in terms of the underlying model. 


    index - the row index in terms of the underlying view 

    Returns: row index in terms of the view 

*javax.swing.RowSorter.convertRowIndexToView(int)*

public abstract int convertRowIndexToView(int index)

Returns the location of index in terms of the view. That is, for the row index in the coordinates of the underlying model this 
returns the row index in terms of the view. 


    index - the row index in terms of the underlying model 

    Returns: row index in terms of the view, or -1 if index has been filtered out of the view 

*javax.swing.RowSorter.fireRowSorterChanged(int[])*

protected void fireRowSorterChanged(int[] lastRowIndexToModel)

Notifies listener that the mapping has changed. 


    lastRowIndexToModel - the mapping from model indices to view indices prior to the sort, may be null 

*javax.swing.RowSorter.fireSortOrderChanged()*

protected void fireSortOrderChanged()

Notifies listener that the sort order has changed. 



*javax.swing.RowSorter.getModel()*

public abstract |M| getModel()

Returns the underlying model. 



    Returns: the underlying model 

*javax.swing.RowSorter.getModelRowCount()*

public abstract int getModelRowCount()

Returns the number of rows in the underlying model. 



    Returns: number of rows in the underlying model 

*javax.swing.RowSorter.getSortKeys()*

public abstract |java.util.List|<? extends javax.swing.RowSorter.SortKey> getSortKeys()

Returns the current sort keys. This must return anon-null Listand may return an unmodifiableList. If you need to change the 
sort keys, make a copy of the returnedList, mutate the copy and invokesetSortKeyswith the new list. 



    Returns: the current sort order 

*javax.swing.RowSorter.getViewRowCount()*

public abstract int getViewRowCount()

Returns the number of rows in the view. If the contents have been filtered this might differ from the row count of the 
underlying model. 



    Returns: number of rows in the view 

*javax.swing.RowSorter.modelStructureChanged()*

public abstract void modelStructureChanged()

Invoked when the underlying model structure has completely changed. For example, if the number of columns in a TableModel 
changed, this method would be invoked. 

You normally do not call this method. This method is public to allow view classes to call it. 



*javax.swing.RowSorter.removeRowSorterListener(RowSorterListener)*

public void removeRowSorterListener(javax.swing.event.RowSorterListener l)

Removes a RowSorterListener. If l is null nothing is done. 


    l - the RowSorterListener 

*javax.swing.RowSorter.rowsDeleted(int,int)*

public abstract void rowsDeleted(
  int firstRow,
  int endRow)

Invoked when rows have been deleted from the underlying model in the specified range (inclusive). 

The arguments give the indices of the effected range and are in terms of the model before the change. For example, if you have 
a 5-row model and delete 3 items from the end of the model the indices are 2, 4. 

You normally do not call this method. This method is public to allow view classes to call it. 


    firstRow - the first row 
    endRow - the last row 

*javax.swing.RowSorter.rowsInserted(int,int)*

public abstract void rowsInserted(
  int firstRow,
  int endRow)

Invoked when rows have been inserted into the underlying model in the specified range (inclusive). 

The arguments give the indices of the effected range. The first argument is in terms of the model before the change, and must 
be less than or equal to the size of the model before the change. The second argument is in terms of the model after the change 
and must be less than the size of the model after the change. For example, if you have a 5-row model and add 3 items to the end 
of the model the indices are 5, 7. 

You normally do not call this method. This method is public to allow view classes to call it. 


    firstRow - the first row 
    endRow - the last row 

*javax.swing.RowSorter.rowsUpdated(int,int)*

public abstract void rowsUpdated(
  int firstRow,
  int endRow)

Invoked when rows have been changed in the underlying model between the specified range (inclusive). 

You normally do not call this method. This method is public to allow view classes to call it. 


    firstRow - the first row, in terms of the underlying model 
    endRow - the last row, in terms of the underlying model 

*javax.swing.RowSorter.rowsUpdated(int,int,int)*

public abstract void rowsUpdated(
  int firstRow,
  int endRow,
  int column)

Invoked when the column in the rows have been updated in the underlying model between the specified range. 

You normally do not call this method. This method is public to allow view classes to call it. 


    firstRow - the first row, in terms of the underlying model 
    endRow - the last row, in terms of the underlying model 
    column - the column that has changed, in terms of the underlying model 

*javax.swing.RowSorter.setSortKeys(List<?extendsRowSorter.SortKey>)*

public abstract void setSortKeys(java.util.List<? extends javax.swing.RowSorter.SortKey> keys)

Sets the current sort keys. 


    keys - the new SortKeys; null is a shorthand for specifying an empty list, indicating that the view should be unsorted 

*javax.swing.RowSorter.toggleSortOrder(int)*

public abstract void toggleSortOrder(int column)

Reverses the sort order of the specified column. It is up to subclasses to provide the exact behavior when invoked. Typically 
this will reverse the sort order from ascending to descending (or descending to ascending) if the specified column is already 
the primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order. If 
the specified column is not sortable, this method has no effect. 

If this results in changing the sort order and sorting, the appropriate RowSorterListener notification will be sent. 


    column - the column to toggle the sort ordering of, in terms of the underlying model 


