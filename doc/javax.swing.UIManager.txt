*javax.swing.UIManager* *UIManager* UIManagermanages the current look and feel, the set of
 available look and feels,PropertyCha

public class UIManager
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|javax.swing.UIManager_Description|
|javax.swing.UIManager_Fields|
|javax.swing.UIManager_Constructors|
|javax.swing.UIManager_Methods|

================================================================================================================================

*javax.swing.UIManager_Constructors*
|javax.swing.UIManager()|

*javax.swing.UIManager_Methods*
|javax.swing.UIManager.addAuxiliaryLookAndFeel(LookAndFeel)|Adds a LookAndFeel to the list of auxiliary look and feels.
|javax.swing.UIManager.addPropertyChangeListener(PropertyChangeListener)|Adds a PropertyChangeListener to the listener list.
|javax.swing.UIManager.get(Object)|Returns an object from the defaults.
|javax.swing.UIManager.get(Object,Locale)|Returns an object from the defaults that is appropriate for  the given locale.
|javax.swing.UIManager.getAuxiliaryLookAndFeels()|Returns the list of auxiliary look and feels (can be null).
|javax.swing.UIManager.getBoolean(Object)|Returns a boolean from the defaults which is associated with  the key value.
|javax.swing.UIManager.getBoolean(Object,Locale)|Returns a boolean from the defaults which is associated with  the key value an
|javax.swing.UIManager.getBorder(Object)|Returns a border from the defaults.
|javax.swing.UIManager.getBorder(Object,Locale)|Returns a border from the defaults that is appropriate  for the given locale.
|javax.swing.UIManager.getColor(Object)|Returns a color from the defaults.
|javax.swing.UIManager.getColor(Object,Locale)|Returns a color from the defaults that is appropriate  for the given locale.
|javax.swing.UIManager.getCrossPlatformLookAndFeelClassName()|Returns the name of the LookAndFeel class that implements  the de
|javax.swing.UIManager.getDefaults()|Returns the defaults.
|javax.swing.UIManager.getDimension(Object)|Returns a dimension from the defaults.
|javax.swing.UIManager.getDimension(Object,Locale)|Returns a dimension from the defaults that is appropriate  for the given loc
|javax.swing.UIManager.getFont(Object)|Returns a font from the defaults.
|javax.swing.UIManager.getFont(Object,Locale)|Returns a font from the defaults that is appropriate  for the given locale.
|javax.swing.UIManager.getIcon(Object)|Returns an Icon from the defaults.
|javax.swing.UIManager.getIcon(Object,Locale)|Returns an Icon from the defaults that is appropriate  for the given locale.
|javax.swing.UIManager.getInsets(Object)|Returns an Insets object from the defaults.
|javax.swing.UIManager.getInsets(Object,Locale)|Returns an Insets object from the defaults that is   appropriate for the given 
|javax.swing.UIManager.getInstalledLookAndFeels()|Returns an array ofLookAndFeelInfos representing theLookAndFeelimplementation
|javax.swing.UIManager.getInt(Object)|Returns an integer from the defaults.
|javax.swing.UIManager.getInt(Object,Locale)|Returns an integer from the defaults that is appropriate  for the given locale.
|javax.swing.UIManager.getLookAndFeel()|Returns the current look and feel or null.
|javax.swing.UIManager.getLookAndFeelDefaults()|Returns theUIDefaultsfrom the current look and feel,  that were obtained at the
|javax.swing.UIManager.getPropertyChangeListeners()|Returns an array of all the PropertyChangeListeners added  to this UIManage
|javax.swing.UIManager.getString(Object)|Returns a string from the defaults.
|javax.swing.UIManager.getString(Object,Locale)|Returns a string from the defaults that is appropriate for the  given locale.
|javax.swing.UIManager.getSystemLookAndFeelClassName()|Returns the name of the LookAndFeel class that implements  the native sy
|javax.swing.UIManager.getUI(JComponent)|Returns the appropriateComponentUIimplementation fortarget.
|javax.swing.UIManager.installLookAndFeel(String,String)|Adds the specified look and feel to the set of available look  and fee
|javax.swing.UIManager.installLookAndFeel(UIManager.LookAndFeelInfo)|Adds the specified look and feel to the set of available l
|javax.swing.UIManager.put(Object,Object)|Stores an object in the developer defaults.
|javax.swing.UIManager.removeAuxiliaryLookAndFeel(LookAndFeel)|Removes a LookAndFeel from the list of auxiliary look and feels.
|javax.swing.UIManager.removePropertyChangeListener(PropertyChangeListener)|Removes a PropertyChangeListener from the listener 
|javax.swing.UIManager.setInstalledLookAndFeels(UIManager.LookAndFeelInfo[])|Sets the set of available look and feels.
|javax.swing.UIManager.setLookAndFeel(LookAndFeel)|Sets the current look and feel tonewLookAndFeel.
|javax.swing.UIManager.setLookAndFeel(String)|Loads theLookAndFeelspecified by the given class  name, using the current thread'

*javax.swing.UIManager_Description*

UIManagermanages the current look and feel, the set of available look and feels,PropertyChangeListenersthat are notified when 
the look and feel changes, look and feel defaults, and convenience methods for obtaining various default values. 

Specifying the look and feel 

The look and feel can be specified in two distinct ways: by specifying the fully qualified name of the class for the look and 
feel, or by creating an instance ofLookAndFeeland passing it tosetLookAndFeel. The following example illustrates setting the 
look and feel to the system look and feel: 

UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); 

The following example illustrates setting the look and feel based on class name: 

UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel"); 

Once the look and feel has been changed it is imperative to invokeupdateUIon allJComponents. The method 
(|javax.swing.SwingUtilities|) makes it easy to applyupdateUIto a containment hierarchy. Refer to it for details. The exact 
behavior of not invokingupdateUIafter changing the look and feel is unspecified. It is very possible to receive unexpected 
exceptions, painting problems, or worse. 

Default look and feel 

The class used for the default look and feel is chosen in the following manner: 

If the system property swing.defaultlaf isnon-null, use its value as the default look and feel class name. If the 
(|java.util.Properties|) file swing.properties exists and contains the key swing.defaultlaf, use its value as the default look 
and feel class name. The location that is checked for swing.properties may vary depending upon the implementation of the Java 
platform. In Sun's implementation the location is ${java.home}/lib/swing.properties. Refer to the release notes of the 
implementation being used for further details. Otherwise use the cross platform look and feel. 

DefaultsUIManagermanages three sets ofUIDefaults. In order, they are: 

Developer defaults. With few exceptions Swing does not alter the developer defaults; these are intended to be modified and used 
by the developer. Look and feel defaults. The look and feel defaults are supplied by the look and feel at the time it is 
installed as the current look and feel (setLookAndFeel()is invoked). The look and feel defaults can be obtained using 
thegetLookAndFeelDefaults()method. Sytem defaults. The system defaults are provided by Swing. 

Invoking any of the variousgetmethods results in checking each of the defaults, in order, returning the firstnon-nullvalue. For 
example, invokingUIManager.getString("Table.foreground")results in first checking developer defaults. If the developer defaults 
contain a value for"Table.foreground"it is returned, otherwise the look and feel defaults are checked, followed by the system 
defaults. 

It's important to note thatgetDefaultsreturns a custom instance ofUIDefaultswith this resolution logic built into it. For 
example,UIManager.getDefaults().getString("Table.foreground")is equivalent toUIManager.getString("Table.foreground"). Both 
resolve using the algorithm just described. In many places the documentation uses the word defaults to refer to the custom 
instance ofUIDefaultswith the resolution logic as previously described. 

When the look and feel is changed,UIManageralters only the look and feel defaults; the developer and system defaults are not 
altered by theUIManagerin any way. 

The set of defaults a particular look and feel supports is defined and documented by that look and feel. In addition, each look 
and feel, orComponentUIprovided by a look and feel, may access the defaults at different times in their life cycle. Some look 
and feels may agressively look up defaults, so that changing a default may not have an effect after installing the look and 
feel. Other look and feels may lazily access defaults so that a change to the defaults may effect an existing look and feel. 
Finally, other look and feels might not configure themselves from the defaults table in any way. None-the-less it is usually 
the case that a look and feel expects certain defaults, so that in general aComponentUIprovided by one look and feel will not 
work with another look and feel. 

Warning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support 
is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for 
long term storage of all JavaBeansTM has been added to the java.beans package. Please see (|java.beans.XMLEncoder|) . 



*javax.swing.UIManager()*

public UIManager()




*javax.swing.UIManager.addAuxiliaryLookAndFeel(LookAndFeel)*

public static void addAuxiliaryLookAndFeel(javax.swing.LookAndFeel laf)

Adds a LookAndFeel to the list of auxiliary look and feels. The auxiliary look and feels tell the multiplexing look and feel 
what other LookAndFeel classes for a component instance are to be used in addition to the default LookAndFeel class when 
creating a multiplexing UI. The change will only take effect when a new UI class is created or when the default look and feel 
is changed on a component instance. Note these are not the same as the installed look and feels. 


    laf - the LookAndFeel object 

*javax.swing.UIManager.addPropertyChangeListener(PropertyChangeListener)*

public static void addPropertyChangeListener(java.beans.PropertyChangeListener listener)

Adds a PropertyChangeListener to the listener list. The listener is registered for all properties. 


    listener - the PropertyChangeListener to be added 

*javax.swing.UIManager.get(Object)*

public static |java.lang.Object| get(java.lang.Object key)

Returns an object from the defaults. 


    key - an Object specifying the desired object 

    Returns: 

*javax.swing.UIManager.get(Object,Locale)*

public static |java.lang.Object| get(
  java.lang.Object key,
  java.util.Locale l)

Returns an object from the defaults that is appropriate for the given locale. 


    key - an Object specifying the desired object 
    l - the Locale for which the object is desired; refer to {@code UIDefaults} for details on how a {@code null} {@code Locale} is 
       handled 

    Returns: 

*javax.swing.UIManager.getAuxiliaryLookAndFeels()*

public static |javax.swing.LookAndFeel|[] getAuxiliaryLookAndFeels()

Returns the list of auxiliary look and feels (can be null). The auxiliary look and feels tell the multiplexing look and feel 
what other LookAndFeel classes for a component instance are to be used in addition to the default LookAndFeel class when 
creating a multiplexing UI. Note these are not the same as the installed look and feels. 



    Returns: list of auxiliary LookAndFeels or null 

*javax.swing.UIManager.getBoolean(Object)*

public static boolean getBoolean(java.lang.Object key)

Returns a boolean from the defaults which is associated with the key value. If the key is not found or the key doesn't 
represent a boolean value thenfalseis returned. 


    key - an Object specifying the key for the desired boolean value 

    Returns: the boolean value corresponding to the key 

*javax.swing.UIManager.getBoolean(Object,Locale)*

public static boolean getBoolean(
  java.lang.Object key,
  java.util.Locale l)

Returns a boolean from the defaults which is associated with the key value and the given Locale. If the key is not found or the 
key doesn't represent a boolean value thenfalsewill be returned. 


    key - an Object specifying the key for the desired boolean value 
    l - the Locale for which the boolean is desired; refer to {@code UIDefaults} for details on how a {@code null} {@code Locale} is 
       handled 

    Returns: the boolean value corresponding to the key 

*javax.swing.UIManager.getBorder(Object)*

public static |javax.swing.border.Border| getBorder(java.lang.Object key)

Returns a border from the defaults. If the value forkeyis not aBorder,nullis returned. 


    key - an Object specifying the border 

    Returns: the Border object 

*javax.swing.UIManager.getBorder(Object,Locale)*

public static |javax.swing.border.Border| getBorder(
  java.lang.Object key,
  java.util.Locale l)

Returns a border from the defaults that is appropriate for the given locale. If the value forkeyis not aBorder,nullis returned. 


    key - an Object specifying the border 
    l - the Locale for which the border is desired; refer to {@code UIDefaults} for details on how a {@code null} {@code Locale} is 
       handled 

    Returns: the Border object 

*javax.swing.UIManager.getColor(Object)*

public static |java.awt.Color| getColor(java.lang.Object key)

Returns a color from the defaults. If the value forkeyis not aColor,nullis returned. 


    key - an Object specifying the color 

    Returns: the Color object 

*javax.swing.UIManager.getColor(Object,Locale)*

public static |java.awt.Color| getColor(
  java.lang.Object key,
  java.util.Locale l)

Returns a color from the defaults that is appropriate for the given locale. If the value forkeyis not aColor,nullis returned. 


    key - an Object specifying the color 
    l - the Locale for which the color is desired; refer to {@code UIDefaults} for details on how a {@code null} {@code Locale} is 
       handled 

    Returns: the Color object 

*javax.swing.UIManager.getCrossPlatformLookAndFeelClassName()*

public static |java.lang.String| getCrossPlatformLookAndFeelClassName()

Returns the name of the LookAndFeel class that implements the default cross platform look and feel -- the Java Look and Feel 
(JLF). This value can be overriden by setting the swing.crossplatformlaf system property. 



    Returns: a string with the JLF implementation-class 

*javax.swing.UIManager.getDefaults()*

public static |javax.swing.UIDefaults| getDefaults()

Returns the defaults. The returned defaults resolve using the logic specified in the class documentation. 



    Returns: a UIDefaults object containing the default values 

*javax.swing.UIManager.getDimension(Object)*

public static |java.awt.Dimension| getDimension(java.lang.Object key)

Returns a dimension from the defaults. If the value forkeyis not aDimension,nullis returned. 


    key - an Object specifying the dimension object 

    Returns: the Dimension object 

*javax.swing.UIManager.getDimension(Object,Locale)*

public static |java.awt.Dimension| getDimension(
  java.lang.Object key,
  java.util.Locale l)

Returns a dimension from the defaults that is appropriate for the given locale. If the value forkeyis not aDimension,nullis 
returned. 


    key - an Object specifying the dimension object 
    l - the Locale for which the object is desired; refer to {@code UIDefaults} for details on how a {@code null} {@code Locale} is 
       handled 

    Returns: the Dimension object 

*javax.swing.UIManager.getFont(Object)*

public static |java.awt.Font| getFont(java.lang.Object key)

Returns a font from the defaults. If the value forkeyis not aFont,nullis returned. 


    key - an Object specifying the font 

    Returns: the Font object 

*javax.swing.UIManager.getFont(Object,Locale)*

public static |java.awt.Font| getFont(
  java.lang.Object key,
  java.util.Locale l)

Returns a font from the defaults that is appropriate for the given locale. If the value forkeyis not aFont,nullis returned. 


    key - an Object specifying the font 
    l - the Locale for which the font is desired; refer to {@code UIDefaults} for details on how a {@code null} {@code Locale} is 
       handled 

    Returns: the Font object 

*javax.swing.UIManager.getIcon(Object)*

public static |javax.swing.Icon| getIcon(java.lang.Object key)

Returns an Icon from the defaults. If the value forkeyis not anIcon,nullis returned. 


    key - an Object specifying the icon 

    Returns: the Icon object 

*javax.swing.UIManager.getIcon(Object,Locale)*

public static |javax.swing.Icon| getIcon(
  java.lang.Object key,
  java.util.Locale l)

Returns an Icon from the defaults that is appropriate for the given locale. If the value forkeyis not anIcon,nullis returned. 


    key - an Object specifying the icon 
    l - the Locale for which the icon is desired; refer to {@code UIDefaults} for details on how a {@code null} {@code Locale} is 
       handled 

    Returns: the Icon object 

*javax.swing.UIManager.getInsets(Object)*

public static |java.awt.Insets| getInsets(java.lang.Object key)

Returns an Insets object from the defaults. If the value forkeyis not anInsets,nullis returned. 


    key - an Object specifying the Insets object 

    Returns: the Insets object 

*javax.swing.UIManager.getInsets(Object,Locale)*

public static |java.awt.Insets| getInsets(
  java.lang.Object key,
  java.util.Locale l)

Returns an Insets object from the defaults that is appropriate for the given locale. If the value forkeyis not anInsets,nullis 
returned. 


    key - an Object specifying the Insets object 
    l - the Locale for which the object is desired; refer to {@code UIDefaults} for details on how a {@code null} {@code Locale} is 
       handled 

    Returns: the Insets object 

*javax.swing.UIManager.getInstalledLookAndFeels()*

public static |javax.swing.UIManager.LookAndFeelInfo|[] getInstalledLookAndFeels()

Returns an array ofLookAndFeelInfos representing theLookAndFeelimplementations currently available. The LookAndFeelInfo objects 
can be used by an application to construct a menu of look and feel options for the user, or to determine which look and feel to 
set at startup time. To avoid the penalty of creating numerousLookAndFeelobjects,LookAndFeelInfomaintains the class name of 
theLookAndFeelclass, not the actualLookAndFeelinstance. 

The following example illustrates setting the current look and feel from an instance ofLookAndFeelInfo: 

UIManager.setLookAndFeel(info.getClassName()); 



    Returns: an array of LookAndFeelInfo objects 

*javax.swing.UIManager.getInt(Object)*

public static int getInt(java.lang.Object key)

Returns an integer from the defaults. If the value forkeyis not anInteger, or does not exist,0is returned. 


    key - an Object specifying the int 

    Returns: 

*javax.swing.UIManager.getInt(Object,Locale)*

public static int getInt(
  java.lang.Object key,
  java.util.Locale l)

Returns an integer from the defaults that is appropriate for the given locale. If the value forkeyis not anInteger, or does not 
exist,0is returned. 


    key - an Object specifying the int 
    l - the Locale for which the int is desired; refer to {@code UIDefaults} for details on how a {@code null} {@code Locale} is 
       handled 

    Returns: 

*javax.swing.UIManager.getLookAndFeel()*

public static |javax.swing.LookAndFeel| getLookAndFeel()

Returns the current look and feel or null. 



    Returns: current look and feel, or null 

*javax.swing.UIManager.getLookAndFeelDefaults()*

public static |javax.swing.UIDefaults| getLookAndFeelDefaults()

Returns theUIDefaultsfrom the current look and feel, that were obtained at the time the look and feel was installed. 

In general, developers should use theUIDefaultsreturned fromgetDefaults(). As the current look and feel may expect certain 
values to exist, altering theUIDefaultsreturned from this method could have unexpected results. 



    Returns: UIDefaults from the current look and feel 

*javax.swing.UIManager.getPropertyChangeListeners()*

public static |java.beans.PropertyChangeListener|[] getPropertyChangeListeners()

Returns an array of all the PropertyChangeListeners added to this UIManager with addPropertyChangeListener(). 



    Returns: all of the PropertyChangeListeners added or an empty array if no listeners have been added 

*javax.swing.UIManager.getString(Object)*

public static |java.lang.String| getString(java.lang.Object key)

Returns a string from the defaults. If the value forkeyis not aString,nullis returned. 


    key - an Object specifying the string 

    Returns: 

*javax.swing.UIManager.getString(Object,Locale)*

public static |java.lang.String| getString(
  java.lang.Object key,
  java.util.Locale l)

Returns a string from the defaults that is appropriate for the given locale. If the value forkeyis not aString,nullis returned. 


    key - an Object specifying the string 
    l - the Locale for which the string is desired; refer to {@code UIDefaults} for details on how a {@code null} {@code Locale} is 
       handled 

    Returns: 

*javax.swing.UIManager.getSystemLookAndFeelClassName()*

public static |java.lang.String| getSystemLookAndFeelClassName()

Returns the name of the LookAndFeel class that implements the native system look and feel if there is one, otherwise the name 
of the default cross platform LookAndFeel class. This value can be overriden by setting the swing.systemlaf system property. 



    Returns: the String of the LookAndFeel class 

*javax.swing.UIManager.getUI(JComponent)*

public static |javax.swing.plaf.ComponentUI| getUI(javax.swing.JComponent target)

Returns the appropriateComponentUIimplementation fortarget. Typically, this is a cover forgetDefaults().getUI(target). However, 
if an auxiliary look and feel has been installed, this first invokesgetUI(target)on the multiplexing look and feel's defaults, 
and returns that value if it isnon-null. 


    target - the JComponent to return the {@code ComponentUI} for 

    Returns: the ComponentUI object for {@code target} 

*javax.swing.UIManager.installLookAndFeel(String,String)*

public static void installLookAndFeel(
  java.lang.String name,
  java.lang.String className)

Adds the specified look and feel to the set of available look and feels. While this method does not check the arguments in any 
way, it is strongly recommended thatnon-nullvalues be supplied. 


    name - descriptive name of the look and feel 
    className - name of the class that implements the look and feel 

*javax.swing.UIManager.installLookAndFeel(UIManager.LookAndFeelInfo)*

public static void installLookAndFeel(javax.swing.UIManager.LookAndFeelInfo info)

Adds the specified look and feel to the set of available look and feels. While this method allows anullinfo, it is strongly 
recommended that anon-nullvalue be used. 


    info - a LookAndFeelInfo object that names the look and feel and identifies the class that implements it 

*javax.swing.UIManager.put(Object,Object)*

public static |java.lang.Object| put(
  java.lang.Object key,
  java.lang.Object value)

Stores an object in the developer defaults. This is a cover method forgetDefaults().put(key, value). This only effects the 
developer defaults, not the system or look and feel defaults. 


    key - an Object specifying the retrieval key 
    value - the Object to store; refer to {@code UIDefaults} for details on how {@code null} is handled 

    Returns: the Object returned by {@link UIDefaults#put} 

*javax.swing.UIManager.removeAuxiliaryLookAndFeel(LookAndFeel)*

public static boolean removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel laf)

Removes a LookAndFeel from the list of auxiliary look and feels. The auxiliary look and feels tell the multiplexing look and 
feel what other LookAndFeel classes for a component instance are to be used in addition to the default LookAndFeel class when 
creating a multiplexing UI. The change will only take effect when a new UI class is created or when the default look and feel 
is changed on a component instance. Note these are not the same as the installed look and feels. 



    Returns: true if the LookAndFeel was removed from the list 

*javax.swing.UIManager.removePropertyChangeListener(PropertyChangeListener)*

public static void removePropertyChangeListener(java.beans.PropertyChangeListener listener)

Removes a PropertyChangeListener from the listener list. This removes a PropertyChangeListener that was registered for all 
properties. 


    listener - the PropertyChangeListener to be removed 

*javax.swing.UIManager.setInstalledLookAndFeels(UIManager.LookAndFeelInfo[])*

public static void setInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo[] infos)
  throws |java.lang.SecurityException|
         
Sets the set of available look and feels. While this method does not check to ensure all of theLookAndFeelInfosarenon-null, it 
is strongly recommended that onlynon-nullvalues are supplied in theinfosarray. 


    infos - set of LookAndFeelInfo objects specifying the available look and feels 

*javax.swing.UIManager.setLookAndFeel(LookAndFeel)*

public static void setLookAndFeel(javax.swing.LookAndFeel newLookAndFeel)
  throws |javax.swing.UnsupportedLookAndFeelException|
         
Sets the current look and feel tonewLookAndFeel. If the current look and feel isnon-nulluninitializeis invoked on it. 
IfnewLookAndFeelisnon-null,initializeis invoked on it followed bygetDefaults. The defaults returned 
fromnewLookAndFeel.getDefaults()replace those of the defaults from the previous look and feel. If thenewLookAndFeelisnull, the 
look and feel defaults are set tonull. 

A value ofnullcan be used to set the look and feel tonull. As theLookAndFeelis required for most of Swing to function, setting 
theLookAndFeeltonullis strongly discouraged. 

This is a JavaBeans bound property. 


    newLookAndFeel - {@code LookAndFeel} to install 

*javax.swing.UIManager.setLookAndFeel(String)*

public static void setLookAndFeel(java.lang.String className)
  throws |java.lang.ClassNotFoundException|
         |java.lang.IllegalAccessException|
         |java.lang.InstantiationException|
         |javax.swing.UnsupportedLookAndFeelException|
         
Loads theLookAndFeelspecified by the given class name, using the current thread's context class loader, and passes it 
tosetLookAndFeel(LookAndFeel). 


    className - a string specifying the name of the class that implements the look and feel 


