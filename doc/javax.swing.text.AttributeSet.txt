*javax.swing.text.AttributeSet* *AttributeSet* A collection of unique attributes.

public interface interface AttributeSet


|javax.swing.text.AttributeSet_Description|
|javax.swing.text.AttributeSet_Fields|
|javax.swing.text.AttributeSet_Constructors|
|javax.swing.text.AttributeSet_Methods|

================================================================================================================================

*javax.swing.text.AttributeSet_Fields*
|java.lang.Object_javax.swing.text.AttributeSet.NameAttribute|
|java.lang.Object_javax.swing.text.AttributeSet.ResolveAttribute|

*javax.swing.text.AttributeSet_Methods*
|javax.swing.text.AttributeSet.containsAttribute(Object,Object)|Returnstrueif this set defines an attribute with the same  name
|javax.swing.text.AttributeSet.containsAttributes(AttributeSet)|Returnstrueif this set defines all the attributes from the  giv
|javax.swing.text.AttributeSet.copyAttributes()|Returns an attribute set that is guaranteed not  to change over time.
|javax.swing.text.AttributeSet.getAttribute(Object)|Fetches the value of the given attribute.
|javax.swing.text.AttributeSet.getAttributeCount()|Returns the number of attributes that are defined locally in this set.
|javax.swing.text.AttributeSet.getAttributeNames()|Returns an enumeration over the names of the attributes that are  defined lo
|javax.swing.text.AttributeSet.getResolveParent()|Gets the resolving parent.
|javax.swing.text.AttributeSet.isDefined(Object)|Checks whether the named attribute has a value specified in  the set without r
|javax.swing.text.AttributeSet.isEqual(AttributeSet)|Determines if the two attribute sets are equivalent.

*javax.swing.text.AttributeSet_Description*

A collection of unique attributes. This is a read-only, immutable interface. An attribute is basically a key and a value 
assigned to the key. The collection may represent something like a style run, a logical style, etc. These are generally used to 
describe features that will contribute to some graphical representation such as a font. The set of possible keys is unbounded 
and can be anything. Typically View implementations will respond to attribute definitions and render something to represent the 
attributes. 

Attributes can potentially resolve in a hierarchy. If a key doesn't resolve locally, and a resolving parent exists, the key 
will be resolved through the parent. 



*java.lang.Object_javax.swing.text.AttributeSet.NameAttribute*

Attribute name used to name the collection of attributes. 


*java.lang.Object_javax.swing.text.AttributeSet.ResolveAttribute*

Attribute name used to identify the resolving parent set of attributes, if one is defined. 



*javax.swing.text.AttributeSet.containsAttribute(Object,Object)*

public boolean containsAttribute(
  java.lang.Object name,
  java.lang.Object value)

Returnstrueif this set defines an attribute with the same name and an equal value. If such an attribute is not found locally, 
it is searched through in the resolving parent hierarchy. 


    name - the non-null attribute name 
    value - the value 

    Returns: {@code true} if the set defines the attribute with an equal value, either locally or through its resolving parent 

*javax.swing.text.AttributeSet.containsAttributes(AttributeSet)*

public boolean containsAttributes(javax.swing.text.AttributeSet attributes)

Returnstrueif this set defines all the attributes from the given set with equal values. If an attribute is not found locally, 
it is searched through in the resolving parent hierarchy. 


    attributes - the set of attributes to check against 

    Returns: {@code true} if this set defines all the attributes with equal values, either locally or through its resolving parent 

*javax.swing.text.AttributeSet.copyAttributes()*

public |javax.swing.text.AttributeSet| copyAttributes()

Returns an attribute set that is guaranteed not to change over time. 



    Returns: a copy of the attribute set 

*javax.swing.text.AttributeSet.getAttribute(Object)*

public |java.lang.Object| getAttribute(java.lang.Object key)

Fetches the value of the given attribute. If the value is not found locally, the search is continued upward through the 
resolving parent (if one exists) until the value is either found or there are no more parents. If the value is not found, null 
is returned. 


    key - the non-null key of the attribute binding 

    Returns: 

*javax.swing.text.AttributeSet.getAttributeCount()*

public int getAttributeCount()

Returns the number of attributes that are defined locally in this set. Attributes that are defined in the parent set are not 
included. 



    Returns: the number of attributes >= 0 

*javax.swing.text.AttributeSet.getAttributeNames()*

public |java.util.Enumeration|<?> getAttributeNames()

Returns an enumeration over the names of the attributes that are defined locally in the set. Names of attributes defined in the 
resolving parent, if any, are not included. The values of the Enumeration may be anything and are not constrained to a 
particular Object type. 

This method never returnsnull. For a set with no attributes, it returns an emptyEnumeration. 



    Returns: 

*javax.swing.text.AttributeSet.getResolveParent()*

public |javax.swing.text.AttributeSet| getResolveParent()

Gets the resolving parent. 



    Returns: 

*javax.swing.text.AttributeSet.isDefined(Object)*

public boolean isDefined(java.lang.Object attrName)

Checks whether the named attribute has a value specified in the set without resolving through another attribute set. 


    attrName - the attribute name 

    Returns: true if the attribute has a value specified 

*javax.swing.text.AttributeSet.isEqual(AttributeSet)*

public boolean isEqual(javax.swing.text.AttributeSet attr)

Determines if the two attribute sets are equivalent. 


    attr - an attribute set 

    Returns: true if the sets are equivalent 


