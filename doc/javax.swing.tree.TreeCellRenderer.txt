*javax.swing.tree.TreeCellRenderer* *TreeCellRenderer* Defines the requirements for an object that displays a tree node.

public interface interface TreeCellRenderer


|javax.swing.tree.TreeCellRenderer_Description|
|javax.swing.tree.TreeCellRenderer_Fields|
|javax.swing.tree.TreeCellRenderer_Constructors|
|javax.swing.tree.TreeCellRenderer_Methods|

================================================================================================================================

*javax.swing.tree.TreeCellRenderer_Methods*
|javax.swing.tree.TreeCellRenderer.getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean)|Sets the valu

*javax.swing.tree.TreeCellRenderer_Description*

Defines the requirements for an object that displays a tree node. See How to Use Trees in The Java Tutorial for an example of 
implementing a tree cell renderer that displays custom icons. 



*javax.swing.tree.TreeCellRenderer.getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean)*

public |java.awt.Component| getTreeCellRendererComponent(
  javax.swing.JTree tree,
  java.lang.Object value,
  boolean selected,
  boolean expanded,
  boolean leaf,
  int row,
  boolean hasFocus)

Sets the value of the current tree cell to value. If selected is true, the cell will be drawn as if selected. If expanded is 
true the node is currently expanded and if leaf is true the node represents a leaf and if hasFocus is true the node currently 
has focus. tree is the JTree the receiver is being configured for. Returns the Component that the renderer uses to draw the 
value. 

The TreeCellRenderer is also responsible for rendering the the cell representing the tree's current DnD drop location if it has 
one. If this renderer cares about rendering the DnD drop location, it should query the tree directly to see if the given row 
represents the drop location: 

JTree.DropLocation dropLocation = tree.getDropLocation(); if (dropLocation != null dropLocation.getChildIndex() == -1 
tree.getRowForPath(dropLocation.getPath()) == row) { 

// this row represents the current drop location // so render it specially, perhaps with a different color } 



    Returns: the Component that the renderer uses to draw the value 


