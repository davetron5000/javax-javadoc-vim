*javax.tools.JavaCompiler* *JavaCompiler* Interface to invoke Java programming language compilers from
 programs.

public interface interface JavaCompiler

  implements |javax.tools.Tool|
             |javax.tools.OptionChecker|

|javax.tools.JavaCompiler_Description|
|javax.tools.JavaCompiler_Fields|
|javax.tools.JavaCompiler_Constructors|
|javax.tools.JavaCompiler_Methods|

================================================================================================================================

*javax.tools.JavaCompiler_Methods*
|javax.tools.JavaCompiler.getStandardFileManager(DiagnosticListener<?superJavaFileObject>,Locale,Charset)|Gets a new instance o
|javax.tools.JavaCompiler.getTask(Writer,JavaFileManager,DiagnosticListener<?superJavaFileObject>,Iterable<String>,Iterable<String>,Iterable<?extendsJavaFileObject>)|

*javax.tools.JavaCompiler_Description*

Interface to invoke Java programming language compilers from programs. 

The compiler might generate diagnostics during compilation (for example, error messages). If a diagnostic listener is provided, 
the diagnostics will be supplied to the listener. If no listener is provided, the diagnostics will be formatted in an 
unspecified format and written to the default output, which isSystem.errunless otherwise specified. Even if a diagnostic 
listener is supplied, some diagnostics might not fit in aDiagnosticand will be written to the default output. 

A compiler tool has an associated standard file manager, which is the file manager that is native to the tool (or built-in). 
The standard file manager can be obtained by calling getStandardFileManager(|javax.tools.JavaCompiler|) . 

A compiler tool must function with any file manager as long as any additional requirements as detailed in the methods below are 
met. If no file manager is provided, the compiler tool will use a standard file manager such as the one returned by 
getStandardFileManager(|javax.tools.JavaCompiler|) . 

An instance implementing this interface must conform to the Java Language Specification and generate class files conforming to 
the Java Virtual Machine specification. The versions of these specifications are defined in the (|javax.tools.Tool|) interface. 

Additionally, an instance of this interface supporting SourceVersion.RELEASE_6(|javax.lang.model.SourceVersion|) or higher must 
also support annotation processing(|javax.annotation.processing|) . 

The compiler relies on two services: diagnostic listener(|javax.tools.DiagnosticListener|) and file 
manager(|javax.tools.JavaFileManager|) . Although most classes and interfaces in this package defines an API for compilers (and 
tools in general) the interfaces (|javax.tools.DiagnosticListener|) , (|javax.tools.JavaFileManager|) , 
(|javax.tools.FileObject|) , and (|javax.tools.JavaFileObject|) are not intended to be used in applications. Instead these 
interfaces are intended to be implemented and used to provide customized services for a compiler and thus defines an SPI for 
compilers. 

There are a number of classes and interfaces in this package which are designed to ease the implementation of the SPI to 
customize the behavior of a compiler: 

(|javax.tools.StandardJavaFileManager|) 

Every compiler which implements this interface provides a standard file manager for operating on regular files(|java.io.File|) 
. The StandardJavaFileManager interface defines additional methods for creating file objects from regular files. 

The standard file manager serves two purposes: 

basic building block for customizing how a compiler reads and writes files sharing between multiple compilation tasks 

Reusing a file manager can potentially reduce overhead of scanning the file system and reading jar files. Although there might 
be no reduction in overhead, a standard file manager must work with multiple sequential compilations making the following 
example a recommended coding pattern: 



Files[] files1 = ... ; // input for first compilation task Files[] files2 = ... ; // input for second compilation task 

JavaCompiler compiler = ToolProvider.getSystemJavaCompiler(); StandardJavaFileManager fileManager = 
compiler.getStandardFileManager(null, null, null);IterablecompilationUnits1 = fileManager.getJavaFileObjectsFromFiles( 
Arrays.asList(|java.util.Arrays|) (files1)); compiler.getTask(null, fileManager, null, null, null, 
compilationUnits1).call();IterablecompilationUnits2 = fileManager.getJavaFileObjects(files2); // use alternative method // 
reuse the same file manager to allow caching of jar files compiler.getTask(null, fileManager, null, null, null, 
compilationUnits2).call(); 

fileManager.close(); 



(|javax.tools.DiagnosticCollector|) 

Used to collect diagnostics in a list, for example: 

IterablecompilationUnits = ...; JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();DiagnosticCollector diagnostics = 
new DiagnosticCollector();StandardJavaFileManager fileManager = compiler.getStandardFileManager(diagnostics, null, null); 
compiler.getTask(null, fileManager, diagnostics, null, null, compilationUnits).call(); 

for (Diagnostic diagnostic : diagnostics.getDiagnostics()) System.out.format("Error on line %d in %d%n", 
diagnostic.getLineNumber() diagnostic.getSource().toUri()); 

fileManager.close(); 



(|javax.tools.ForwardingJavaFileManager|) , (|javax.tools.ForwardingFileObject|) , and (|javax.tools.ForwardingJavaFileObject|) 

Subclassing is not available for overriding the behavior of a standard file manager as it is created by calling a method on a 
compiler, not by invoking a constructor. Instead forwarding (or delegation) should be used. These classes makes it easy to 
forward most calls to a given file manager or file object while allowing customizing behavior. For example, consider how to log 
all calls to (|javax.tools.JavaFileManager|) : 



final Logger(|java.util.logging.Logger|) logger = ...;IterablecompilationUnits = ...; JavaCompiler compiler = 
ToolProvider.getSystemJavaCompiler(); StandardJavaFileManager stdFileManager = compiler.getStandardFileManager(null, null, 
null); JavaFileManager fileManager = new ForwardingJavaFileManager(stdFileManager) { public void flush() { 
logger.entering(StandardJavaFileManager.class.getName(), "flush"); super.flush(); 
logger.exiting(StandardJavaFileManager.class.getName(), "flush"); } }; compiler.getTask(null, fileManager, null, null, null, 
compilationUnits).call(); 



(|javax.tools.SimpleJavaFileObject|) 

This class provides a basic file object implementation which can be used as building block for creating file objects. For 
example, here is how to define a file object which represent source code stored in a string: 



/** * A file object used to represent source coming from a string.*/ public class JavaSourceFromString extends 
SimpleJavaFileObject { /** * The source code of this "file".*/ final String code; 

/** * Constructs a new JavaSourceFromString. *@param name the name of the compilation unit represented by this file object 
*@param code the source code for the compilation unit represented by this file object*/ JavaSourceFromString(String name, 
String code) { super( URI.create(|java.net.URI|) ("string:///" + name.replace('.','/') + Kind.SOURCE.extension), Kind.SOURCE); 
this.code = code; }@Override public CharSequence getCharContent(boolean ignoreEncodingErrors) { return code; } } 





*javax.tools.JavaCompiler.getStandardFileManager(DiagnosticListener<?superJavaFileObject>,Locale,Charset)*

public |javax.tools.StandardJavaFileManager| getStandardFileManager(
  javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject> diagnosticListener,
  java.util.Locale locale,
  java.nio.charset.Charset charset)

Gets a new instance of the standard file manager implementation for this tool. The file manager will use the given diagnostic 
listener for producing any non-fatal diagnostics. Fatal errors will be signalled with the appropriate exceptions. 

The standard file manager will be automatically reopened if it is accessed after calls toflushorclose. The standard file 
manager must be usable with other tools. 


    diagnosticListener - a diagnostic listener for non-fatal diagnostics; if {@code null} use the compiler's default method for reporting diagnostics 
    locale - the locale to apply when formatting diagnostics; {@code null} means the {@linkplain Locale#getDefault() default locale}. 
    charset - the character set used for decoding bytes; if {@code null} use the platform default 

    Returns: the standard file manager 

*javax.tools.JavaCompiler.getTask(Writer,JavaFileManager,DiagnosticListener<?superJavaFileObject>,Iterable<String>,Iterable<String>,Iterable<?extendsJavaFileObject>)*

public |javax.tools.JavaCompiler.CompilationTask| getTask(
  java.io.Writer out,
  javax.tools.JavaFileManager fileManager,
  javax.tools.DiagnosticListener<? super javax.tools.JavaFileObject> diagnosticListener,
  java.lang.Iterable<java.lang.String> options,
  java.lang.Iterable<java.lang.String> classes,
  java.lang.Iterable<? extends javax.tools.JavaFileObject> compilationUnits)

Creates a future for a compilation task with the given components and arguments. The compilation might not have completed as 
described in the CompilationTask interface. 

If a file manager is provided, it must be able to handle all locations defined in (|javax.tools.StandardLocation|) . 


    out - a Writer for additional output from the compiler; use {@code System.err} if {@code null} 
    fileManager - a file manager; if {@code null} use the compiler's standard filemanager 
    diagnosticListener - a diagnostic listener; if {@code null} use the compiler's default method for reporting diagnostics 
    options - compiler options, {@code null} means no options 
    classes - class names (for annotation processing), {@code null} means no class names 
    compilationUnits - the compilation units to compile, {@code null} means no compilation units 

    Returns: an object representing the compilation 


