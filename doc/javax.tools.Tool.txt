*javax.tools.Tool* *Tool* Common interface for tools that can be invoked from a program.

public interface interface Tool


|javax.tools.Tool_Description|
|javax.tools.Tool_Fields|
|javax.tools.Tool_Constructors|
|javax.tools.Tool_Methods|

================================================================================================================================

*javax.tools.Tool_Methods*
|javax.tools.Tool.getSourceVersions()|Gets the source versions of the Java programming language  supported by this tool.
|javax.tools.Tool.run(InputStream,OutputStream,OutputStream,String...)|Run the tool with the given I/O channels and arguments.

*javax.tools.Tool_Description*

Common interface for tools that can be invoked from a program. A tool is traditionally a command line program such as a 
compiler. The set of tools available with a platform is defined by the vendor. 

Tools can be located using (|java.util.ServiceLoader|) . 



*javax.tools.Tool.getSourceVersions()*

public |java.util.Set|<SourceVersion> getSourceVersions()

Gets the source versions of the Java programming language supported by this tool. 



    Returns: a set of supported source versions 

*javax.tools.Tool.run(InputStream,OutputStream,OutputStream,String...)*

public int run(
  java.io.InputStream in,
  java.io.OutputStream out,
  java.io.OutputStream err,
  java.lang.String[] arguments)

Run the tool with the given I/O channels and arguments. By convention a tool returns 0 for success and nonzero for errors. Any 
diagnostics generated will be written to eitheroutorerrin some unspecified format. 


    in - "standard" input; use System.in if null 
    out - "standard" output; use System.out if null 
    err - "standard" error; use System.err if null 
    arguments - arguments to pass to the tool 

    Returns: 0 for success; nonzero otherwise 


